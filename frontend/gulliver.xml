<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="TravelGadget v1.0"
             description="Create an Itinerary Directly from Map Search Results. Start creating, exploring and sharing trips!"
             author="csindia-gadgets"
             author_email="gadget-factory@google.com"
             screenshot="http://gulliver.googlecode.com/svn/trunk/frontend/images/travel.png"
             thumbnail="http://gulliver.googlecode.com/svn/trunk/frontend/images/travel.png"
             scrolling="false">
  <Locale messages="http://gulliver.googlecode.com/svn/trunk/frontend/content/en_All.xml"/>

  <Require feature="setprefs"/>
  <Require feature="opensocial-0.8"/>
  <Require feature="views"/>
  <Require feature="dynamic-height"/>
  <Require feature="minimessage"/>
</ModulePrefs>
<Content type="html" view="home, profile">
<![CDATA[
<style type="text/css">
.heading{font-size:10pt;font-weight:bold;}
.btn{font-size:8pt;font-weight:bold;}
.hint{font-size:8pt;}
.locTxt{font-size:8pt;font-weight:bold;}
.tablib_emptyTab_home{border-bottom:1px solid #96aed0;padding:0 1px;}
.tablib_navContainer{width:10px;vertical-align:middle;}
.subhead{color:#368abd;font-size:12px;padding-right:4px;}
.subhead2{color:#000;font-size:12px;padding-right:4px;}
.subhead3{color:#808080;font-size:12px;}
.tablib_table{font-size:12px;text-align:center;}
.txtBox {
  border: 1px solid #aaa;
  font-size: 10pt;
  width: 100%;
}
.tablib_selected {
  background: #fff;
  color: #0f03ff;
  font-weight: bold;
  text-align: center;
  width: 90px;
}
.tablib_unselected {
  background: #e5eefa;
  border-color: #96aed0;
  color: #0f03ff;
  font-weight: bold;
  text-align: center;
  width: 90px;
}
.tablib_emptyTab {
  border-bottom: 1px solid #96aed0;
  padding: 0 1px;
  width: 1px;
}
.tablib_spacerTab {
  border-bottom: 1px solid #96aed0;
  padding: 0px 1px;
  width: 1px;
}
.head {
  background: #e5ecf9;
  color: #004080;
  font-weight: bold;
  font-size: 12px;
}
.sublink {
  color: #368abd;
  cursor: pointer;
  font-size: 11px;
  text-decoration: none;
}
.tdborder {
  border-bottom: #cfcfcf 1px solid;
  color: #000;
  font-size: 12px;
  padding-top: 5px;
  padding-bottom: 5px;
  vertical-align: top;
}
.links {
  cursor: pointer;
  color: #00c;
  font-family:arial,sans-serif;
  font-size: 11px;
  text-decoration: underline;
}
.image1 {
  background-image: url(http://www.google.com/reader/ui/module-gradient-bottom.gif);
  cursor: pointer;
  color: #eee;
  -moz-user-select: none;
  -khtml-user-select: none;
}
.image2 {
  background-image: url(http://www.google.com/reader/ui/module-gradient-bottom.gif);
  cursor: pointer;
  color: #eee;
  -moz-user-select: none;
  -khtml-user-select: none;
}
.highlight {
  background: #d5ddf3;
  cursor: pointer;
}

#server_msg {
  color: #f00;
  font-size: 13px;
  font-weight: none;
  padding-left: 3px;
  padding-top: 3px;
}
a:visited {color:#00c;}
a.link:link {color:#00c;}
a.link {color:#00c;}
a.link:focus{color:#00c;}
</style>
<script src="http://maps.google.com/maps?file=api&amp;v=2.155&amp;sensor=false&amp;key=ABQIAAAAdJJ71whPrja_yYgs8aDYoxT6ZIvuoW-OMIORrcKaWZZ1wY_9JRT1rKTLR4-M4QK4TAasY9gTfxuxiQ" type="text/javascript"></script>
<script type="text/javascript">
/**
 * @fileoverview Code to handle config values of gulliver gadget
 * home view functionality.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Default error value.
 * @const
 * @type {number}
 */
var ERROR_VALUE = 1;

/**
 * User prefs.
 * @type {_IG_Prefs}
 */
var prefs = new _IG_Prefs();

/**
 * Appengine base url.
 * @const
 * @type {string}
 */
var BASE_URL = 'http://travel-gadget1.appspot.com';

/**
 * Default duration.
 * @const
 * @type {number}
 */
var DEFAULT_DURATION = 7;

/**
 * Default duration.
 * @const
 * @type {number}
 */
var DEFAULT_RATING = 3;

/**
 * Array to store trip data.
 * @type {Array}
 */
var gTripData = [];

/**
 * Flag to check whether from home trip or not.
 * @type {boolean}
 */
var fromTripHome = false;

/**
 * Id of a trip.
 * @type {string}
 */
var tripId = null;

/**
 * To store current trip name.
 * @type {string}
 */
var tripName = null;

/**
 * To store the id of the owner.
 * @type {number}
 */
var ownerId = null;

/**
 * To store owner name.
 * @type {string}
 */
var ownerName = null;

/**
 * To store the trip location.
 * @type {string}
 */
var tripLocation = null;

/**
 * Latitude of current trip location.
 * @type {string}
 */
var lat = null;

/**
 * Longitude of current trip location.
 * @type {string}
 */
var lang = null;

/**
 * To store current trip location accuracy.
 * @type {number}
 */
var accuracy = null;

/**
 * Object for GClientGeocoder.
 * @type {Object}
 */
var geocoder = null;

/**
 * To store current trip duration.
 * @type {number}
 */
var duration;

/**
 * To store current trip start and end dates.
 * @type {string}
 */
var gStartDate = gEndDate = null;

/**
 * To store current trip rating.
 * @type {number}
 */
var gRating = null;

/**
 * Array to store opensocial data.
 * @type {Array}
 */
var gOpenSocial = [];

/**
 * To hold current viewer.
 * @type {Object}
 */
var gViewer;

/**
 * @fileoverview Code to handle home view of Gulliver Gadget.
 * @author gadgetfactory@google.com (gadgetfactory)
 */


/**
 * Used for creating, initializing and sending the viewer data.
 */
function requestData() {
  if (!isServiceAvailableForUser()) {
    _gel('homeContent').innerHTML = _gel('service_not_available').innerHTML;
  } else {
    var req = opensocial.newDataRequest();
    req.add(req.newFetchPersonRequest('VIEWER'), 'viewer');
    req.add(req.newFetchPeopleRequest(opensocial.newIdSpec({
                                      'userId': 'VIEWER',
                                      'groupId': 'FRIENDS'
                                     })), 'groupPeople');
    req.send(callbackAllTrips);
  }
}

/**
 * To check whether opensocial feature in user container is available
 * or not.
 * @return {boolean} Returns true if container supports opensocial feature
 *     and views else returns false.
 */
function isServiceAvailableForUser() {
  try {
    return gadgets.util.hasFeature('opensocial-0.8') &&
           gadgets.views.getSupportedViews().canvas &&
           _args().st;
  } catch (ex) {
    return false;
  }
}

/**
 * Callback function for all trips data of the user.
 * @param {Object} response Response of opensocial request.
 */
function callbackAllTrips(response) {
  var data = [];
  if (!gOpenSocial.viewer) {
    gOpenSocial.viewer = response.get('viewer').getData();
    var displayName = gOpenSocial.viewer.getDisplayName();
    gViewer = displayName;
    data.push(gViewer);
  }
  gOpenSocial.viewerFriends = response.get('groupPeople').getData();
  if (gOpenSocial.viewerFriends) {
    gOpenSocial.viewerFriends.each(function(person) {
      data.push(person.getDisplayName());
    });
  }
  if (response.hadError()) {
    switch (opensocial.ResponseItem.getErrorCode) {
      case opensocial.ResponseItem.Error.UNAUTHORIZED :
        _gel('homeContent').innerHTML = _gel('user_not_authorized').innerHTML;
        break;
      default:
        _gel('homeContent').innerHTML = _gel('user_not_authorized').innerHTML;
        break;
    }
    _IG_AdjustIFrameHeight();
  } else if (gOpenSocial.viewer.getId() == -1) {
    _gel('homeContent').innerHTML = _gel('user_not_signed_in').innerHTML;
  } else {
    var friendsList = [];
    for (var j = 0, length = data.length - 1; j <= length; j++) {
      friendsList.push('\'' + _esc(data[j]) + '\'');
    }
    friendsList = friendsList.join(',');
    url = BASE_URL + '/getAllTrips?friendsList=' + friendsList +
        '&rand=' + Math.random();
    gadgets.io.makeRequest(url, initializeData);
 }
}

/**
 * Initializes the trip data.
 * @param {object} response Response data.
 */
function initializeData(response) {
  var owner_trips = gadgets.json.parse(response.data);
  if (owner_trips != '') {
    gTripData = owner_trips;
    showTrips();
  } else {
    gTripData = owner_trips;
    callbackCreate();
  }
}

/**
 * Used for displaying the trips of the owner.
 */
function showTrips() {
  _gel('server_msg').style.display = 'none';
  var html = [];
  if (gTripData.length > 0) {
    html.push('<table border="0" cellpadding="0" cellspacing="0" width="100%">',
              '<tr class="head">',
              '<td valign="top" width="32%">' + prefs.getMsg('trip_name') +
              '</td><td valign="top" width="32%">' + prefs.getMsg('date') +
              '</td><td valign="top" width="36%">' + prefs.getMsg('location') +
              '</td></tr></table>');
    var text;
    var tripDataLen = gTripData.length;
    for (i = 0; i < 5 && i < tripDataLen; i++) {
      text = getDetailsSection(i);
      html.push(text);
    }
    html.push('<table border="0" cellpadding="0" cellspacing="0" ',
              ' style="padding-top:5px;" width="100%"><tr>',
              '<td align="left" width="30%">',
              '<input type=button ',
              'onClick="callbackCreate();" value="' +
              prefs.getMsg('create_trip') + '"></td>',
              '<td align="center" width="30%">',
              '<a href="mailto:developer.gadget@gmail.com" ' ,
              'class="links">' + prefs.getMsg('feedback') + '</a></td>',
              '<td align="right" width="30%">',
              '<span id="viewAll" class="links" ',
              'onClick="goToCanvas();">' +
              prefs.getMsg('view_all_trips') +
              '</span></td></tr></table>');
  } else {
    html.push('<table border="0" cellpadding="0" cellspacing="0" ',
              'width="100%"><tr>',
              '<td align="center" class="hint">' + prefs.getMsg('no_trips') +
              '&nbsp;&nbsp;<a href="#" ',
              ' onClick="callbackCreate;">' + prefs.getMsg('createTrip') +
              '</a></td></tr>',
              '<tr><td align="right" width="30%" colspan="2">',
              '<a href="mailto:developer.gadget@gmail.com" ' ,
              'class="links">' + prefs.getMsg('feedback') + '</a></td>',
              '</tr></table>');
  }
  _gel('homeContent').innerHTML = html.join('');
  _IG_AdjustIFrameHeight();
}

/**
 * Used to get the html of the details of the expanded trip.
 * @param {string} id Id of the current trip.
 * @return {string} html Details of the expanded trip.
 */
function getDetailsSection(id) {
  var html = [];
  var nameMaxLength = 16;

  var tripName = gTripData[id].trip_name;
  var tripID = gTripData[id].trip_id;
  if (tripName.length > nameMaxLength) {
    tripName = tripName.substring(0, nameMaxLength);
    tripName += '...';
  }
  var sDate = gTripData[id].sdate;
  if (!sDate || sDate == 'None' || sDate == undefined)
    sDate = '';
  else
    sDate = formatDate(sDate);
  var eDate = gTripData[id].fdate;
  if (!eDate || eDate == 'None' || eDate == undefined)
    eDate = '';
  else
    eDate = formatDate(eDate);

  html.push('<div id="trip', id, '" style="padding-top:5px;',
            ' border-bottom:1px #ccc dotted;">',
            '<table border="0" cellpadding="0" cellspacing="0" width="100%">',
            '</td><td valign="top" width="32%" class="subhead" >',
            '<a href=',
            '"javascript:showTripDetails(', id, ');" ',
            'style="text-decoration:none;" title=" ' ,
            gTripData[id].trip_name, '">', tripName, '&nbsp;</a></td>',
            '<td valign="top" width="32%" class="subhead2" >', sDate,
            ' - ', eDate, '</td><td valign="top" width="36%" class="subhead2">',
            gTripData[id].location, '</td>',
            '</tr></table></div>');
  return (html.join(''));
}

/**
 * Converts the date in format MON DD, YYYY.
 * @param {string} dateStr Date to be converted.
 * @return {string} Converted date.
 */
function formatDate(dateStr) {
  if (dateStr != undefined) {
    var monthArray = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'];
    dateStr = dateStr.split('-');
    var month = dateStr[1] - 1;
    var finaldate = monthArray[month] + ' ' + dateStr[2];
    return finaldate;
  } else {
    return '';
  }
}

/**
 * Display the trip details.
 * @param {number} nIndex Index of the current trip.
 */
function showTripDetails(nIndex) {
  ownerName = gTripData[nIndex].owner_name;
  tripName = gTripData[nIndex].trip_name;
  tripId = gTripData[nIndex].trip_id;
  tripLocation = gTripData[nIndex].location;
  lat = gTripData[nIndex].lat;
  lang = gTripData[nIndex].lang;
  accuracy = gTripData[nIndex].accuracy;
  duration = gTripData[nIndex].duration;
  gStartDate = gTripData[nIndex].sdate;
  gEndDate = gTripData[nIndex].fdate;
  gRating = gTripData[nIndex].rating;
  fromTripHome = true;
  goToCanvas();
}

/**
 * Registers keyup event.
 * @param {string} strId Element id.
 */
function addKeyListener(strId) {
  if (window.addEventListener) {
    _gel(strId).addEventListener('keyup', handleKeyEvent, false);
  } else {
    _gel(strId).attachEvent('onkeyup', handleKeyEvent);
  }
}

/**
 * Handles key event.
 * @param {object} event Keyup event.
 */
function handleKeyEvent(event) {
  if (!event) event = window.event;
  switch (event.keyCode) {
    case 13:
      var id =
          event['target'] ? event['target']['id'] : event['srcElement']['id'];
      if (id == 'location') {
        validateTrip();
      }
      break;
    default:
      break;
  }
}

/**
 * Initializes the params and sends the control to canvas view.
 */
function goToCanvas() {
  var params = {
    tripId: tripId,
    tripName: tripName,
    tripLocation: tripLocation,
    ownerId: ownerId,
    ownerName: ownerName,
    lat: lat,
    lng: lang,
    accuracy: accuracy,
    duration: duration,
    sdate: gStartDate,
    fdate: gEndDate,
    rating: gRating,
    currentViewer: gViewer
  };
  _gel('homeContent').innerHTML = '';
  gadgets.views.requestNavigateTo(new gadgets.views.View('canvas'),
      params);
}

/**
 * Check for the response and handles the error.
 * @param {object} response Server response.
 */
function checkResponseTrip(response) {
  var responseData = gadgets.json.parse(response.data);
  var serverMsgRef = _gel('server_msg');
  if (responseData[0].error != ERROR_VALUE &&
      responseData[0].error != 'undefined') {
    serverMsgRef.style.display = 'none';
    tripId = responseData[0].tripId;
    gRating = DEFAULT_RATING;
    goToCanvas();
  } else {
    serverMsgRef.style.display = 'block';
    serverMsgRef.innerHTML = '<b>' + prefs.getMsg('server_error') +
                             '<b>&nbsp;<a href="javascript:void(0);" ' +
                             'onclick="createTrip(\'' +
                             tripName + '\');">' +
                             prefs.getMsg('try_again') + '</a>';
    _IG_AdjustIFrameHeight();
  }
}

/**
 * Converts the date in a particular format.
 * @param {string} d Date to be formatted.
 * @return {string} Formatted date.
 */
function convertFormat(d) {
  var mdate = new Date(d);
  var mon = mdate.getMonth() + 1;
  if (mon < 10)
    mon = '0' + mon;
  var year = mdate.getFullYear();
  day = mdate.getDate();
  if (day < 10) {
    day = '0' + day;
  }
  finaldate = mon + '/' + day + '/' + year;
  return finaldate;
}

/**
 * Creates the trip and saves it in the database.
 * @param {string} tName Trip name.
 */
function createTrip(tName) {
  var count = 0;
  var nameLength = tName.length;
  var tripDataLength = gTripData.length;
  for (var i = 0; i < tripDataLength; i++) {
    tripName = gTripData[i].trip_name;
    if (tName.toLowerCase() == tripName.substr(0, nameLength).toLowerCase()) {
      count++;
    }
  }

  tripName = tName + ' ' + prefs.getMsg('trip');
  if (count != 0) {
    tripName = tripName + count;
  }

  var req = opensocial.newDataRequest();
  req.add(req.newFetchPersonRequest('VIEWER'), 'viewer');
  req.send(function(response) {
    ownerId = response.get('viewer').getData().getId();
    ownerName = response.get('viewer').getData().getDisplayName();
    gViewer = ownerName;
    var params = {currentViewer: ownerName};

    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
    post_data = gadgets.io.encodeValues({
      'owner_id': ownerId,
      'owner_name': ownerName,
      'trip_name': tripName,
      'location' : tripLocation,
      'lat' : lat,
      'lang' : lang,
      'accuracy' : accuracy,
      'duration': duration,
      'rating': DEFAULT_RATING
    });
    params[gadgets.io.RequestParameters.POST_DATA] = post_data;
    var url = BASE_URL + '/saveTrip?rand=' + Math.random();
    gadgets.io.makeRequest(url, checkResponseTrip, params);
  });
  _IG_AdjustIFrameHeight();
}

/**
 * Checks whether the location is valid and if valid,
 * sends the control to canvas view.
 * @param {string} address Location entered by user.
 */
function showAddress(address) {
  if (geocoder) {
    var locationRef = _gel('location');
    var serverMsgRef = _gel('server_msg');
    geocoder.getLocations(address, function(result) {
      if (result.Status.code == 200) {
        if (result.Placemark.length > 0) {
          var place = result.Placemark[0];
          accuracy = place.AddressDetails.Accuracy;
          accuracy = accuracy;
          var p = result.Placemark[0].Point.coordinates;
          lat = p[1];
          lang = p[0];
          tripName = address;
          tripLocation = address;
          duration = DEFAULT_DURATION;
          locationRef.className = 'txtBox';
          serverMsgRef.style.display = 'none';
          createTrip(tripName);
        }
      } else {
        locationRef.value = '';
        locationRef.focus();
        serverMsgRef.style.display = 'block';
        serverMsgRef.innerHTML = prefs.getMsg('invalid_loc');
        _IG_AdjustIFrameHeight();
        return;
      }
    });
  }
}

/**
 * Check for numeric string.
 * @param {string} strString String to be validated.
 * @return {boolean} Returns false if no invalid characters are found.
 */
function isNumeric(strString) {
  var strInvalidChars = '0123456789';
  var strChar;
  var strStringLength = strString.length;
  for (i = 0; i < strStringLength; i++) {
    strChar = strString.charAt(i);
    if (strInvalidChars.indexOf(strChar) != -1) {
      return true;
    }
  }
  return false;
}

/**
 * Validates the required fields.
 */
function validateTrip() {
  var locationRef = _gel('location');
  var serverMsgRef = _gel('server_msg');
  if (_gel('location').value != '') {
    var tripLoc = _gel('location').value;
    var bInvalid = isNumeric(tripLoc);
    if (!bInvalid) {
      showAddress(tripLoc);
    } else {
      locationRef.value = '';
      locationRef.focus();
      serverMsgRef.style.display = 'block';
      serverMsgRef.innerHTML = prefs.getMsg('numeric_err');
      _IG_AdjustIFrameHeight();
    }
  } else {
    locationRef.focus();
  }
}

/**
 * Callback function for Create Trip tab.
 */
function callbackCreate() {
  var html = ['<table width="100%"><tr><td colspan="2">',
              '<font class="heading">' + prefs.getMsg('where_visit') +
              '</font></td></tr><tr><td width="90%">',
              '<input type="text" id="location" class="txtBox" />',
              '<font class="hint" style="color:#666;">' +
              prefs.getMsg('egLocation') +
              '</font></td><td width="30%" valign="top">',
              '<input type="button" value="' + prefs.getMsg('create') +
              '" onClick="validateTrip();"/>',
              '</td></tr><tr><td align="left" width="30%">',
              '<a href="mailto:developer.gadget@gmail.com" ' ,
              'target="_blank" class="links">' + prefs.getMsg('feedback') +
              '</a></td>'];
  if (gTripData.length > 0) {
    html.push('<td align="right" width="*">',
              '<span id="viewAll" class="links" ',
              'onClick="goToCanvas();">' +
              prefs.getMsg('view_all_trips') + '</span></td>');
  }
  html.push('</tr></table>');

  _gel('homeContent').innerHTML = html.join('');
  addKeyListener('location');
  _IG_AdjustIFrameHeight();
}

/**
 * Draw the tabs dynamically.
 */
function init() {
  if (GBrowserIsCompatible()) {
    geocoder = new GClientGeocoder();
  }
  requestData();
  _IG_AdjustIFrameHeight();
}

// Entry point.
_IG_RegisterOnloadHandler(init);
</script>
<div id="homeContent" style="padding-top:5px;"></div>
<div id="server_msg" style="display:none;"></div>
<div id="service_not_available" style="display:none">
  <b>Welcome to iGoogle TravelGadget!</b>
  <div style="margin: 16px 0;font-size:11px;">
    <p>__MSG_os_not_avail__</p>
  </div>
</div>
<div id="user_not_authorized" style="display:none">
  <b>Welcome to iGoogle TravelGadget!</b>
  <div style="margin: 16px 0;font-size:11px;">
    <p>__MSG_no_sensitive__</p>
    <p>__MSG_up_button__  &nbsp;
      <img src="http://gulliver.googlecode.com/svn/trunk/frontend/images/opensocial_icon.gif" width="19" height="10" alt="Open Social Preferences">
    </p>
    <p>__MSG_enable_os__</p>
    <p>__MSG_os_is_new__
      <a href="mailto:developer.gadget@gmail.com" target="_blank">let us know
      </a>!
    </p>
  </div>
</div>
<div id="user_not_signed_in" style="display:none">
  <b>Welcome to iGoogle TravelGadget!</b>
  <div style="margin: 16px 0;font-size:11px">
    <p>__MSG_user_not_signed_in__</p>
    <p>__MSG_already_signin__</p>
  </div>
</div>
]]>
</Content>
<Content type="html" view="canvas">
<![CDATA[
<style type="text/css">
.mmlib_table {
  background-color: #ffc;
  border: 1px solid #ffcc35;
  border-collapse: separate;
  border-spacing: 0;
  color: #000;
  display: inline;
  font-size: 12px;
  font-weight: bold;
  padding: 2px 15px 2px 10px;
}
.heading{font-size:10pt;font-weight:bold;}
.hint{font-size:11px;}
.txtBox {
  font-size: 10pt;
  border: 1px solid #aaa;
  width: 100%;
}
#msgContainer {
  padding: 3px 0 10px 0;
  background: #f5eee6;
}
.loading {
  font-size: 13px;
  font-family: arial, sans-serif;
  vertical-align: middle;
  text-align: center;
}
#canvasContent {font-family: arial, sans-serif;padding: 0;}
#tripHeader1, #showingTripText{font-size:12px;}
#showAllTrips {
  text-decoration: underline;
  color: #00f;
  height: 0px;
  cursor: pointer;
  font-size: 10px;
}
#tripHeader2 {
  padding-top: 5px;
  font-size: 12px;
  font-weight: normal;
}
#tripName, #sDate, #eDate {
  font-weight: bold;
  font-size: 14px;
  padding-right: 5px;
}
#imgRating {
  float: right;
  padding-right: 10px;
  padding-top: 5px;
}

#deleteTrip{float:left;}
#otherActions{float:right;}
#editTrip, #editLoc, #editDays { padding-left: 2px;font-weight: normal; }
#location, #durationSection { font-size: 13px;padding: 0 0 0 4px; }
#itineraryHead {
  font-size: 13px;
  font-weight: bold;
  width: 100%;
  float: left;
  padding-top: 10px;
}
.server-msg {
  background-color: #ffc;
  border: 1px solid #ffcc35;
  color: #000;
  display: inline;
  font-size: 12px;
  font-weight: bold;
  padding: 2px 15px 2px 10px;
}
.itemDay {
  font-size: 13px;
  font-weight: bold;
  padding: 0 0 5px 2px;
}
.link, itemTitle {
  text-decoration: underline;
  cursor: pointer;
  color: #00c;
}
.link{color: #fff; font-size: 12px;}
.itemTitle{font-size:12px;}
#unscheduleItemBox{height:150px;}
#scheduleItemBox{height:360px;}
#scheduleItemBox, #unscheduleItemBox {
  border: 1px solid #058a9d;
  padding-right: 10px;
  overflow-y: scroll;
}
.searchbox, #dragHelper { border: 1px solid #96aed0; }
.dragobj{background:#efefef;opacity:0.5;}
.searchText{font-weight:bold;font-size:13px;}
#resultText{font-weight:bold;font-size:12px;float:left;padding-left:5px;}
.egText {
  color: #808080;
  font-size: 11px;
  font-weight: normal;
  float: left;
  margin-left: 111px;
}
.no_trip {
  background: #f9f9f9;
  color: #6f6f6f;
  font-family: arial, sans-serif;
  font-size: 12px;
  width: 100%;
}
#mapBox{height:546px;border:1px solid #058a9d;}
#resultBox{overflow:hidden;}
#itemInfo{position:absolute;font-size:12px;}
.itemTitle {
  color: #0f03ff;
  cursor: pointer;
  font-size: 12px;
}
.trashImg{float:right;}
.tripCols {
  border: 1px solid #039bb2;
  background: #039bb2 url(http://gulliver.googlecode.com/svn/trunk/frontend/images/button-background.gif) repeat-x 0 0;
  color: #fff;
  cursor: default;
  font-family: arial, sans-serif;
  font-size: 12px;
  font-weight: bold;
  margin: 0;
  padding-left: 5px;
  text-align: left;
 }
.head {
  background: #e5ecf9;
  color: #004080;
  font-size: 12px;
}
.subhead {
  color: #039bb2;
  font-size: 13px;
  font-weight: bold;
  padding-right: 4px;
  text-transform: capitalize;
}
.subhead2 {
  color: #000;
  font-size: 12px;
  padding-right: 4px;
  text-transform: capitalize;
}
#tripName {
  text-transform: capitalize;
}
img.trendsstaron {
  background: transparent url(http://maps.google.com//mapfiles/stars.png) no-repeat scroll 0 0;
  height: 16px;
  width: 15px;
}
img.trendsstaroff {
  background: transparent url(http://maps.google.com//mapfiles/stars.png) no-repeat scroll -16px 0;
  height: 16px;
  width: 15px;
}
.editDialog {
  border: 1px solid #abbfcc;
  background-color: #e5eefa;
  height: 65px;
  position: absolute;
  padding-left: 5px;
  width: 200px;
  z-index: 101;
}
#cancelButton {width:56px;}
.dlgTextBox { width: 190px;font-family: arial, sans-serif; }
.dlgCtrlSection{padding-top:10px;padding-right:8px;}
.dlgButton {
  margin: 0;
  padding: 2px 5px 2px 5px;
  font-family: arial, sans-serif;
  font-size: 12px;
  font-weight: bold;
  text-decoration: none;
  text-align: left;
  color: #888;
  cursor: default;
  border: 1px solid #aaa;
  background: #039bb2 url(http://gulliver.googlecode.com/svn/trunk/frontend/images/button-background.gif) repeat-x 0 0;
  width: 100%;
}
.title-addItem {
  background-color: #058a9d;
  font-weight: bold;
  font-size: 13px;
  font-family: arial, sans-serif;
  height: 18px;
  padding: 1px 3px 5px;
  color: #fff;
  height: 13px;
  width: 265px;
}
.title {
  font-weight: bold;
  font-size: 13px;
  font-family: arial, sans-serif;
  height: 20px;
  width: 97%;
  padding-top: 1px;
  padding-left: 5px;
  color: #fff;
  background-color: #058a9d;
}
.tabledata {
  font-size: 12px;
  font-family: arial, sans-serif;
  padding-top: 5px;
}
.startdatedp_div {
  left: 146px;
  position: relative;
  top: 22px;
  width: 10em;
  display: none;
}
#maindialog {
  width: 153px;
  height: 290px;
  background-color: #fff;
}
.dpTable {
  font-family: Tahoma, Arial, Helvetica, sans-serif;
  font-size: 12px;
  text-align: center;
  color: #555;
  background-color: #fefefe;
  border: 1px solid #abcaf8;
}
.dpTD {
  cursor: pointer;
  border: 1px solid #fff;
  text-align: center;
  font-size: 12px;
}
.dpselectedTD {
  cursor: pointer;
  border: 1px solid #070707;
  text-align: center;
}
.dpDayHighlightTD {
  border: 1px solid #fff;
  background-color: #61d8d8;
  cursor: pointer;
}
.dpDayHighlightTDSelected {
  background-color: #eef9f9;
  cursor: pointer;
  border: 1px solid #070707;
}
.dpTDHover {
  background-color: #aca998;
  border: 1px solid #888;
  cursor: pointer;
  color: red;
  text-align: right;
}
.dpButtonTD{ cursor: pointer; }
.dpDayTD{ color: #000; }
.dpTitleText {
  font-size: 12px;
  color: #fff;
  font-weight: bold;
  background-color: #058a9d;
}
.dpDayHighlight{color:#000;font-weight:bold;}
.dpButton {
  font-family: arial, sans-serif;
  font-size: 10px;
  color: gray;
  background: #d8e8ff;
  font-weight: bold;
}
#viewdatedialogbox {
  height: 160px;
  width: 350px;
  background-color: #fff;
}
#itemDescription,  #itemName{
 font-family: arial;
 font-size: 13px;
}
#sendMailBox {
  background-color: #058a9d;
  width: 380px;
}
#editItemDialogBox {
  background-color: #e4effe;
  width: 395px;
}
.change-loc-dlg {
  background-color: #fff;
  width: 320px;
}
#wrngmsg{
  font-size: 11px;
  color: #ff5857;
  height: 8px;
  text-align: center;
}
#toolTip {
  position:absolute;
  height: 14px;
  border: 1px solid #7D7D72;
  display: none;
  background: #fff;
  font-size: 11px;
  font-weight: bold;
  padding: 2px;
}
.title_viewDatesDialog {
  background-color: #058a9d ;
  font-weight: bold;
  font-size: 13px;
  font-family: arial, sans-serif;
  height: 25px;
  color: #3e36a5;
}
#create-new-item {
  width: 360px;
  background-color: #fff;
}
.dialog-title {
  background-color: #058a9d;
  font-weight: bold;
  font-size: 13px;
  font-family: arial, sans-serif;
  height: 18px;
  padding: 4px 3px 5px 2px;
  color: #fff;
}
.dialog-title-send {
  background-color: #058a9d;
  font-weight: bold;
  font-size: 13px;
  font-family: arial, sans-serif;
  height: 18px;
  color: #fff;
}
.tableCreateItemDialog {
  font-size: 12px;
  color: #000;
  font-family: arial, sans-serif;
}
.delete_item {
  border: 1px solid #058a9d;
  width: 302px;
  height: 105px;
  background-color: #fff;
}

.print_subTitle {
  color: #000;
  font-weight: bold;
  font-family: arial, sans-serif;
  font-size: 14px;
}
#print_content{display:none;}
#unscheduleItem_dlg {
  width: 270px;
  height: 130px;
  background-color: #fff;
}
#edit-trip-name {
  width: 250px;
  background-color: #fff;

}
@media print {
  #messageContainer {
    display: none;
    height: 0;
    width: 0;
  }
  .tablib_emptyTab_canvas {
    display: none;
    height: 0;
    width: 0;
  }
  #msgContainer {
    display: none;
    height: 0;
    width: 0;
  }
  .tablib_table{
    display: none;
    height: 0;
    width: 0;
  }
  #canvasContent {
    display: none;
    height: 0;
    width: 0;
  }
  #dialog {
    display: none;
    height: 0;
    width: 0;
  }
  #dialog-mask {
    display: none;
    height: 0;
    width: 0;
  }
  #dialog-content {
    display: none;
    height: 0;
    width: 0;
  }
  #print_Trip_Items_Dialog {
    display: none;
    height: 0;
    width: 0;
  }
  #print_content {
    display: block;
    height: 100%;
    width: 100%;
    overflow: visible;
  }
  #messageContainer {
    display: none;
  }
  #serverMsg {
    display: none;
  }
}
#print_Trip_Items_Dialog {
  height: 465px;
  width: 726px;
}
#print_Dialog {
  overflow-y: scroll;
  overflow-x: hidden;
  background: #fff;
  height: 414px;
}
#dialog {
  position: absolute;
  z-index: 200;
  background: #fff;
  border: 3px solid #058a9d;
}
.printTitle {
  background: #058a9d;
  text-align: left;
  height: 30px;
  color: #000;
}
.print_close_img{
  margin-top: 4px;
  margin-left: 16px;
  cursor: pointer;
  width: 15px;
  margin-right: 8px;
}
a:visited {color:#00c;}
a:link {color:#00c;}
a {color:#00c;}
.tablib_table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0px;
  empty-cells: show;
  font-size: 11px;
  text-align: center;
}
.tablib_selected {
  width: 100px;
  background: #fff;
  color: #0f03ff;
  font-weight: bold;
  font-size: 13px;
  text-align: center;
}
.tablib_unselected {
  width: 90px;
  font-size: 13px;
  text-align: center;
  background: #e5eefa;
  color: #0f03ff;
  font-weight: bold;
  border-color: #96aed0;
}
.tablib_emptyTab{border-bottom:1px solid #96aed0;width:1px;}
.tablib_emptyTab_canvas{
  padding: 10px 5px;
  background: #f5eee6;
}
.tablib_spacerTab {
  border-bottom: 1px solid #96aed0;
  padding: 0 1px;
  width: 1px;
}
.tablib_navContainer{width:10px;vertical-align:middle;}
.tablib_navContainer a:link, .tablib_navContainer a:visited,
.tablib_navContainer a:hover{color:#3366aa;text-decoration:none;}
.trip-action {
  background: #fff;
  font-size: 12px;
  font-weight: bold;
  float: right;
  cursor: pointer;
}
.select-option {
  background-color: #fff;
  border: 1px solid #999;
  font-size: 12px;
  z-index: 1;
  cursor: pointer;
}
.drop-down-table {
  overflow: visible;
  width: 0;
  height: 0;
  left: -5px
  z-index: 100;
  position: relative;
  top: -14px;
}
#server_msg {
  color: #f00;
  font-size: 11px;
  font-weight: none;
  padding-left: 3px;
  padding-top: 3px;
}
#mailErr {
  color: #f00;
  font-size: 11px;
  text-decoration: none;
}
.drop-highlight {
  background-color: #e5eefa;
}
.google-search {
  background: #fff url(http://gulliver.googlecode.com/svn/trunk/frontend/images/google_watermark.gif) no-repeat scroll left center;
}
</style>
<link href="http://gulliver.googlecode.com/svn/trunk/frontend/css/dialogBox.css" rel="stylesheet" type="text/css">
<script src="http://maps.google.com/maps?file=api&amp;v=2.155&amp;sensor=false&amp;key=ABQIAAAAdJJ71whPrja_yYgs8aDYoxT6ZIvuoW-OMIORrcKaWZZ1wY_9JRT1rKTLR4-M4QK4TAasY9gTfxuxiQ" type="text/javascript"></script>
<script src="http://gulliver.googlecode.com/svn/trunk/frontend/js/dialog_box.js"></script>
<script src="http://gulliver.googlecode.com/svn/trunk/frontend/js/datepicker_calender.js"></script>
<script src="http://gulliver.googlecode.com/svn/trunk/frontend/js/wave.js"></script>
<script type="text/javascript">
/**
 * @fileoverview Code to handle config values of gulliver gadget
 * home view functionality.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * User prefs.
 * @type {_IG_Prefs}
 */
var prefs = new _IG_Prefs();

var timerMsg;
var gViewer;
var gPopUpIndex = -1;
var markerIndex;
var currentMarker;
var currentMarkerIcon;
var dragItemCounter = 0;
var gCurrentTripId = '';
var refreshUIData;
var tabAccuracy = [2, 4, 6, 10, 12, 13, 16, 16, 16, 16];
var gParams = gadgets.views.getParams();
var strSelectedItemId = '';
var gMap = null;
var arrSearchResults = [];
var geocoder = null;
var sortCol;
var bAscending = true;
var highLightMarker;
var arrSortedTrips = [];
var nCurrentPageNum = 1;
var highlightedItem;
var timerLonelyCallback = 0;
var gOpenSocial = [];
var iternaryMarkers = [];
var dragObject = null;
var mouseOffset = null;
var dropTargets = [];
var gWhoAllWorking = [];
var gFetchedData = [];

/**
 * Base path for all images and raw code files.
 * @const
 */
var FILE_SERVER = 'http://gulliver.googlecode.com/svn/trunk/frontend';

/** @const */
var BASE_URL = 'http://travel-gadget1.appspot.com';
/** @const */
var EXPORT_SERVER = 'http://travel-gadget1.appspot.com/exportAllTripItems';
/** @const */
var MAX_EMAILS = 5;
/** @const */
var MAX_TRIP_DURATION = 60;
/** @const */
var DEFAULT_ZOOM_LEVEL = 12;
/** @const */
var MAX_ITEM = 20;
/** @const */
var MAX_SHOWN_TRIPS = 20;
/** @const */
var DEFAULT_DURATION = 7;
/** @const */
var DEFAULT_RATING = 3;
/** @const */
var MAX_RATING = 5;
/** @const */
var STAR_OFF_IMG = 'http://www.google.com/images/syt-star-off.gif';
/** @const */
var STAR_ON_IMG = 'http://www.google.com/images/syt-star-on.gif';
/** @const */
var MAX_STRING_LENGTH = 40;
/** @const */
var MAX_DESC_LENGTH = 35;
/** @const */
var MAX_TRIPITEM_NAME = 25;

/** @const */
var UP_ARROW_IMG = '<img width="7" height="6" ' +
    'src="' + FILE_SERVER + '/images/up_arrow.gif" ' +
    'style="margin-top:5px;"/>';

/** @const */
var DOWN_ARROW_IMG = '<img width="7" height="6" ' +
    'src="' + FILE_SERVER + '/images/down_arrow.gif" ' +
    'style="margin-top:5px;"/>';

/** @const */
var LOADING_TPL = '<div id="loadingSection" class="loading"><img src="' +
    'http://www.google.com/ig/images/spinner.gif"/>&nbsp;' +
    prefs.getMsg('loading') + '</div>';

/** @const */
var SEARCH_URL_TPL = 'http://www.google.com/local?q=%KEYWORD%&near=%LOCATION%' +
    '&start=%PAGE_NUM%&num=20&output=kml';

/** Map icon */
var baseIcon = new GIcon(G_DEFAULT_ICON);

/**
 * Sets the shadow property of marker.
 */
baseIcon.shadow = 'http://www.google.com/mapfiles/shadow50.png';

/**
 * Sets the size of icon.
 */
baseIcon.iconSize = new GSize(20, 34);

/**
 * Sets the size of shadow.
 */
baseIcon.shadowSize = new GSize(37, 34);

/**
 * Sets the anchor property of marker.
 */
baseIcon.iconAnchor = new GPoint(9, 34);

/**
 * Sets the info window point for marker.
 */
baseIcon.infoWindowAnchor = new GPoint(9, 2);


/**
 * Sets the variable if container is iGoogle.
 */
var isIGoogle = _unesc(_args()['synd']);

/**
 * Enum for column of trips for sorting.
 * @enum {number}.
 */
var enTripCol = {
  NAME: 0, DATE: 1, LOCATION: 2, OWNER: 3, RATING: 4
};

/**
 * Enum for transaction with database.
 * @enum {number}.
 */
var enDBTransaction = {
  SUCCESS: 0, ERROR: 1
};

/**
 * @fileoverview File containing all templates of Gulliver Gadget.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/** @const */
var TAB_HEADER_TPL = '<table width="100%" border="0" cellspacing="0" ' +
    'cellpadding="0"><tr><td width="80%" style="font-weight:bold;' +
    'font-size:12px;" valign="top">' + prefs.getMsg('search_item') + '&nbsp;' +
    '<input onblur="if(this.value==\'\') this.className=\'google-search\'" ' +
    'onfocus="this.className=\'\'" type="text" class="google-search" value=""' +
    ' id="search-box" style="width:35%;border: 1px solid #7e9db9;"/>&nbsp;' +
    '<input type="button" onclick="searchMapContent(1, null, false)" value="' +
    prefs.getMsg('search') +
    '" style="width:65px;"><br><span class="egText"><nobr>' +
    prefs.getMsg('eg') +
    '<b>:</b> <a href="javascript:searchPOI(\'eat\');">' + prefs.getMsg('eat') +
    '</a>, <a href="javascript:searchPOI(\'sleep\');">' + prefs.getMsg('sleep') +
    '</a>, <a href="javascript:searchPOI(\'see\');">' + prefs.getMsg('see') +
    '</a>, <a href="javascript:searchPOI(\'shop\');">' + prefs.getMsg('shop') +
    '</a>, <a href="javascript:searchPOI(\'do\');">' + prefs.getMsg('do') +
    '</a>, <a href="javascript:searchPOI(\'night\');">' +
    prefs.getMsg('night') + '</a></nobr></span></td><td align="right" ' +
    'width="20%" style="vertical-align: top;">' +
    '<input type="button" value="Sync trip updates" id="refreshUpdates" ' +
    'onclick="callbackTrips(true);"></td>' +
    '<td style="vertical-align: top;" align="right">' +
    '<a style="text-decoration:none" href="http://maps.google.com/"' +
    ' target="__blank" id="exportLink" ><input type="button" ' +
    'value="Export trip" id="query_button"></a></td>' +
    '</tr></table>';

/** @const */
var TAB_HEADER_TPL_NPL = '<table width="100%" border="0" cellspacing="0" ' +
    'cellpadding="0"><tr><td width="80%" style="font-weight:bold;' +
    'font-size:12px;" valign="top">' + prefs.getMsg('search_item') +
    '&nbsp;<input ' +
    'onblur="if(this.value==\'\') this.className=\'google-search\'" ' +
    'onfocus="this.className=\'\'" type="text" class="google-search" value=""' +
    ' id="search-box" style="width:35%;border: 1px solid #7e9db9;"/>&nbsp;' +
    '<input type="button" onclick="searchMapContent(1, null, false)" ' +
    'value="' + prefs.getMsg('search') + '" style="width:65px;"><br>' +
    '</td><td align="right" width="20%" style="vertical-align:top;">' +
    '<input type="button" value="Sync trip updates" id="refreshUpdates" ' +
    'onclick="callbackTrips(true);"></td>' +
    '<td style="vertical-align: top;" align="right">' +
    '<a style="text-decoration:none" href="http://maps.google.com/"' +
    ' target="__blank" id="exportLink" ><input type="button" ' +
    'value="Export trip" id="query_button"></a></td>' +
    '</tr></table>';

/** @const */
var ADD_TO_TRIP_TPL = '<div id="resultPopup%INDEX%" ' +
    'style="display:none;width:100%;"></div><div id="resultItem%INDEX%" ' +
    'style="padding-bottom:3px;cursor:move;"><table cellspacing="2" ' +
    'cellpadding="1" width="100%" border="0" style="font-size:12px;"><tr>' +
    '<td rowspan="2" valign="top" width="5%"><img src="' +
    'http://www.google.com/mapfiles/marker%ICON%.png" ' +
    'onmouseover="addHighLightmarker(this,%INDEX%);" ' +
    'onmouseout="removeHighLightMarker(this,%INDEX%);"></td>' +
    '<td valign="top" width="70%">' +
    '<span class="itemTitle" id="itemTitle%INDEX%" ' +
    'onclick="showPopup(%INDEX%,true);">%ITEM_NAME%</span></td>' +
    '<td align="right" valign="top" width="25%">-<span class="link" ' +
    'style="color:#00c;"' +
    'onclick="addItem(\'resultItem%INDEX%\');">' + prefs.getMsg('addtotrip') +
    '</span></td></tr><tr><td colspan="2" width="100%">%CONTACT_INFO%<span ' +
    'style="text-align:right;padding-left:10px;">%WEB_URL%</span></td></tr>' +
    '</table></div>';

var ITEM_INFO_DRAG_TPL = '<table cellspacing="0" ' +
   'cellpadding="0" border="0" style="font-size:12px;padding-bottom:4px;' +
   'width:265px; border-bottom:1px solid #d3e6d2">' +
   '<tr><td width="30%" class="link" align="left" ' +
   'id="link-info" style="padding-left: 4px;display:%DISPLAY%">%IMAGE%</td>' +
   '<td width="70%"><div><table width="100%" cellpadding="0" cellspacing="0">' +
   '<tr><td width="1%" style="cursor:pointer;" align="left" ' +
   'onclick="addItem(\'resultItem%INDEX%\');">%DRAG_IMG%' +
   '</td><td align="left"><table><tr><td align="right">%CLOSE_IMG%' +
   '</td></tr><tr><td class="egText" style="color:#00f;margin-left:0;" ' +
   'valign="bottom" align="left">' +
   '<a href="#" onclick="addItem(\'resultItem%INDEX%\');">' +
   '<nobr>%DRAG_MSG% </nobr></a></td></tr></table></td></tr></table></div>' +
   '<span class="itemTitle" onclick="javascript:closeInfoWindow();" ' +
   'style="text-decoration:none;color:#000; font-weight:bold;">' +
   '%TITLE%</span><br/>%CONTACT_INFO%' +
   '&nbsp;&nbsp;<span id="web-link" style="text-align:right;padding-left:0;' +
   'text-decoration:none;">%WEB_URL%</span></td></tr>' +
   '</table>' +
   '<div id="reviews-container" ' +
   'style="overflow-y:auto; overflow-x:hidden;height:%HEIGHT%;' +
   'padding-top:1px; width:340px;">' +
   '<table cellpadding="2"  cellspacing="1" border="0" ' +
   'style="font-size:12px;"><tr>' +
   '<td style="font-size:13px;font-weight:bold;color:#000;">' +
   '%REVIEWS_LABEL%</td></tr><tr><td><div>%REVIEWS%</div></td></tr></table>' +
   '</div>';

var ITEM_INFO_TPL = '<table cellspacing="1" ' +
    'cellpadding="2" border="0" style="font-size:12px;padding-bottom:2px;">' +
    '<tr><td rowspan="3" valign="top" width="5%"><span style="' +
    'padding-left:2px;padding-top:2px;"><img src="' +
    'http://www.google.com/mapfiles/marker%MARKER%.png"/></span></td><td ' +
    'width="*"><div class="itemTitle" onmousedown="closeInfoWindow(true);" ' +
    'style="text-decoration:none;color:#00f;">%TITLE%</div>' +
    '</td><td width="62px" align="right" valign="top" id="link-cell">' +
    '<span id="linkonPopup" class="link" ' +
    'onclick="addItem(\'resultItem%INDEX%\');">' + prefs.getMsg('addtotrip') +
    '&nbsp;</span></td><td width="5%" valign="top" align="right">' +
    '<span class="link" onmousedown="closeInfoWindow(true);">' +
    '<img src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'border="0"></span></td></tr>' +
    '<tr><td colspan="2">' +
    '%CONTACT_INFO%<span id="weblink" style="text-align:right;' +
    'padding-left:10px;">%WEB_URL%</span></td><td></td></tr><tr %NOURL%>' +
    '<td class="link" align="left" colspan="2" id="linkInfo" ' +
    'style="display:%DISPLAY%">%IMAGE%' +
    '<a href="%OVERVIEW_URL%" target="_blank">' + prefs.getMsg('overview') +
    '</a><br><a href="%DETAIL_URL%" target="_blank">' + prefs.getMsg('detail') +
    '</a><br><a href="%REVIEWS_URL%" target="_blank">' +
    prefs.getMsg('review') + '</a><br>' +
    '<a href="%PHOTOS_URL%" target="_blank">' + prefs.getMsg('photo-video') +
    '</a></td><td></td></tr></table>' +
    '<table width="100%" cellpadding="0" cellspacing="0"' +
    ' style="border-top:1px solid #f5eee6;" ' +
    '<tr><td><span style="font-size:11px;padding-left:10px;font-weight:bold">' +
    '<nobr>Item added by</nobr><span style="padding-left:4px;' +
    'color:#993300;">%OWNER_NAME%</span></span>' +
    '</span> </td></tr>' +
    '<tr><td style="padding-left:10px;"><span id="thumbItem">' +
    '<span style="font-size:10px;">' +
    '<nobr><b><span id="sitem_thum_up">%THUMB_UP%' +
    '</span></b> thumbs up, ' +
    '<b><span id="sitem_thum_down">%THUMB_DOWN%</span></b>' +
    ' thumbs down</nobr>' +
    '<span id="itemVoteNow" style="padding-left:5px;">' +
    '<a href="#" onmousedown="javascript:addVotePopUP(%INDEX%);">' +
    'Vote Now</a></span></span></span></td></tr></table>';

/** @const */
var SCHEDULED_ITEM_TPL = '<div id="drag-%DRAG_ITEM_COUNTER%">' +
    '<div id="itemPopup%INDEX%"></div>' +
    '<div id="scheduledRow%INDEX%" style="width:100%;padding-bottom:5px;">' +
    '<table cellspacing="0" cellpadding="0" border="0" style="width:100%;">' +
    '<tr><td style="width:30px;"></td><td style="' +
    'width:70%;"><span class="itemTitle" id="scheduledItemTitle%INDEX%" ' +
    'onmousedown="showPopup(%INDEX%,false);return false;" title="%TITLE%">' +
    '%NAME%</span></td><td align="right" valign="top"><img src="' +
    FILE_SERVER + '/images/thumbsup.png" onmousedown="' +
    'addVotePopUP(%INDEX%)" style="cursor:pointer;' +
    'padding-right:5px;" title="' + prefs.getMsg('your_vote') + '" />' +
    '<img title="' + prefs.getMsg('edit_item') + '" ' +
    'src="' + FILE_SERVER + '/images/editIcon.gif" onmousedown="' +
    'editItemDialog(%INDEX%,true);" style="cursor:pointer;" /></td></tr>' +
    '<tr><td style="width:30px;"></td><td colspan="2" ' +
    'style="font-size:12px;">%CONTACT_INFO%</td></tr></table></div></div>';

/** @const */
var UNSCHEDULED_ITEM_TPL = '<div id="drag-%DRAG_ITEM_COUNTER%">' +
    '<div id="itemPopup%INDEX%"></div>' +
    '<div id="unscheduledRow%INDEX%" style="width:100%;padding-bottom:5px;">' +
    '<table cellspacing="0" cellpadding="0" border="0" style="width:100%;">' +
    '<tr><td style="width:30px;"></td><td style="width:70%;">' +
    '<span class="itemTitle" title="%TITLE%" id="unscheduledItem%INDEX%" ' +
    'onmousedown="showPopup(%INDEX%,false);return false;">%NAME%</span></td>' +
    '<td align="right" valign="top"><img src="' +
    FILE_SERVER + '/images/thumbsup.png" onmousedown="' +
    'addVotePopUP(%INDEX%)" style="cursor:pointer;padding-right:5px;' +
    '" title="' + prefs.getMsg('your_vote') + '"/><img title="' +
    prefs.getMsg('edit_item') + '" style="cursor:pointer;" src="' +
    FILE_SERVER + '/images/editIcon.gif" onmousedown="' +
    'editItemDialog(%INDEX%,false);"></td></tr><tr>' +
    '<td style="width:30px;"></td><td colspan="3" style="font-size:12px;">' +
    '%CONTACT_INFO%</td></tr></table></div></div>';

/** @const */
var SCHEDULED_ITEM_TPL_NPL = '<div id="drag-%DRAG_ITEM_COUNTER%">' +
    '<div id="itemPopup%INDEX%"></div>' +
    '<div id="scheduledRow%INDEX%" style="width:100%;padding-bottom:5px;">' +
    '<table cellspacing="0" cellpadding="0" border="0" style="width:100%;">' +
    '<tr><td style="width:30px;"></td><td style="' +
    'width:70%;"><span class="itemTitle" id="scheduledItemTitle%INDEX%" ' +
    'onmousedown="showPopup(%INDEX%,false);return false;" title="%TITLE%">' +
    '%NAME%</span></td><td align="right" valign="top">' +
    '<img title="' + prefs.getMsg('edit_item') + '" ' +
    'src="' + FILE_SERVER + '/images/editIcon.gif" onmousedown="' +
    'editItemDialog(%INDEX%,true);" style="cursor:pointer;" /></td></tr>' +
    '<tr><td style="width:30px;"></td><td colspan="2" ' +
    'style="font-size:12px;">%CONTACT_INFO%</td></tr></table></div></div>';

/** @const */
var UNSCHEDULED_ITEM_TPL_NPL = '<div id="drag-%DRAG_ITEM_COUNTER%">' +
    '<div id="itemPopup%INDEX%"></div>' +
    '<div id="unscheduledRow%INDEX%" style="width:100%;padding-bottom:5px;">' +
    '<table cellspacing="0" cellpadding="0" border="0" style="width:100%;">' +
    '<tr><td style="width:30px;"></td><td style="width:70%;">' +
    '<span class="itemTitle" title="%TITLE%" id="unscheduledItem%INDEX%" ' +
    'onmousedown="showPopup(%INDEX%,false);return false;">%NAME%</span></td>' +
    '<td align="right" valign="top"><img  title="' + prefs.getMsg('edit_item')
    '" style="cursor:pointer;" ' +
    'src="' + FILE_SERVER + '/images/editIcon.gif" onmousedown="' +
    'editItemDialog(%INDEX%,false);"></td></tr><tr>' +
    '<td style="width:30px;"></td><td colspan="3" style="font-size:12px;">' +
    '%CONTACT_INFO%</td></tr></table></div></div>';

/** @const */
var CALENDAR_TPL =
    '<div id="maindialog"><div class="title" valign="middle">' +
    prefs.getMsg('add_item') + '</div><div style="padding:2px 0pt 0pt 4px;' +
    'visibility:visible;display:block;z-index:10000;"></div>' +
    '<div id="datepicker1" class="dpDiv" ' +
    'style="visibility:hidden;"></div><input name="ADate" style="' +
    'visibility:hidden;width:1px;height:1px;">' +
    '<div id="wrngmsg" style="visibility:hidden;"></div>' +
    '<div style="padding-left:5px;color:#000;font-size:12px;' +
    'position:absolute;top:210px;"><b>%ITEM_NAME%</b></div>' +
    '<div style="top:225px;font-size:11px;position:absolute;' +
    'color:#000;"><input type="radio" id="dateradio" ' +
    'name="group1" onclick="selectAsScheduled();">' + prefs.getMsg('on') +
    '&nbsp;<span id="selecteddate"></span><br><input ' +
    'type="radio" name="group1" onclick="selectAsUnscheduled();" checked>' +
    prefs.getMsg('as_unscheduled') + '<br><div style="padding-top:3px;"><span ' +
    'align="right" float="left" style="padding-left:2px;"><input' +
    ' type="button" style="width:60px;" onclick="javascript:' +
    'hideDialogView();" id="cancelButton" value="' + prefs.getMsg('cancel') +
    '"></span><span align="right" style="padding-left:28px;">' +
    '<input onclick="javascript:addItemDate();hideDialog();" ' +
    'style="width:60px;" type="button" value="' + prefs.getMsg('add_days') +
    '"></span></div></div></div>';

/** @const */
var TRIP_DAYS_DIALOG_TPL =
    '<div id="unscheduleItem_dlg"><div class="title-addItem" valign="middle" ' +
    '><div style="float:left;">' +
    prefs.getMsg('add_item') + '</div><div style="float:right;"><img ' +
    'style="width:15px;cursor:pointer;padding-left:1px;" ' +
    'src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'onclick="javascript:hideDialogView();"></div></div><div ' +
    'style="color:#666;padding-left:5px;" class="hint">' +
    '<span style="color:#f00;">' + prefs.getMsg('tip') +
    '</span> ' + prefs.getMsg('drag_tip') + '</div>' +
    '<div style="padding-left:5px;color:#000;' +
    'padding-top: 4px;padding-bottom:4px;"><b>%ITEM_NAME%</b></div>' +
    '<div><table border="0" cellpadding="0" cellspacing="0" ' +
    'style="font-size:11px;color:#000;"><tr><td colspan="2">' +
    '<span style="float:left;margin-top:2px;">' +
    '<input type="radio" id="dateradio" name="group" ' +
    'onclick="enableDays();"></span>&nbsp;<span>' +
    prefs.getMsg('as_scheduled') + '</span><span align="center" style="' +
    'padding-left:20px;color:#000;font-size:13px;">' +
    '<span id="daysoption"></span></span></td></tr><tr><td width="1px">' +
    '<span style="float:left;' +
    'margin-top:2px;"><input type="radio" name="group" id="unsched" ' +
    'onclick="disableDays();" checked></span></td>' +
    '<td style="padding-top:4px;padding-left:3px"><span>' +
    prefs.getMsg('as_unscheduled') + '</span></td></tr></table>' +
    '</div><div style="padding-top:8px;"><span style="padding-left:2px;' +
    'float:left;"><input type="button" style="width:60px;" ' +
    'onclick="javascript:hideDialogView();" id="cancelButton" value="' +
    prefs.getMsg('cancel') + '"></span><span style="float:right;"><input ' +
    'onclick="javascript:addItemDate();hideDialog();" style="width:60px;" ' +
    'type="button" value="' + prefs.getMsg('add_days') +
    '"></span></div></div>';

/** @const */
var SEND_MAIL_DIALOG_TPL = '<div id="viewedititemdialogbox">' +
    '<div id="sendMailBox" class="title_viewDatesDialog" valign="middle">' +
    '<table class="dialog-title-send" width="100%"><tr><td align="left">' +
    prefs.getMsg('send_mail') + '</td><td align="right">' +
    '<span class="link" onclick="javascript:hideViewDateDialogBox();">' +
    '<img border="0" style="width:15px;padding-left:1px;"' +
    'src="' + FILE_SERVER + '/images/close_promo.gif"/></span>' +
    '</td></tr></table></div><table style="width:380px;" class="tabledata" ' +
    'cellspacing="4" cellpadding="0" height="85%"><tr><td align="left" ' +
    'width="25%" style="font-family:arial;color:#666;padding-left:1px;">' +
    prefs.getMsg('to') + '<span style="color:#ff0000">*</span> : </td>' +
    '<td colspan="2"><input value="" name="emailId" id="emailId" type="text" ' +
    'style="width:99%;font-family:arial,sans-serif;font-size:12px;"></td>' +
    '</tr><tr><td align="left" width="25%" ' +
    'valign="top" style="font-family:arial;color:#666;' +
    'padding-left:1px;">' + prefs.getMsg('item_desc') + ' : ' +
    '</td><td colspan="2"><textarea id="mailDescp"' +
    'style="width:99%;font-family:arial,sans-serif;font-size:12px;" ' +
    'rows="5" cols="38"></textarea></td></tr>' +
    '<tr><td align="left" style="padding-left:1px;">' +
    '<input type="button" id="cancelButton" ' +
    'onclick="javascript:hideViewDateDialogBox();" value="' +
    prefs.getMsg('cancel') + '"></td><td align="center"><div id="mailErr" ' +
    'class="err" style="display:none;"></div></td><td align="right">' +
    '<input type="button" style="width:36px;" value="' +
    prefs.getMsg('ok') +
    '" onclick="JGulliverData.getCurrentTrip().sendMail();">' +
    '</td></tr></table></div>';

/** @const */
var LOCATION_DIALOG_TPL = '<div class="change-loc-dlg">' +
    '<div class="dialog-title"><div style="padding-left:2px;float:left;">' +
    prefs.getMsg('changelocation') + '</div><div style="float:right;">' +
    '<img src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'onclick="javascript:hideDialog();" border="0" ' +
    'style="width:15px;cursor:pointer;margin-left:3px;padding-left:1px;" />' +
    '</div></div>' +
    '<table cellspacing="1" border="0" cellpadding="1" width="100%">' +
    '<tr><td colspan="2" ' +
    'style="padding-left:5px;"><font class="heading">' +
    prefs.getMsg('where_visit') +
    '</font></td></tr><tr><td style="padding-left:5px;">' +
    '<input type="text" id="txtLocation" width="70%" class="txtBox" ' +
    'value="%LOCATION%" /><font class="hint" style="color:#666;">' +
    prefs.getMsg('egLocation') + '</font></td></tr><tr><td colspan="2">' +
    '<div id="wrngmsg" style="visibility:hidden;" ' +
    'align="center">' + prefs.getMsg('invalid_location') + '</div></td></tr>' +
    '<tr><td align="left"><input type="button" name="" ' +
    'onclick="javascript:hideViewDateDialogBox();" id="cancelButton" ' +
    'value="' + prefs.getMsg('cancel') +
    '"></td><td align="right"><input type="button" ' +
    'style="width:36px;align:right;" name="" value="' + prefs.getMsg('ok') +
    '" onclick="changeTripLocation();"></td></tr></table></div>';

/** @const */
var EDIT_ITEM_DIALOG_TPL = '<div id="viewedititemdialogbox">' +
    '<div id="editItemDialogBox" class="title_viewDatesDialog" ' +
    'valign="middle"><table class="dialog-title" ' +
    'width="100%" style="padding:2px 3px 2px 0;"><tr><td align="left">' +
    prefs.getMsg('edit_item') + '</td><td align="right">' +
    '<span class="link" onclick="javascript:hideViewDateDialogBox();">' +
    '<img border="0" style="width:15px;padding-left:1px;"' +
    'src="' + FILE_SERVER + '/images/close_promo.gif"/></span>' +
    '</td></tr></table></div><table class="tabledata" ' +
    'cellspacing="4" cellpadding="0" width="395px"><tr><td style="' +
    'color:#666;font-size:13px;">' + prefs.getMsg('item_name') +
    '<span style="color:#ff0000">*</span> : </td><td>' +
    '<textarea style="height:22px; width:305px;font-size:12px;' +
    'font-family:arial,san-serif;" rows="1" cols="35"' +
    ' id="itemName" maxlength="45">%ITEM_NAME%</textarea></td></tr>' +
    '<tr><td style="color:#666;font-size:13px;" valign="top">' +
    prefs.getMsg('item_addr') +
    '<span style="color:#f00">*</span> : </td><td>' +
    '<textarea %READONLY% ; style="width:305px;font-size:12px;' +
    'font-family:arial,san-serif" ' +
    'rows="3" cols="35" id="itemDesp">%DESCRIPTION%</textarea></td></tr>' +
    '<tr><td></td><td align="left" ><table cellpadding="0"' +
    'style="font-size:12px;font-family: arial,sans-serif;"><tr>' +
    '<td><input type="radio" name="unscheduleCheck" ' +
    'onclick="unscheduleRadioButton();" id="unscheduleCheck">' +
    prefs.getMsg('unsch') +
    '</td><td><input type="radio" name="daysCheck" id="daysCheck" ' +
    'onclick="daysRadioButton();">' + prefs.getMsg('day') +
    ':&nbsp;<SELECT NAME="daysSelect"' +
    'id="daysSelect">%DAYSOPTION%</SELECT></td></tr><tr><td><button onclick="' +
    'createDeleteItemBox(%INDEX%,true)" style="width:129px;padding-left:0;">' +
    '<img src="' + FILE_SERVER + '/images/trash.gif" ' +
    'width="13" height="13"/>&nbsp;' + prefs.getMsg('delete_this_item') +
    '</button></td></tr><tr><td colspan="2">' +
    '<div id="wrngmsg" style="display:hidden;"></div></td></tr></table>' +
    '</td></tr><tr><td align="left"><input type="button" name="" ' +
    'onclick="javascript:hideViewDateDialogBox();" id="cancelButton" ' +
    'value="' + prefs.getMsg('cancel') + '"></td><td align="right">' +
    '<input type="button" value="' + prefs.getMsg('save') +
    '" onClick="saveEditItem(%INDEX%);"></td></tr></table></div>';

/** @const */
var DATE_DIALOG_TPL = '<div id="viewdatedialogbox">' +
    '<div class="dialog-title" style="padding-left:1px;">' +
    '<div style="float:left;">' +
    prefs.getMsg('setthedates_msg') + '</div><div style="float:right;">' +
    '<img style="width:15px;cursor:pointer;padding-left:1px;" ' +
    'src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'onclick="hideViewDateDialogBox();"/></div></div>' +
    '<table class="tabledata" width="100%" cellspacing="2" cellpadding="2">' +
    '<tr><td colspan="2" width="100%">' + prefs.getMsg('no_of_days') +
    '&nbsp;<input maxlength="3" onkeyup="onUpdateDuration(this);" ' +
    'id="editDaysBox" type="text" size="3" value="%DURATION%" ' +
    'style="width:35px;height:19px;"></td></tr><tr><td width="50%">' +
    'Start Date: <input type="text" id="startDate" name="startdate" value="' +
    '%START_DATE%" style="width:75px;height:20px;" readonly><img name="' +
    'calenderimg1" src="' + FILE_SERVER + '/images/calender.png" ' +
    'onclick="displayDatePicker(\'startdate\'\,\'calenderimg1\',1);" ' +
    'width="19" height="19" align="top"></img></td><td width="50%">' +
    prefs.getMsg('end_date') +
    '<input type="text" id="endDate" name="enddate" ' +
    'value="%END_DATE%" style="width:75px;height:20px;" readonly>' +
    '<img name="calenderimg1" ' +
    'src="' + FILE_SERVER + '/images/calender.png" align="top" ' +
    'width="19" height="19" ' +
    'onclick="displayDatePicker(\'enddate\'\,\'calenderimg2\',1);"></img>' +
    '</td></tr><tr><td colspan="2" align="center"><input type="button" ' +
    'value="' + prefs.getMsg('clear_start_end_dates') +
    '" onclick="javascript:clearDate();" ' +
    'style="width:186px;"></td></tr><tr><td colspan="2">' +
    '<div id="wrngmsg" style="visibility:hidden;" ' +
    'align="center">' + prefs.getMsg('invalid_duration') + '</div></td>' +
    '</tr><tr><td align="left"><input type="button" id="cancelButton" ' +
    'onclick="javascript:hideViewDateDialogBox();" ' +
    'value="' + prefs.getMsg('cancel') + '"></td><td align="right">' +
    '<input style="width:36px;" type="button" value="' + prefs.getMsg('ok') +
    '" onclick="saveTripDates();"></td></tr></table></div>';

/** @const */
var CUSTOM_ITEM_DIALOG_TPL = '<div id="create-new-item" >' +
    '<div class="dialog-title"><div style="float:left;">' +
    prefs.getMsg('create_item') +
    '</div><div style="float:right;"><img border="0" ' +
    'src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'style="width:15px;cursor:pointer;padding-left:1px;" ' +
    'onclick="javascript:hideViewDateDialogBox();"/></div></div>' +
    '<div><table class="tableCreateItemDialog" width="100%"><tr>' +
    '<td width="25%" valign="top" style="color:#666;">' +
    prefs.getMsg('item_name') + '<span style="color:#ff0000">*</span> : </td>' +
    '<td valign="top"><input type="text" name="itemName" style="width:99%;" ' +
    'id="itemName" maxlength="64"></td></tr><tr><td width="25%" ' +
    'valign="top" style="color:#666;">' + prefs.getMsg('item_addr') +
    '<span style="color:#ff0000">*</span> : </td><td valign="top">' +
    '<textarea name="description" style="width:99%;" rows="3" ' +
    'id="itemDescription"></textarea></td></tr><tr><td width="20%"/><td>' +
    '<div id="wrngmsg" style="visibility:hidden;" ' +
    'align="center"></div></td></tr><tr>' +
    '<td width="20%"></td><td valign="top"><input onclick="disableDays();" ' +
    'type="radio" name="group1" checked>' +
    prefs.getMsg('unsch') + '</td></tr><tr>' +
    '<td width="20%"></td><td valign="top"><input onclick="enableDays();" ' +
    'type="radio" name="group1" id="dateradio">%DATE_HTML%</td>' +
    '</tr><tr><td colspan="2"></td></tr><tr><td align="left">' +
    '<input id="cancelButton" type="button" value="' + prefs.getMsg('cancel') +
    '" onclick="javascript:hideViewDateDialogBox();"></td>' +
    '<td align="right"><input type="button" value="' + prefs.getMsg('save') +
    '" onclick="javascript:saveNewItem();hideDialog();">' +
    '</td></tr></table></div></div>';

/** @const */
var DELETE_ITEM_DIALOG_TPL = '<div id="delete_item" class="delete_item" ' +
    'style="height:100%;"><table ' +
    'width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td ' +
    'class="dialog-title" align="left">' + prefs.getMsg('delete_item') +
    '&nbsp;-&nbsp;%ITEM_NAME%</td></tr><tr><td valign="middle" ' +
    'height="60px" class="tableCreateItemDialog" align="center">' +
    prefs.getMsg('delete_item_confirm') + '</td></tr><tr><td width="100%">' +
    '<input type="button" style="width:40px;float:right;margin-right:5px;" ' +
    'onclick="deleteSelectedItem(%INDEX%);" value="' + prefs.getMsg('yes') +
    '">&nbsp;<input type="button" value="' + prefs.getMsg('no') +
    '" id="cancelButton" ' +
    'onclick="hideDialog();" style="width:40px;"></td></tr></table>';

/** @const */
var DELETE_TRIP_DIALOG_TPL = '<div id="delete_trip" class="delete_item" ' +
    'style="height:100%;"><table ' +
    'width="100%" cellpadding="0" cellspacing="0" border="0">' +
    '<tr class="dialog-title" style="height: 20px;vertical-align:top;">' +
    '<td align="left" style="padding-left:2px;">' +
    prefs.getMsg('delete_trip') + '&nbsp;-&nbsp;%TRIP_NAME%</td>' +
    '<td align="right">' +
    '<img src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'onclick="javascript:hideDialog();" border="0" ' +
    'style="width:15px;cursor:pointer;padding-left:1px;" /></td></tr><tr>' +
    '<td valign="middle" colspan="2" height="60px" ' +
    'class="tableCreateItemDialog" align="center">' +
    prefs.getMsg('delete_trip_confirm') + '</td></tr><tr><td align="left" ' +
    'style="padding-right:2px;padding-left:2px;">' +
    '<input id="cancelButton" type="button" ' +
    'value="' + prefs.getMsg('no') + '" onclick="hideDialog();" ' +
    'style="width:40px;"></td><td align="right" ' +
    'style="padding-right:2px;"><input type="button" style="width:40px;" ' +
    'onclick="JGulliverData.getInstance().deleteTrip();" value="' +
    prefs.getMsg('yes') + '"></td></tr></table>';

/** @const */
var ACTION_MSG_TPL = '<span style="font-weight:bold;position:' +
    'relative;top:3px"> %MESSAGE%&nbsp;<a href="javascript:void(0);" ' +
    'style="text-decoration:none;"</span>';

/** @const */
var CREATE_TRIP_DIALOG_TPL = '<div id="create-trip" ' +
    'class="create-new-item"><div class="dialog-title" style="' +
    'width:307px;">' + prefs.getMsg('createTrip') +
    '</div><div><table border="0" width="307px"><tr>' +
    '<td width="100%"><font class="heading">' + prefs.getMsg('where_visit') +
    '</font></td></tr><tr><td width="100%"><input ' +
    'type="text" id="create-location" name="create-location" class="txtBox"/>' +
    '<font class="hint" style="color:#666;">' + prefs.getMsg('egLocation') +
    '</font></td></tr><tr><td width="100%">' +
    '<div id="server_msg" class="server_msg"></div></td>' +
    '</tr><tr><td valign="top" align="right" width="100%"><input ' +
    'type="button" value="' + prefs.getMsg('create') +
    '" onClick="validateTrip();"/>&nbsp;' +
    '<input id="cancel" type="button" value="' + prefs.getMsg('cancel') +
    '" onclick="cancelCreateTrip();" style="width:60px;"></td></tr></table>' +
    '</div>';

/** @const */
var EDIT_TRIP_NAME_DIALOG_TPL = '<div id="edit-trip-name"><table ' +
    'width="100%;" cellpadding="0" cellspacing="0" border="0">' +
    '<tr class="dialog-title" style="height:25px;">' +
    '<td align="left" style="padding-left: 2px;">' +
    prefs.getMsg('edit_trip_name') + '</td><td align="right"><img border="0" ' +
    'style="margin-right:4px;width:15px;cursor:pointer;padding-left:1px;" ' +
    'src="' + FILE_SERVER + '/images/close_promo.gif" ' +
    'onclick="javascript:hideDialog();"></img></td></tr><tr>' +
    '<td valign="middle" height="60px" class="tableCreateItemDialog" ' +
    'align="center" colspan="2">' + prefs.getMsg('trip_name') +
    ':&nbsp;<input type="text" ' +
    'maxlength="64" value="%TRIP_NAME%" id="tripNameEdit"></td>' +
    '</tr><tr><td align="left" style="padding:0 2px 0 2px;">' +
    '<input id="cancelButton" type="button" value="' +
    prefs.getMsg('cancel') +
    '" onclick="hideDialog();" style="width:60px;"></td><td align="right" ' +
    'style="padding-right:2px;"><input type="button" style="width:36px;" ' +
    'onclick="javascript:updateTripName();" value="' + prefs.getMsg('ok') +
    '"></td></tr></table></div>';

/**
 * @fileoverview Library of all utility methods for canvas view.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * This methods takes HTML as input and removes all data inside < and > tags.
 * @param {htmlString} htmlString as string.
 * @return {string} htmlString with no html tags.
 */
function stripHtml(htmlString) {
  return htmlString.replace(/<\/?[^>]+(>|$)/g, '');
}

/**
 * Converts the string response into DOM object.
 * @param {Object} data Response as string.
 * @return {Object} DOM object.
 */
function domParser(data) {
  var xmlDoc;
  if (window.ActiveXObject) {
    xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
    xmlDoc.loadXML(data.text);
  } else {
    xmlDoc = new DOMParser().parseFromString(data.text, 'text/xml');
  }
  return xmlDoc;
}

/**
 * Trim spaces from both side of string.
 * @return {string} Replaced string.
 */
String.prototype.strip = function() {
  return this.replace(/^\s+/, '').replace(/\s+$/, '');
};

/**
 * Checks whether value is empty.
 * @param {string} value Value to be checked.
 * @return {boolean} Returns true if empty, else false.
 */
function isEmpty(value) {
  return (!value || value == null || value == undefined ||
          value == 'None' || value == prefs.getMsg('unspecified'));
}

/**
 * Check if passed character is numeric.
 * @param {string} strValue The string to be validated.
 * @return {boolean} True if numeric else false.
 */
function isNumeric(strValue) {
  var strInvalidChars = '0123456789';
  var strChar;
  var strValueLen = strValue.length;
  for (var i = 0; i < strValueLen; i++) {
    strChar = strValue.charAt(i);
    if (strInvalidChars.indexOf(strChar) != -1) {
      return true;
    }
  }
  return false;
}

/**
 * Validates email id.
 * @param {string} email Email id as string.
 * @return {boolean} True if email id list is valid.
 */
function validateEmailid(email) {
  var reg =
      /^(\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+(\ )*(\,)?(\;)?(\ )*)+$/;
  return reg.test(email);
}

/**
 * It formats the date in required format.
 * @param {string} strDate The date to be converted.
 * @param {string} format Date format.
 * @return {string} New date as string.
 */
function formatDate(strDate, format) {
  var strRetVal = '';
  var day, month, year;
  strDate = strDate.replace(/-/g, '/');
  var date = new Date(strDate);
  month = date.getMonth() + 1;
  if (month <= 9) {
    month = '0' + month;
  }
  day = date.getDate();
  year = date.getFullYear();
  if (day <= 9) {
    day = '0' + day;
  }
  if (format == '%m/%d/%Y') {
    strRetVal = month + '/' + day + '/' + date.getFullYear();
  } else if (format == '%m-%d-%Y') {
    strRetVal = month + '-' + day + '-' + date.getFullYear();
  } else if (format == '%M%d%Y') {
    strRetVal = monthArrayMed[parseInt(month, 10) - 1] +
                ' ' + day + ', ' + year;
  } else if (format == '%M%d') {
    strRetVal = monthArrayMed[parseInt(month, 10) - 1] +
                ' ' + day;
  } else if (format == '%MM%d') {
    strRetVal = monthArrayLong[parseInt(month, 10) - 1] +
                ' ' + day;
  } else if (format == '%MM%d%Y') {
    strRetVal = monthArrayLong[parseInt(month, 10) - 1] +
                ' ' + day + ', ' + year;
  }
  return strRetVal;
}

/**
 * Calcuates the difference between two dates.
 * @param {string} strDate1 first date as string.
 * @param {string} strDate2 second date as string.
 * @return {number} number of days.
 */
function getDateDiff(strDate1, strDate2) {
  strDate1 = strDate1.replace(/-/g, '/');
  strDate2 = strDate2.replace(/-/g, '/');
  var date1 = new Date(strDate1);
  var date2 = new Date(strDate2);
  var oneDay = 24 * 60 * 60 * 1000;
  var noOfDays = Math.ceil((date2.getTime() - date1.getTime()) / oneDay);
  return noOfDays;
}

/**
 * It adds the number of days in to a date.
 * @param {string} strDate date as string.
 * @param {number} days number of days.
 * @param {string} format Date format.
 * @return {string} new date as string.
 */
function addDaysToDate(strDate, days, format) {
  strDate = strDate.replace(/-/g, '/');
  var date = new Date(strDate);
  date.setDate(date.getDate() + days);
  if (format == '%m/%d/%Y') {
    var month;
    var tdate;
    if (date.getMonth() < 10) {
      month = '0' + (date.getMonth() + 1);
    } else {
      month = (date.getMonth() + 1).toString();
    }
    if (date.getDate() < 10) {
      tdate = '0' + date.getDate();
    } else {
      tdate = date.getDate().toString();
    }
    var dateInFormat = month + '/' + tdate + '/' + date.getFullYear();
    return dateInFormat;
  } else if ('%MM%d%W') {
    return (monthArrayLong[date.getMonth()] + ' ' +
            date.getDate() + ' (' + dayArrayLong[date.getDay()] + ')');
  } else {
    return date.toDateString();
  }
}

/**
 * Handler for sorting.
 * @param {object} Obj1 The first object of trip.
 * @param {object} Obj2 The second object of trip.
 * @return {num} Returns the code.
 */
function sortHandler(Obj1, Obj2) {
  var retVal;
  switch (sortCol) {
    case enTripCol.NAME:
      if (Obj1.name.toLowerCase() > Obj2.name.toLowerCase()) {
        retVal = 1;
      } else if (Obj1.name.toLowerCase() < Obj2.name.toLowerCase()) {
        retVal = -1;
      }
      break;
    case enTripCol.LOCATION:
      if (Obj1.loc.toLowerCase() > Obj2.loc.toLowerCase()) {
        retVal = 1;
      } else if (Obj1.loc.toLowerCase() < Obj2.loc.toLowerCase()) {
        retVal = -1;
      }
      break;
    case enTripCol.DATE:
      if (Obj1.sdate > Obj2.sdate) {
        retVal = 1;
      } else if (Obj1.sdate < Obj2.sdate) {
        retVal = -1;
      }
      break;
    case enTripCol.OWNER:
      if (Obj1.ownerName.toLowerCase() > Obj2.ownerName.toLowerCase()) {
        retVal = 1;
      } else if (Obj1.ownerName.toLowerCase() < Obj2.ownerName.toLowerCase()) {
        retVal = -1;
      }
      break;
    case enTripCol.RATING:
      if (Obj1.rating > Obj2.rating) {
        retVal = 1;
      } else if (Obj1.rating < Obj2.rating) {
        retVal = -1;
      }
      break;
    case enTripCol.DAY:
      if (Obj1.day > Obj2.day) {
        retVal = 1;
      } else if (Obj1.day < Obj2.day) {
        retVal = -1;
      }
      break;
  }
  if (retVal == 1) {
    return (bAscending) ? 1 : -1;
  } else if (retVal == -1) {
    return (bAscending) ? -1 : 1;
  } else {
    return 0;
  }
}

/**
 * Function to wrap long text.
 * @param {string} strText Text which needs to be wrapped.
 * @return {string} wrapped string.
 */
function wrapText(strText) {
  var resultString = [];
  while (strText.length > MAX_STRING_LENGTH) {
    resultString.push(strText.substr(0, MAX_STRING_LENGTH));
    resultString.push('<br>');
    strText = strText.substr(MAX_STRING_LENGTH);
  }
  resultString.push(strText);
  return resultString.join('');
}

/**
 * Validates the required fields.
 */
function validateTrip() {
  var createLocRef = _gel('create-location');
  if (createLocRef.value != '') {
    var tripLoc = _gel('create-location').value;
    var bInvalid = isNumeric(tripLoc);
    if (!bInvalid) {
      showAddress(tripLoc, 1);
    } else {
      createLocRef.value = '';
      createLocRef.focus();
      _gel('server_msg').style.display = 'block';
      _gel('server_msg').innerHTML = prefs.getMsg('numeric_err');
      _IG_AdjustIFrameHeight();
    }
  } else {
    createLocRef.focus();
  }
}

/**
 * @fileoverview Code to handle drag functionality.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

var iggd_a = false, iggd_ = null;
function _IG_DragPosition_left(a){
    var b = 0;
    if (a.offsetParent)
        for (; a.offsetParent;) {
            b += a.offsetLeft;
            a = a.offsetParent
        }
    else
        if (a.x)
            b = a.x;
    return b
}

function _IG_DragPosition_right(a){
    return _IG_DragPosition_left(a) + a.offsetWidth
}

function _IG_DragPosition_top(a){
    var b = 0;
    if (a.offsetParent)
        for (; a.offsetParent;) {
            b += a.offsetTop;
            a = a.offsetParent
        }
    else
        if (a.y)
            b = a.y;
    return b
}

function _IG_DragPosition_bottom(a){
    return _IG_DragPosition_top(a) + a.offsetHeight
}

function _IG_Drag(){
    this.surrogateOffsetY = this.surrogateOffsetX = 1;
    this.bottomMargin = this.topMargin = this.rightMargin = this.leftMargin = 2;
    this.yMapper = this.xMapper = iggd_;
    this.surrogateInitialY = this.surrogateInitialX = 0;
    this.curTargetId = this.curSource = this.surrogate = iggd_;
    this.isRightButton = this.hasDragged = this.isDragging = iggd_a;
    this.b = {};
    this.f = {};
    this.g = {};
    this.a = {};
    this.h = {};
    this.d = this.c = iggd_;
    this.j()
}

_IG_Drag.prototype.noMoveMapper = function(a, b){
    return a - b
};
_IG_Drag.prototype.onDragStart = function(){
};
_IG_Drag.prototype.onDragTargetHit = function(){
};
_IG_Drag.prototype.onDragTargetLost = function(){
};
_IG_Drag.prototype.onDragEnd = function(){
};
_IG_Drag.prototype.onDragClick = function(){
};
_IG_Drag.prototype.i = function(){
    if (!this.surrogate) {
        this.surrogate = document.createElement("SPAN");
        this.surrogate.innerHTML = "";
        this.surrogate.style.position = "absolute";
        this.surrogate.style.cursor = "move";
        this.surrogate.style.left = this.surrogateInitialX + "px";
        this.surrogate.style.top = this.surrogateInitialY + "px";
        document.body.appendChild(this.surrogate)
    }
};
_IG_Drag.prototype.addSource = function(a, b, c){
    if (typeof b == "undefined")
        b = _gel(a);
    if (typeof this.b[a] != "undefined")
        return iggd_a;
    this.b[a] = b;
    if (typeof c != "undefined")
        b._IG_DragSurrogateView = c;
    this.f[a] = b.onmousedown;
    b.onmousedown = this.dragStart;
    this.g[a] = b.style.cursor;
    b.style.cursor = navigator.appName == "Microsoft Internet Explorer" ? "hand" : "pointer";
    return true
};
_IG_Drag.prototype.removeSource = function(a){
    if (typeof this.b[a] != "undefined") {
        this.b[a].onmousedown = this.f[a];
        if (typeof this.b[a].style != "undefined")
            this.b[a].style.cursor = this.g[a]
    }
    delete this.b[a]
};
_IG_Drag.prototype.removeAllSources = function(){
    for (var a in this.b) {
        this.b[a].onmousedown = this.f[a];
        if (typeof this.b[a].style != "undefined")
            this.b[a].style.cursor = this.g[a]
    }
    this.b = {}
};
_IG_Drag.prototype.addTarget = function(a, b, c){
    if (typeof b == "undefined")
        b = _gel(a);
    if (typeof c == "undefined")
        c = 0;
    this.a[a] = b;
    this.h[a] = c
};
_IG_Drag.prototype.removeTarget = function(a){
    delete this.a[a]
};
_IG_Drag.prototype.removeAllTargets = function(){
    this.a = {}
};
_IG_Drag.prototype.cacheTargets = function(){
    this.l = {};
    this.m = {};
    this.n = {};
    this.k = {};
    for (var a in this.a) {
        this.l[a] = _IG_DragPosition_left(this.a[a]) - this.leftMargin;
        this.m[a] = _IG_DragPosition_right(this.a[a]) + this.rightMargin;
        this.n[a] = _IG_DragPosition_top(this.a[a]) - this.topMargin;
        this.k[a] = _IG_DragPosition_bottom(this.a[a]) + this.bottomMargin
    }
};
_IG_Drag.prototype.e = function(a){
    if (typeof a == "undefined")
        a = window.event;
    if (typeof a.layerX == "undefined")
        a.layerX = a.offsetX;
    if (typeof a.layerY == "undefined")
        a.layerY = a.offsetY;
    return a
};
_IG_Drag.prototype.j = function(){
    var a = this;
    this.dragStart = function(b){
        a.isDragging && a.dragEnd();
        a.curSource = this;
        b = a.e(b);
        a.isDragging = true;
        a.i();
        var c = typeof a.curSource._IG_DragSurrogateView;
        if (c == "undefined")
            a.surrogate.innerHTML = a.curSource.innerHTML;
        else
            if (c == "boolean" || c == "number" || c == "string")
                a.surrogate.innerHTML = a.curSource._IG_DragSurrogateView;
            else {
                for (; a.surrogate.firstChild;)
                    a.surrogate.removeChild(a.surrogate.firstChild);
                a.surrogate.appendChild(a.curSource._IG_DragSurrogateView)
            }
        a.surrogateInitialX = _IG_DragPosition_left(a.curSource) + a.surrogateOffsetX;
        if (typeof a.curSource._IG_Drag_surrogateOffsetX != "undefined")
            a.surrogateInitialX += a.curSource._IG_Drag_surrogateOffsetX;
        a.surrogateInitialY = _IG_DragPosition_top(a.curSource) + a.surrogateOffsetY;
        if (typeof a.curSource._IG_Drag_surrogateOffsetY != "undefined")
            a.surrogateInitialY += a.curSource._IG_Drag_surrogateOffsetY;
        a.surrogate.style.left = a.surrogateInitialX + "px";
        a.surrogate.style.top = a.surrogateInitialY + "px";
        a.surrogate.lastMouseX = b.clientX;
        a.surrogate.lastMouseY = b.clientY;
        a.c = document.onmousemove;
        a.d = document.onmouseup;
        document.onmousemove = a.dragMove;
        document.onmouseup = a.dragEnd;
        a.isRightButton = iggd_a;
        if (b.which && b.which == 3)
            a.isRightButton = true;
        if (typeof b.button != "undefined" && b.button == 2)
            a.isRightButton = true;
        a.onDragStart(a.curSource);
        a.curTargetId = iggd_;
        a.onDragTargetLost(iggd_);
        a.hasDragged = iggd_a;
        a.cacheTargets();
        return iggd_a
    };
    this.dragMove = function(b){
        a.hasDragged = true;
        b = a.e(b);
        if (b.which == 0)
            return a.dragEnd();
        var c = b.clientY;
        var i = b.clientX;
        var f = parseInt(a.surrogate.style.top, 10);
        var g = parseInt(a.surrogate.style.left, 10);
        var j = a.xMapper ? a.xMapper(g, g - a.surrogateInitialX) : g + (i - a.surrogate.lastMouseX);
        var k = a.yMapper ? a.yMapper(f, f - a.surrogateInitialY) : f + (c - a.surrogate.lastMouseY);
        var l = j + a.surrogate.offsetWidth / 2, m = k + a.surrogate.offsetHeight / 2;
        a.surrogate.style.left = j + "px";
        a.surrogate.style.top = k + "px";
        a.surrogate.lastMouseX = i;
        a.surrogate.lastMouseY = c;
        var d = iggd_;
        for (var e in a.a)
            if (!(d != iggd_ && a.h[e] < a.h[d]))
                if (l >= a.l[e] && l <= a.m[e] && m >= a.n[e] && m <= a.k[e])
                    d = e;
        if (a.curTargetId != d)
            if (d == iggd_) {
                var h = a.a[a.curTargetId];
                a.curTargetId = iggd_;
                a.onDragTargetLost(h)
            }
            else
                if (a.curTargetId == iggd_) {
                    a.curTargetId = d;
                    a.onDragTargetHit(a.a[d], iggd_)
                }
                else {
                    h = a.a[a.curTargetId];
                    a.curTargetId = d;
                    a.onDragTargetHit(a.a[d], h)
                }
        a.c != iggd_ && a.c();
        return iggd_a
    };
    this.dragEnd = function(){
        document.onmousemove = a.c;
        document.onmouseup = a.d;
        a.surrogate.innerHTML = "";
        a.isDragging = iggd_a;
        var b = a.hasDragged;
        a.hasDragged = iggd_a;
        if (a.curSource != iggd_) {
            a.onDragEnd(a.curSource, a.a[a.curTargetId]);
            b || a.onDragClick(a.curSource)
        }
        a.curSource = iggd_;
        a.d != iggd_ && a.d();
        return iggd_a
    }
};

/**
 * Add targets for marker being shown on map.
 * @param {number} nDays duration of trip.
 */
function addMarkersTarget(nDays) {
  var dragXWindow = new _IG_Drag();
  dragXWindow.addSource("overlayDrag",
      _gel('mask'),
      '<img style="border:0 none;margin:0;padding:0;width:20px;height:34px;' +
          'z-index:10000;cursor:move;" ' +
          'src="http://www.google.com/mapfiles/marker.png"/>');
  for (var i = 0; i < nDays; i++) {
    dragXWindow.addTarget('scheduledInfoBox' + i);
  }
  dragXWindow.addTarget('unscheduleItemBox');
  dragXWindow.onDragTargetHit = function(newTarget, lastTarget) {
    if (newTarget) {
      newTarget.className = 'drop-highlight';
    }
    if (lastTarget) {
      lastTarget.className = '';
    }
  };
  dragXWindow.onDragTargetLost = function(lastTarget) {
    if (!lastTarget) return;
    lastTarget.className = '';
  };
  dragXWindow.onDragEnd = function(source, target) {
    if (!target) {
      return;
    }
    target.className = '';
    var targetId = target.id;
    var schedule = (targetId != 'unscheduleItemBox');
    var daySelected = schedule ? parseInt(targetId.substring(16), 10) + 1 : 0;
    addNewItem(markerIndex, schedule, daySelected);
  };
  dragXWindow.onDragStart = function(source, target) {
    if(arrSearchResults[markerIndex].err) {
      var id = arrSearchResults[markerIndex].id;
      doPoiByIdLookup(id);
    }

  };
}

/**
 * This function overrides the function inside 'drag' library, to fix
 * the problem when the drag target element is inside a 'scrollable' container.
 * @param {HTMLElement} element The HTML element.
 * @return {number} Returns the top position of the passed element in pixels.
 */
function _IG_DragPosition_top(element) {
  var top = 0;
  if (element.offsetParent) {
    var ele = element;
    for (; element.offsetParent; element = element.offsetParent) {
      top += element.offsetTop;
    }
    for(; ele.parentNode; ele = ele.parentNode) {
      if (ele.parentNode.scrollTop) {
        top -= ele.parentNode.scrollTop;
      }
    }
  }
  else {
    if (element.y) {
      top = element.y;
    }
  }
  return top;
}

/**
 * Gives the offset.
 * @param {object} target The element.
 * @param {object} event The event.
 * @return {object} The offset.
 */
function getMouseOffset(target, event) {
  event = event || window.event;
  var docPos = getPosition(target);
  var mousePos = mouseCoords(event);
  return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};
}

/**
 * Gives the x and y co-ordinates of the element.
 * @param {object} element The element.
 * @return {object} The position of element.
 */
function getPosition(element) {
  var left = 0;
  var top = 0;
  while (element.offsetParent) {
    left += element.offsetLeft;
    top += element.offsetTop;
    element = element.offsetParent;
  }
  left += element.offsetLeft;
  top += element.offsetTop;
  return {x:left, y:top};
}

/**
 * Executes when mouse move happens.
 * @param {object} event The mouse move event.
 * @return {boolean} false if drag object is found else true.
 */
function mouseMove(event) {
  event = event || window.event;
  var mousePos = mouseCoords(event);
  if (dragObject) {
    dragObject.style.position = 'absolute';
    dragObject.style.display = '';
    dragObject.style.top = mousePos.y - mouseOffset.y;
    dragObject.style.left = mousePos.x - mouseOffset.x;
    for (var i = 0; i < dropTargets.length; i++) {
      var curTarget = dropTargets[i];
      var targPos = getPosition(curTarget);
      if (curTarget.id.indexOf('unscheduleItemBox') == -1) {
        targPos.y -= _gel('scheduleItemBox').scrollTop;
      }
      var targWidth = parseInt(curTarget.offsetWidth, 10);
      var targHeight = parseInt(curTarget.offsetHeight, 10);
      if ((mousePos.x > targPos.x) &&
         (mousePos.x < (targPos.x + targWidth)) &&
         (mousePos.y > targPos.y) &&
         (mousePos.y < (targPos.y + targHeight))) {
        if (highlightedItem)
          highlightedItem.className = '';
        highlightedItem = curTarget;
        highlightedItem.className = 'drop-highlight';
        break;
      } else {
        if (highlightedItem)
          highlightedItem.className = '';
      }
    }
    return false;
  }
  return true;
}

/**
 * Gives the x and y co-ordinates of mouse on the page.
 * @param {object} event The mouse event.
 * @return {object} The mouse co-ordinates.
 */
function mouseCoords(event) {
  if (!event) {
    return;
  }
  if (event.pageX || event.pageY) {
    return {x:event.pageX, y:event.pageY};
  }
  return {
    x:event.clientX + document.body.scrollLeft - document.body.clientLeft,
    y:event.clientY + document.body.scrollTop - document.body.clientTop
  };
}

/**
 * Make an element draggable.
 * @param {object} item The item which is to be dragged.
 */
function makeDraggable(item) {
  if (!item) return;
  item.onmousedown = function(event) {
    closeInfoWindow();
    strSelectedItemId = this.id;
    this.className = 'dragobj';
    dragObject = _gel('dragHelper');
    dragObject.style.position = 'absolute';
    dragObject.style.top = this.style.top;
    dragObject.style.left = this.style.left;
    var html = this.innerHTML;
    dragObject.innerHTML = html.replace(/\sonmouseover=".*?"/i, '')
                               .replace(/\sonmouseout=".*?"/i, '');
    mouseOffset = getMouseOffset(this, event);
    return false;
  }
}

/**
 * Add an element on which drap event is to be occurred.
 * @param {object} dropTarget The element.
 */
function addDropTarget(dropTarget) {
  dropTargets.push(dropTarget);
}

/**
 * Executes when mouse up happens.
 * @param {object} event The mouse up event.
 */
function mouseUp(event) {
  event = event || window.event;
  try {
    if (dragObject !=  null) {
      var mousePos = mouseCoords(event);
      var bSchedule = false;
      var nDay = 0, index = -1;
      for (var i = 0; i < dropTargets.length; i++) {
        var curTarget = dropTargets[i];
        var targPos = getPosition(curTarget);
        if (curTarget.id.indexOf('unscheduleItemBox') == -1) {
          targPos.y -= _gel('scheduleItemBox').scrollTop;
        }
        var targWidth = parseInt(curTarget.offsetWidth, 10);
        var targHeight = parseInt(curTarget.offsetHeight, 10);
        if ((mousePos.x > targPos.x) &&
           (mousePos.x < (targPos.x + targWidth)) &&
           (mousePos.y > targPos.y) &&
           (mousePos.y < (targPos.y + targHeight))) {
          var objTrip = JGulliverData.getCurrentTrip();
          if (curTarget.id.indexOf('scheduledInfoBox') != -1) {
            var index = parseInt(curTarget.id.substr(16), 10);
            bSchedule = true;
            nDay = index + 1;
            if (!isEmpty(objTrip.sdate)) {
              currentdate = addDaysToDate(objTrip.sdate, index, '%m/%d/%Y');
            }
          }
          addNewItem(strSelectedItemId.substr(10), bSchedule, nDay);
          highlightedItem.className = '';
          break;
        }
      }
      var element = _gel(strSelectedItemId);
      if (element != null && element != undefined)
        element.className = '';
      dragObject.innerHTML = '';
      dragObject.style.display = 'none';
      dragObject = null;
    }
  } catch (err) {}
}

function moveMask(point) {
  var divPoint = gMap.fromLatLngToContainerPixel(point);
  var mapElementPosition = getPosition(_gel('map-container'));
  var ele = _gel('mask');
  var eleStyle = ele.style;
  eleStyle.display = 'block';
  eleStyle.zIndex = 10000;
  eleStyle.left = divPoint.x + mapElementPosition.x - 10 + 'px';
  eleStyle.top = divPoint.y + mapElementPosition.y - 34 + 'px';
}

function makeItemsDraggable() {
  var objTrip = JGulliverData.getCurrentTrip();
  var nDays = objTrip.duration;
  var dragTargets = ['unscheduleItemBox'];
  var dragSources = [];
  for (var i = 0; i < nDays; i++) {
    dragTargets.push('scheduledInfoBox' + i);
  }
  for (var i = 0; i < objTrip.arrItem.length; i++) {
    dragSources[i] = 'drag-' + i;
    var srcElement = _gel(dragSources[i]);
    var dragItem = new _IG_Drag();
    dragItem.addSource('itemDrag' + i, srcElement, srcElement.innerHTML);

    for (var j = 0; j < dragTargets.length; j++) {
      if (srcElement.parentNode.id != dragTargets[j]) {
        dragItem.addTarget(dragTargets[j]);
      }
    }
    dragItem.onDragTargetHit = function(newTarget, lastTarget) {
      if (newTarget) {
        newTarget.className = 'drop-highlight';
      }
      if (lastTarget) {
        lastTarget.className = '';
      }
    };
    dragItem.onDragTargetLost = function(lastTarget) {
      if (!lastTarget) return;
      lastTarget.className = '';
    };
    dragItem.onDragEnd = function(source, target) {
      if (!target) {
        return;
      }
      target.className = '';
      var targetId = target.id;
      var schedule = (targetId != 'unscheduleItemBox');
      var daySelected = schedule ? parseInt(targetId.substring(16), 10) + 1 : 0;
      var index = parseInt(source.id.substring(5),10);
      var objItem = objTrip.arrItem[index];
      var itemName = objItem.name;
      var itemDesp = objItem.address;
      var itemSDate = '';
      if (daySelected && !isEmpty(objTrip.sdate)) {
        itemSDate = addDaysToDate(objTrip.sdate, daySelected - 1, '%m/%d/%Y');
      }
      var itemFDate = itemSDate;
      objTrip.updateItemDetails(index, itemName, itemDesp, daySelected, itemSDate,itemFDate);
    };
  }
}

/**
 * @fileoverview File defines object to handle itinerary.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Class defines singleton object for itinerary.
 * @constructor
 */
function JGulliverData() {
  this.nSelectedTripIndex = -1;
  this.arrTripData = [];
}

/**
 * Instance of JGulliverData class.
 * @type {JGulliverData}.
 */
JGulliverData.instance = null;

/**
 * It returns the instance of itinerary if exists else create new instance.
 * @return {object} object of JGulliverData.
 */
JGulliverData.getInstance = function() {
  if (!JGulliverData.instance) {
    JGulliverData.instance = new JGulliverData();
  }
  return JGulliverData.instance;
};

/**
 * It returns the selected trip in the itinerary.
 * @return {object} object of JTrip.
 */
JGulliverData.getCurrentTrip = function() {
  var gulliverData = JGulliverData.getInstance();
  var objTrip = null;
  if (gulliverData.nSelectedTripIndex != -1) {
    objTrip = gulliverData.arrTripData[gulliverData.nSelectedTripIndex];
  }
  return objTrip;
};

/**
 * It returns the index of selected trip in the itinerary.
 * @param {string} id The trip id.
 * @return {number} Trip index if found else -1.
 */
JGulliverData.prototype.getTripIndex = function(id) {
  var gulliverData = JGulliverData.getInstance();
  var objTrip = null;
  for (var i = 0; i < gulliverData.arrTripData.length; i++) {
    if (gulliverData.arrTripData[i].id == id) {
      return i;
    }
  }
  return -1;
};

/**
 * Fetches all trips from database and displays them.
 * @param {Object} groupData Collection of friends.
 */
JGulliverData.prototype.fetchAllTrips = function(groupData) {
  var gulliverData = this;
  gulliverData.arrTripData = [];

  var url;
  if (wave && wave.isInWaveContainer()) {
    url = BASE_URL + '/getAllTrips?friendsList=' + _esc(groupData) +
          '&rand=' + Math.random();
  } else if (_unesc(_args()['synd']) == 'ig') {
    var friendsList = [];
    for (var j = 0, length = groupData.length - 1; j <= length; j++) {
      friendsList.push('\'' + _esc(groupData[j]) + '\'');
    }
    friendsList = friendsList.join(',');
    url = BASE_URL + '/getAllTrips?friendsList=' + friendsList +
          '&rand=' + Math.random();
  } else {
    var friendsList = [];
    for (var j = 0, length = groupData.length - 1; j <= length; j++) {
      friendsList.push('\'' + _esc(groupData[j].getDisplayName()) + '\'');
    }
    friendsList = friendsList.join(',');
    url = BASE_URL + '/getAllTrips?friendsList=' + friendsList +
          '&rand=' + Math.random();
  }
  gadgets.io.makeRequest(url, function(response) {
    var allTrips = gadgets.json.parse(response.data);
    if (allTrips.error != undefined) {
      var html = '<div class="no_trip">' + prefs.getMsg('server_error') +
          '&nbsp;<span class="link" onclick="' +
          'javascript:callbackTrips();">' + prefs.getMsg('try_again') +
          '</span></div>';
      _gel('canvasContent').innerHTML = html;
      return;
    }
    if (allTrips.length == 0) {
      var element = _gel('loadingSection');
      if (element) {
        element.innerHTML = '';
      }
      createTripBox();
    } else {
      var objTrip;
      for (var i = 0; i < allTrips.length; i++) {
        objTrip = new JTrip();
        objTrip.id = allTrips[i].trip_id;
        objTrip.ownerId = allTrips[i].owner_id;
        objTrip.ownerName = allTrips[i].owner_name;
        objTrip.name = allTrips[i].trip_name;
        objTrip.lat = allTrips[i].lat;
        objTrip.lng = allTrips[i].lang;
        objTrip.loc = allTrips[i].location;
        objTrip.accuracy = allTrips[i].accuracy;
        objTrip.duration = allTrips[i].duration;
        objTrip.rating = allTrips[i].rating;
        if (allTrips[i].thumb_up) {
          objTrip.thumb_up = allTrips[i].thumb_up;
        }
        if (allTrips[i].thumb_down) {
          objTrip.thumb_down = allTrips[i].thumb_down;
        }
        if (!isEmpty(allTrips[i].sdate)) {
          objTrip.sdate = formatDate(allTrips[i].sdate, '%m/%d/%Y');
        }
        if (!isEmpty(allTrips[i].fdate)) {
          objTrip.edate = formatDate(allTrips[i].fdate, '%m/%d/%Y');
        }
        gulliverData.arrTripData.push(objTrip);
      }
    }
    if (refreshUIData) {
      exploreTrip(gCurrentTripId);
    } else {
      gulliverData.displayTrips();
      refreshUIData = true;
    }
  });
};

/**
 * It creates a trip and add it to itinerary.
 * @param {string} location The location of trip.
 * @param {number} lat The latitude.
 * @param {number} lng The longitude.
 * @param {number} accuracy The accuracy of location.
 */
JGulliverData.prototype.createTrip = function(location, lat, lng, accuracy) {
  var gulliverData = this;
  var counter = gulliverData.arrTripData.length;
  var loc = location.toLowerCase();
  var count = 0;
  for (var i = 0; i < counter; i++) {
    if (loc == gulliverData.arrTripData[i].name.substr(0,
                   location.length).toLowerCase()) {
      count++;
    }
  }

  var tName = location + prefs.getMsg('trip');
  if (count) {
    tName = tName + count;
  }
  var req = opensocial.newDataRequest();
  req.add(req.newFetchPersonRequest('VIEWER'), 'viewer');
  req.send(function(response) {
    var ownerId;
    var ownerName;
    if (wave && wave.isInWaveContainer()) {
      ownerId = wave.getViewer().getId();
      ownerName = wave.getViewer().getDisplayName();
    } else {
      ownerId = response.get('viewer').getData().getId();
      ownerName = response.get('viewer').getData().getDisplayName();
    }
    var params = {};
    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
    post_data = gadgets.io.encodeValues({
      'owner_id': ownerId,
      'owner_name': ownerName,
      'trip_name': tName,
      'location': location,
      'lat': lat,
      'lang': lng,
      'accuracy': accuracy,
      'duration': DEFAULT_DURATION,
      'rating': DEFAULT_RATING
    });
    params[gadgets.io.RequestParameters.POST_DATA] = post_data;
    var url = BASE_URL + '/saveTrip?rand=' + Math.random();
    gadgets.io.makeRequest(url, function(response) {
      var html = ACTION_MSG_TPL;
      var responseData = gadgets.json.parse(response.data);
      if (responseData[0].error == enDBTransaction.ERROR) {
        html = html.replace(/%MESSAGE%/, prefs.getMsg('trip_create_err'))
                   .replace(/%NAME%/, tName);
        return;
      }
      html = html.replace(/%MESSAGE%/, prefs.getMsg('trip_created'));
      var objTrip = new JTrip();
      objTrip.id = responseData[0].tripId;
      objTrip.name = tName;
      objTrip.ownerName = ownerName;
      objTrip.loc = location;
      objTrip.lat = lat;
      objTrip.lng = lng;
      objTrip.accuracy = accuracy;
      objTrip.rating = DEFAULT_RATING;
      objTrip.duration = DEFAULT_DURATION;
      gulliverData.arrTripData.push(objTrip);
      gulliverData.nSelectedTripIndex = gulliverData.arrTripData.length - 1;
      hideDialog();
      showDragTip();
      callbackCreateTrip();
    }, params);
  });
};

/**
 * It deletes the current trip from db.
 */
JGulliverData.prototype.deleteTrip = function() {
  var gulliverData = this;
  var objTrip = gulliverData.arrTripData[gulliverData.nSelectedTripIndex];
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postData = gadgets.io.encodeValues({'trip_id': objTrip.id});
  params[gadgets.io.RequestParameters.POST_DATA] = postData;
  var url = BASE_URL + '/deleteTrip?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('trip_delete_err'))
                 .replace(/%NAME%/, _unesc(objTrip.name));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }

    gulliverData.arrTripData.splice(gulliverData.nSelectedTripIndex, 1);
    hideDialog();
    callbackTrips();
  }, params);
};

/**
 * Used for displaying he all trips.
 */
JGulliverData.prototype.displayTrips = function() {
  this.nSelectedTripIndex = -1;
  ownerTrips = this.arrTripData;

  var html = ['<div style="padding:7px 0;background:#f5eee6;">',
      '<table width="100%" cellpadding="0" cellspacing="0"><tr><td ',
      'align="left" width="35%" style="padding-left:7px;">',
      '<input type="text" id="searchTripText" class="txtBox" style="',
      'width:100%;"/></td><td valign="middle">&nbsp;<input type="button" ',
      'style="width:91px;" value="' + prefs.getMsg('search_trips') + '" ',
      'onclick="fillForSortedRecords(true);"/>&nbsp;<nobr>',
      '<span id="showAllTrips" style="display:none;" ',
      'onclick="fillForSortedRecords(false);">',
      '</span></nobr></td><td width="190px" align="right">',
      '<span style="float:left;padding-top:2px;"><input style="width:88px;" ',
      'type="button" value="' + prefs.getMsg('createTrip') + '" ',
      'onclick="createTripBox();"></span><nobr><span ',
      'id="showingTripText" style="float:right;margin:6px 5px;">',
      '</span></nobr></td></tr></table></div>',
      '<div><table width="100%" style="backgroundColor:#0080ff;">',
      '<tr><td width="100%" colspan="3" align="center">',
      '<div id="error_container" style="display:none;" class="msg_container">',
      '<center><span id="error_msg" class="server_msg"></span></center></div>',
      '</td></tr><tr><td width="27%" align="right" class="tripcols" ',
      'onclick="changeSign(\'col_1\',1);"><div id="col_1" ',
      'style="float:left;">' + prefs.getMsg('name') +
      '&nbsp;</div><div style="float:left;" id="img_1"><div>',
      '</td><td width="24%" align="left" ',
      'class="tripcols" onclick="changeSign(\'col_2\',2);">',
      '<div id="col_2" style="float:left;">' + prefs.getMsg('date') +
      '&nbsp;</div><div style="float:left;" id="img_2">', DOWN_ARROW_IMG,
      '<div></td><td width="24%" align="left" class="tripcols" ',
      'onclick="changeSign(\'col_3\',3);"><div id="col_3" ',
      'style="float:left;">' + prefs.getMsg('location') + '&nbsp;</div><div ',
      'style="float:left;" id="img_3"><div></td>',
      '<td width="24%" align="left" class="tripcols" ',
      'onclick="changeSign(\'col_4\',4);"><div id="col_4" ',
      'style="float:left;">' + prefs.getMsg('owner') +
      '&nbsp;</div><div style="float:left;" ',
      'id="img_4"><div></td></tr></table><div id="displayRec"></div>',
      '<div id="showPagination"></div></table></div>'];

  _gel('canvasContent').innerHTML = html.join('');
  addKeyListener('searchTripText');

  sortCol = enTripCol.DATE;
  bAscending = false;
  ownerTrips = ownerTrips.sort(sortHandler);
  fillForSortedRecords(false);

  _IG_AdjustIFrameHeight();
};

/**
 * @fileoverview Code to handle trip data.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Class JTrip defines trip object.
 * @constructor.
 */
function JTrip() {
  this.id = '';
  this.ownerId = '';
  this.ownerName = '';
  this.name = '';
  this.lat = '';
  this.lng = '';
  this.loc = '';
  this.accuracy = 0;
  this.zoomlevel = DEFAULT_ZOOM_LEVEL;
  this.duration = DEFAULT_DURATION;
  this.rating = DEFAULT_RATING;
  this.sdate = '';
  this.edate = '';
  this.thumb_up = 0;
  this.thumb_down = 0;
  this.arrItem = [];
}

/**
 * Fetch all items related to current trip.
 */
JTrip.prototype.fetchAllItems = function() {
  var objTrip = this;
  var url = BASE_URL + '/getAllTripItems?trip_id=' + this.id +
            '&rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var tripItems = gadgets.json.parse(response.data);
    if (tripItems.length > 0) {
      for (var i = 0; i < tripItems.length; i++) {
        var objItem = {
            id: '', name: '', address: '', review: '',
            sdate: '', edate: '', duration: 1, category: '',
            lat: '', lng: '', link: '', day: 0, weburl: '',
            imgurl: '', Item_thumb_up: 0, Item_thumb_down: 0,
            bCustom: ''
        };
        objItem.id = tripItems[i].item_id;
        objItem.name = _unesc(tripItems[i].name);
        objItem.item_owner = _unesc(tripItems[i].item_owner);
        objItem.address = _unesc(tripItems[i].location);
        objItem.lat = tripItems[i].lat;
        objItem.lng = tripItems[i].lang;
        objItem.review = _unesc(tripItems[i].review);
        objItem.sdate = tripItems[i].sdate;
        objItem.edate = tripItems[i].fdate;
        objItem.duration = tripItems[i].duration;
        objItem.category = tripItems[i].category;
        objItem.day = tripItems[i].day;
        objItem.link = tripItems[i].link;
        objItem.weburl = tripItems[i].weburl;
        objItem.imgurl = tripItems[i].imgurl;
        objItem.bCustom = tripItems[i].custom;
        if (tripItems[i].Item_thumb_up) {
          objItem.Item_thumb_up = tripItems[i].Item_thumb_up;
        }
        if (tripItems[i].Item_thumb_down) {
          objItem.Item_thumb_down = tripItems[i].Item_thumb_down;
        }

        objTrip.arrItem.push(objItem);
        fillItem(i);
      }
      makeItemsDraggable();
      showTripItemsOnmap();
   }
  });
};


/**
 * It updates all values for a specific item in to db.
 * @param {number} nIndex index of the item.
 * @param {string} itemName Name of the item.
 * @param {string} itemDesp Description of the item.
 * @param {number} itemDay Day of the item.
 * @param {string} itemSdate Start date of the item.
 * @param {string} itemFdate Finish date of the item.
 */
JTrip.prototype.updateItemDetails = function(nIndex, itemName, itemDesp,
                                             itemDay, itemSdate, itemFdate) {
  var objTrip = this;
  var objItem = objTrip.arrItem[nIndex];
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'item_id': objItem.id,
    'sdate': itemSdate,
    'fdate': itemFdate,
    'name': itemName,
    'review': itemDesp,
    'day' : itemDay
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateItemInfo?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    _gel('msgContainer').style.display = 'block';
    var html = ACTION_MSG_TPL;
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      html = html.replace(/%MESSAGE%/, prefs.getMsg('itemdates_update_err'))
                 .replace(/%NAME%/, _unesc(objItem.name));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }
    html = html.replace(/%MESSAGE%/, prefs.getMsg('itemdates_updated'))
               .replace(/%NAME%/, _unesc(objItem.name));
    _gel('serverMsg').innerHTML = '';
    timerMsg.createTimerMessage(html, 5);

    objItem.name = itemName;
    objItem.review = itemDesp;
    objItem.sdate = itemSdate ? formatDate(itemSdate, '%M%d%Y') : '';
    objItem.edate = itemFdate ? formatDate(itemFdate, '%M%d%Y') : '';
    objItem.day = itemDay;

    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);
    objTrip.showAllItems();
  }, params);
};


/**
 * It updates name of current trip in to db.
 * @param {string} strName name of trip.
 */
JTrip.prototype.updateName = function(strName) {
  _gel('editdialog').innerHTML = '';
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'trip_id': this.id,
    'trip_name': strName
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateTripName?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('tripname_update_err'));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }
    objTrip.name = strName;
    var tripTitle = _gel('tripName');
    if (strName.length > MAX_TRIPITEM_NAME) {
      tripTitle.innerHTML = strName.substr(0, MAX_TRIPITEM_NAME) + '...';
      tripTitle.title = strName;
    } else {
      tripTitle.innerHTML = strName;
      tripTitle.title = '';
    }
  }, params);
};

/**
 * It updates location of current trip in to db.
 * @param {string} strLocation Location of trip.
 * @param {string} newLat Trip location latitude.
 * @param {string} newLang Trip location longitude.
 * @param {number} accuracy Trip loacation accuracy.
 */
JTrip.prototype.updateLocation = function(strLocation,
                                          newLat,
                                          newLang,
                                          accuracy) {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'trip_id': this.id,
    'lat': newLat,
    'lng' : newLang,
    'location': strLocation
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateTripLocation?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    _gel('msgContainer').style.display = 'block';
    var html = ACTION_MSG_TPL;
    var responseData = gadgets.json.parse(response.data);
    if (responseData.error == enDBTransaction.ERROR) {
      html = html.replace(/%MESSAGE%/, prefs.getMsg('triploc_update_err'));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return false;
    }
    html = html.replace(/%MESSAGE%/, prefs.getMsg('triploc_updated'));
    _gel('serverMsg').innerHTML = '';
    timerMsg.createTimerMessage(html, 5);
    objTrip.loc = strLocation;
    objTrip.lng = newLang;
    objTrip.lat = newLat;
    gMap.clearOverlays();
    gMap.setCenter(new GLatLng(newLat, newLang), tabAccuracy[accuracy]);
    var start = new GLatLng(objTrip.lat, objTrip.lng);
  }, params);
};

/**
 * It updates rating of current trip in to db.
 * @param {number} rating Rating of trip.
 */
JTrip.prototype.updateRating = function(rating) {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'trip_id': this.id,
    'rating': this.rating
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateTripRating?rand=' + Math.random();

  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('rating_update_err'));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      objTrip.rating = rating
      fStarOut();
    }
  }, params);
};

/**
 * It updates duration value for current trip in to db.
 * @param {number} nDays duration of trip.
 */
JTrip.prototype.updateDuration = function(nDays) {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'trip_id': this.id,
    'duration': nDays
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateTripDate?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('tripduration_update_err'));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }

    // Update the items which goes outside the range of trip duration.
    for (var i = 0; i < objTrip.arrItem.length; i++) {
      if (objTrip.arrItem[i].day > nDays)
        objTrip.arrItem[i].day = 0;
    }
    objTrip.duration = nDays;
    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(null, null, nDays);
    objTrip.showAllItems();
  }, params);
};

/**
 * It updates dates value for current trip in to db.
 * @param {string} strStartDate start date of trip.
 * @param {string} strEndDate end date of trip.
 * @param {number} nDays duration of trip.
 */
JTrip.prototype.updateDates = function(strStartDate, strEndDate, nDays) {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'trip_id': this.id,
    'sdate': strStartDate,
    'fdate': strEndDate,
    'duration': nDays
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateTripDate?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('tripdates_update_err'));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }
    objTrip.sdate = strStartDate;
    objTrip.edate = strEndDate;
    objTrip.duration = nDays;
    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(strStartDate, strEndDate, nDays);
    objTrip.showAllItems();
  }, params);
};

/**
 * Send mail request to server.
 */
JTrip.prototype.sendMail = function() {
  var bValidate = validateEmailid(_gel('emailId').value);
  // to be extracted using open-social
  var ownerMailId = '';
  var mailErrRef = _gel('mailErr');

  if (bValidate) {
    var objTrip = JGulliverData.getCurrentTrip();
    var toList = _gel('emailId').value;
    var tempArr = toList.split(',');
    if (tempArr.length > MAX_EMAILS) {
      mailErrRef.style.display = 'block';
      mailErrRef.innerHTML = prefs.getMsg('not_more') + ' ' + MAX_EMAILS +
                                  ' ' + prefs.getMsg('email_allow');
    } else {
      var description = _gel('mailDescp').value;
      description = '<pre style="font-family:arial;' +
                    'font-weight:bold;font-size:15px;">' + description +
                    '</pre>';
      var sortOrder = ''
      if (objTrip.sdate == '' && objTrip.edate == '')
        sortOrder = 'day';
      else
        sortOrder = 'date';

      var params = {};
      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
      post_data = gadgets.io.encodeValues({
        'owner_id': objTrip.ownerId,
        'owner_name': objTrip.ownerName,
        'trip_id': objTrip.id,
        'toList': toList,
        'description': description,
        'ownerMailId': ownerMailId,
        'sortOrder': sortOrder
      });
      params[gadgets.io.RequestParameters.POST_DATA] = post_data;
      var url = BASE_URL + '/mailTrip?rand=' + Math.random();
      gadgets.io.makeRequest(url, function(response) {
        var responseData = gadgets.json.parse(response.data);
        _gel('msgContainer').style.display = 'block';
        var html = ACTION_MSG_TPL;
        if (responseData.error == enDBTransaction.ERROR) {
          html = html.replace(/%MESSAGE%/,
                              prefs.getMsg('server_error') + ': ' +
                              prefs.getMsg('mail_not') + '.');
        } else {
          html = html.replace(/%MESSAGE%/, prefs.getMsg('mail_success'));
        }
        _gel('serverMsg').innerHTML = '';
        timerMsg.createTimerMessage(html, 5);
      }, params);
      hideDialog();
    }
  } else {
    mailErrRef.style.display = 'block';
    mailErrRef.innerHTML = prefs.getMsg('wrong_email');
    _gel('emailId').focus();
  }
};

/**
 * It shows all items of trip.
 */
JTrip.prototype.showAllItems = function() {
  for (var i = 0; i < this.arrItem.length; i++) {
    fillItem(i);
  }
  makeItemsDraggable();
};

/**
 * It saves the item to current trip.
 * @param {object} objItem object of JTripItem.
 */
JTrip.prototype.saveItem = function(objItem) {
  var objTrip = this;
  objTrip.arrItem.push(objItem);
  fillItem(objTrip.arrItem.length - 1);
  makeItemsDraggable();
  if (objItem.review) {
    objItem.review = (stripHtml(objItem.review)).substring(0, 450);
  }
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  if (!isEmpty(objItem.sdate) && !isEmpty(objItem.edate)) {
    var postdata = gadgets.io.encodeValues({
      'user_id': objTrip.ownerId,
      'item_owner': gViewer,
      'trip_id': objTrip.id,
      'custom': objItem.bCustom,
      'name': _hesc(objItem.name),
      'location': objItem.address,
      'lat': objItem.lat,
      'lang': objItem.lng,
      'review': objItem.review,
      'sdate': objItem.sdate,
      'fdate': objItem.edate,
      'duration': objItem.duration,
      'day': objItem.day,
      'category': objItem.category,
      'link': objItem.link,
      'weburl': objItem.weburl,
      'imgurl': objItem.imgurl,
      'data_source': objItem.data_source
    });
  } else {
    var postdata = gadgets.io.encodeValues({
      'user_id': objTrip.ownerId,
      'item_owner': gViewer,
      'trip_id': objTrip.id,
      'custom': objItem.bCustom,
      'name': objItem.name,
      'location': objItem.address,
      'lat': objItem.lat,
      'lang': objItem.lng,
      'review': objItem.review,
      'duration': objItem.duration,
      'day': objItem.day,
      'category': objItem.category,
      'link': objItem.link,
      'weburl': objItem.weburl,
      'imgurl': objItem.imgurl,
      'data_source': objItem.data_source
    });
  }
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/saveItemToTrip?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var responseData = gadgets.json.parse(response.data);
    _gel('msgContainer').style.display = 'block';
    var html = ACTION_MSG_TPL;
    if (responseData.error == enDBTransaction.ERROR) {
      // if transaction fails revert back to previous result
      objTrip.arrItem.splice(objTrip.arrItem.length - 1, 1);
      _gel('unscheduleItemBox').innerHTML = '';
      createScheduledItemBox(strStartDate, strEndDate, nDays);
      objTrip.showAllItems();
      html = html.replace(/%MESSAGE%/, prefs.getMsg('item_add_err'));
    } else {
      html = html.replace(/%MESSAGE%/, prefs.getMsg('item_added'));
      objTrip.arrItem[objTrip.arrItem.length - 1].id = responseData.id;
    }
    html = html.replace(/%NAME%/, _unesc(objItem.name));
    _gel('serverMsg').innerHTML = '';
    timerMsg.createTimerMessage(html, 5);
  }, params);
};

/**
 * It notify the concurrent users about updates on this trip.
 * @param {object} objItem object of trip item.
 */
JTrip.prototype.notifyAllConcurrentUsers = function(objItem) {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'item_owner': gViewer,
    'trip_id': objTrip.id
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/notifyAllUsers?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var responseData = gadgets.json.parse(response.data);
  }, params);
};

/**
 * It gives all the concurrent user of current trip.
 * @param {object} objItem object of trip item.
 */
JTrip.prototype.getAllConcurrentUsers = function() {
  var objTrip = this;
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'item_owner': gViewer,
    'trip_id': objTrip.id
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/getAllUsers?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var responseData = gadgets.json.parse(response.data);
    if(responseData) {
      gFetchedData = responseData;
    }
    alert(gFetchedData + '    ' + gWhoAllWorking);
    if(gFetchedData != gWhoAllWorking) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/,
                          gFetchedData + ' is also working on this trip');
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      gWhoAllWorking = gFetchedData;
    }
  }, params);
};

/**
 * It updates date values for a specific item in to db.
 * @param {number} nIndex index of the item.
 * @param {string} strDate date to be updated for the item.
 */
JTrip.prototype.updateItemDates = function(nIndex, strDate) {
  var objTrip = this;
  var objItem = objTrip.arrItem[nIndex];
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'item_id': objItem.id,
    'sdate': strDate,
    'fdate': strDate
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateItemDate?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('itemdates_update_err'))
                 .replace(/%NAME%/, _unesc(objItem.name));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }
    objItem.sdate = strDate;
    objItem.edate = strDate;
    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);
    objTrip.showAllItems();
    strSelectedItemId = '';
  }, params);
};

/**
 * It updates day values for current item in to db.
 * @param {number} nIndex index of the item.
 * @param {number} nDay day to be updated for the item.
 */
JTrip.prototype.updateItemDays = function(nIndex, nDay) {
  var objTrip = this;
  var objItem = objTrip.arrItem[nIndex];
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
    'item_id': this.arrItem[nIndex].id,
    'day': nDay
  });
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + '/updateItemDay?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      _gel('msgContainer').style.display = 'block';
      var html = ACTION_MSG_TPL;
      html = html.replace(/%MESSAGE%/, prefs.getMsg('itemdates_update_err'))
                 .replace(/%NAME%/, _unesc(objItem.name));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }
    objItem.day = nDay;
    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);
    objTrip.showAllItems();
    strSelectedItemId = '';

  }, params);
};

/**
 * It deletes the item for current trip in to db.
 * @param {number} nIndex index of the item for current trip.
 */
JTrip.prototype.deleteItem = function(nIndex) {
  var objTrip = this;
  var itemObject = objTrip.arrItem[nIndex];
  var params = {};
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var post_data = gadgets.io.encodeValues({'item_id': itemObject.id});
  params[gadgets.io.RequestParameters.POST_DATA] = post_data;
  var url = BASE_URL + '/deleteItem?rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    _gel('msgContainer').style.display = 'block';
    var html = ACTION_MSG_TPL;
    var reaponseData = gadgets.json.parse(response.data);
    if (reaponseData.error == enDBTransaction.ERROR) {
      html = html.replace(/%MESSAGE%/, prefs.getMsg('item_delete_err'))
                 .replace(/%NAME%/, _unesc(itemObject.name));
      _gel('serverMsg').innerHTML = '';
      timerMsg.createTimerMessage(html, 5);
      return;
    }

    html = html.replace(/%MESSAGE%/, prefs.getMsg('item_deleted'))
               .replace(/%NAME%/, _unesc(itemObject.name));
    _gel('serverMsg').innerHTML = '';
    timerMsg.createTimerMessage(html, 5);
    objTrip.arrItem.splice(nIndex, 1);
    _gel('unscheduleItemBox').innerHTML = '';
    createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);
    objTrip.showAllItems();
    strSelectedItemId = '';
    showTripItemsOnmap();
  }, params);
};

/**
 * To mark items on the map.
 */
JTrip.prototype.markItemsOnMap = function() {
  arrSearchResults = [];
  var objTrip = this;
  var url = BASE_URL + '/getAllTripItems?trip_id=' + this.id +
            '&rand=' + Math.random();
  gadgets.io.makeRequest(url, function(response) {
    var tripItems = gadgets.json.parse(response.data);
    gMap.clearOverlays();
    if (tripItems.length > 0) {
      var iconUrl = FILE_SERVER + '/images/marker_blue.png';
      for (var i = 0; i < tripItems.length; i++) {
        addMarker(i, new GLatLng(tripItems[i].lat, tripItems[i].lang), iconUrl,
                  _unesc(tripItems[i].name), _unesc(tripItems[i].review));
        arrSearchResults.push(tripItems[i]);
      }
    }
  });
};

/**
 * @fileoverview Code handles map related functionality.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

function addCustomMarker(index, point, imgUrl, id){
  var letteredIcon = new GIcon(baseIcon, imgUrl);
  var markerOptions = {icon: letteredIcon};
  var marker = new GMarker(point, {icon: letteredIcon, autoPan: false});
  gMap.addOverlay(marker);

  marker.value = index;

  //Adding data to global array
  arrSearchResults[index] = { id: id,
      err : true,
      lat: point.lat(),
      lng: point.lng(),
      name : arrSearchResults[index].name};
  GEvent.addListener(marker, 'mouseover', function(latlng) {
    // For masking
    if (index != -1) {
      markerIndex = index;
      var name = arrSearchResults[index].name;
      currentMarker = marker;
      currentMarkerIcon = imgUrl;
      moveMask(latlng);
      showToolTip(latlng, name);
      var html = [];
    }
  });
}

function removeIternaryMarkers() {
  for (var i = iternaryMarkers.length; i; i--) {
    var marker = iternaryMarkers[i - 1];
    gMap.removeOverlay(marker);
  }
  iternaryMarkers = [];
}

function addBlueMarker(index, objItem, baseIcon) {
  var point = new GLatLng(objItem.lat, objItem.lng);
  var marker = new GMarker(point, {icon: baseIcon, autoPan: false});
  iternaryMarkers.push(marker);
  gMap.addOverlay(marker);
  GEvent.addListener(marker, 'mouseover', function(latlng) {
    if (index != -1) {
      showToolTip(latlng, objItem.name);
    }
  });

  GEvent.addListener(marker, 'click', function(latlng) {
    // For masking
    if (index == -1) {
      return;
    } else {
      markerIndex = index;
      currentMarker = marker;
      _gel('msgContainer').style.display = 'none';
      var html = getPopupHtml(markerIndex, true, true);
      html = html.replace(/%CLOSE_IMG%/, '')
          .replace(currentMarkerIcon, '')
          .replace('<img src=""/>', '');
      iternaryMarkers[index].openInfoWindowHtml(html);
    }
  });
}

function showTripItemsOnmap() {
  removeIternaryMarkers();
  var objTrip = JGulliverData.getCurrentTrip();
  var baseIcon = new GIcon(G_DEFAULT_ICON);
  baseIcon.image = FILE_SERVER + '/images/blue-pushpin.png';
  // baseIcon.iconSize = new GSize(32, 32);
  for (var i = 0; i < objTrip.arrItem.length; i++) {
    addBlueMarker(i, objTrip.arrItem[i], baseIcon);
  }
}

function addMarker(index, point, imgUrl, name, description) {
  var baseIcon = new GIcon(G_DEFAULT_ICON);
  var bounds = gMap.getBounds();
  baseIcon.iconSize = new GSize(20, 34);
  baseIcon.shadowSize = new GSize(37, 34);
  var letteredIcon = new GIcon(baseIcon, imgUrl);
  var markerOptions = {icon: letteredIcon};
  if (bounds.contains(point) == true) {
    var marker = new GMarker(point, {icon: letteredIcon, autoPan: false});
    gMap.addOverlay(marker);
  }

  marker.value = index;
  GEvent.addListener(marker, 'mouseover', function(latlng) {
    if (index != -1) {
      markerIndex = index;
      currentMarker = marker;
      currentMarkerIcon = imgUrl;
      moveMask(latlng);
      showToolTip(latlng,name);
    }
  });
}

/**
 * Highlight marker on map.
 * @param {object} obj Current image element.
 * @param {string} i Position for result item in arrSearchResults.
 */
function addHighLightmarker(obj, i) {
  var point = new GLatLng(arrSearchResults[i].lat, arrSearchResults[i].lng);
  var letter = String.fromCharCode('A'.charCodeAt(0) + i);
  var icon = new GIcon(G_DEFAULT_ICON);
  icon.image = 'http://www.google.com/mapfiles/marker_green' + letter + '.png';
  obj.src = icon.image;
  highLightMarker = new GMarker(point, {icon: icon,
                                zIndexProcess: function() {
                                  return 100;}});
  gMap.addOverlay(highLightMarker);
}

/**
 * Highlight marker on map.
 * @param {object} obj Current image element.
 * @param {string} index Index of the icon which is to be used now.
 */
function removeHighLightMarker(obj, index) {
  gMap.removeOverlay(highLightMarker);
  var letter = String.fromCharCode('A'.charCodeAt(0) + index);
  obj.src = 'http://www.google.com/mapfiles/marker' + letter + '.png';
}


function getLatLangLocation(address, itemName, itemOwner, sdate, edate, day) {
  var newLat, newLang;
  if (geocoder) {
    geocoder.getLocations(address, function(result) {
      if (result.Status.code == 200) {
        if (result.Placemark.length > 0) {
          var objTrip = JGulliverData.getCurrentTrip();
          var place = result.Placemark[0];
          var accuracy = place.AddressDetails.Accuracy;
          var p = result.Placemark[0].Point.coordinates;
          var lat = p[1];
          var lang = p[0];
          var objItem = {
            id: '', name: '', address: '', review: '',
            sdate: '', edate: '', duration: 1, category: '',
            lat: '', lng: '', link: '', day: 0, weburl: '',
            imgurl: '', Item_thumb_up: 0, Item_thumb_down: 0,
            bCustom: ''
          };
          objItem.name = itemName;
          objItem.item_owner = itemOwner;
          objItem.review = address;
          objItem.address = address;
          objItem.sdate = sdate;
          objItem.edate = edate;
          objItem.lat = lat;
          objItem.lng = lang;
          objItem.day = day;
          objItem.bCustom = 1;
          objItem.data_source = 'custom';
          objTrip.saveItem(objItem);
          strSelectedItemId = '';
          hideDialogView();
        }
      } else {
        // to do - checking
        _gel('wrngmsg').innerHTML = prefs.getMsg('loc_not_found');
        _gel('wrngmsg').style.visibility = 'visible';

      }
    });
  }
}

/**
 * Function to show map on print preview dialog.
 * @param {number} lat The latitude for trip.
 * @param {number} lng The longitude for trip.
 * @param {number} accuracy Accuracy on map.
 */
function showStaticMap(lat, lng, accuracy) {
  _gel('print_content').innerHTML = '';
  var printMap;
  var mapContent = _gel('staticMap');
  if (_gel('print_Map').checked) {
    mapContent.style.display = 'block';
    mapContent.style.height = '400px';
    mapContent.style.width = '500px';
    printMap = new GMap2(mapContent);
      printMap.setCenter(new GLatLng(lat, lng), tabAccuracy[accuracy]);
      var bounds = printMap.getBounds();
      printMap.panTo(bounds.getCenter());
  } else {
    _gel('print_Dialog').scrollTop = 0;
    mapContent.style.display = 'none';
  }
}

/**
 * Checks whether the location is valid and if valid,
 *     update the location.
 * @param {string} address Location entered by user.
 * @param {number} nCreateTrip Flag to check whether trip is to be created.
 */
function showAddress(address, nCreateTrip) {
  var newLat, newLang;
  if (geocoder) {
    geocoder.getLocations(address, function(result) {
      if (result.Status.code == 200) {
        if (result.Placemark.length > 0) {
          var place = result.Placemark[0];
          var accuracy = place.AddressDetails.Accuracy;
          var p = result.Placemark[0].Point.coordinates;
          newLat = p[1];
          newLang = p[0];
          if (nCreateTrip == 0) {
            var objTrip = JGulliverData.getCurrentTrip();
            objTrip.updateLocation(address, newLat, newLang, accuracy);
            _gel('resultBox').innerHTML = '';
            _gel('navBox').innerHTML = '';
            _gel('resultText').innerHTML = '';
            _gel('search-box').value = '';
          } else {
            JGulliverData.getInstance().createTrip(address,
                                                   newLat, newLang, accuracy);
          }
          hideDialog();
       }
      } else {
        if (nCreateTrip == 0) {
          _gel('wrngmsg').innerHTML = prefs.getMsg('loc_not_found');
          _gel('wrngmsg').style.visibility = 'visible';
        } else {
          var element = _gel('create-location');
          element.value = '';
          element.focus();
          var serverMsg = _gel('server_msg');
          serverMsg.style.display = 'block';
          serverMsg.innerHTML = prefs.getMsg('invalid_loc');
          _IG_AdjustIFrameHeight();
          return;
        }
      }
    });
  }
}

function showMarkerInfo() {
  if (!currentMarker || markerIndex == -1) {
    return;
  }
  _gel('msgContainer').style.display = 'none';
  var html = getPopupHtml(markerIndex, true, false);
  if (arrSearchResults[markerIndex].data_source = 'lonely') {
    currentMarker.openInfoWindowHtml(LOADING_TPL);
    html = html.replace(/%CLOSE_IMG%/, '')
        .replace(currentMarkerIcon, '')
        .replace('<img src=""/>', '');
    setTimeout(gMap.closeInfoWindow, 1000);
  }
  currentMarker.openInfoWindowHtml(html);
}

/**
 * @fileoverview Code to handle search.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Class JSearchResults defines atributes for search.
 * @constructor.
 */
function JSearchResults() {
  this.name = '';
  this.address = '';
  this.lat = '';
  this.lng = '';
  this.rating = 0;
  this.weburl = '';
  this.sdate = '';
  this.edate = '';
  this.category = '';
  this.imgurl = '';
  this.link = '';
  this.review = '';
}

function search(value) {
  _gel('search-box').value = value;
  searchMapContent(1, null, false);
}

/**
 * Search for a particular query and shows the result.
 * @param {number} nPageNum page number.
 * @param {string} locPoint location latitude & longitude.
 * @param {boolean} isPagination Flag indicates whether pagination to be shown.
 */
function searchMapContent(nPageNum, locPoint, isPagination) {
  var objTrip = JGulliverData.getCurrentTrip();
  var keyword = _gel('search-box').value;
  if (keyword.strip() == '') {
    return;
  }
  gMap.clearOverlays();
  showTripItemsOnmap();
  var searchUrl = SEARCH_URL_TPL;
  var start = (nPageNum - 1) * MAX_ITEM + 1;
  var bounds = gMap.getBounds();
  var sspnUrl = bounds.getCenter().toUrlValue();
  searchUrl = searchUrl.replace(/%KEYWORD%/g, encodeURIComponent(keyword))
      .replace(/%LOCATION%/g, sspnUrl)
      .replace(/%PAGE_NUM%/g, start);
  arrSearchResults = [];
  var results;
  var searchResults, itemHtml = '';
  _gel('loading-container').innerHTML = LOADING_TPL;
  _IG_FetchXmlContent(searchUrl, function(feed) {
    try {
      _gel('loading-container').innerHTML = '';
      if (feed == null || feed == undefined) {
        _gel('resultText').innerHTML = prefs.getMsg('no_result');
        _gel('navBox').innerHTML = '';
        return;
      }
      var html = [];
      var icon, title;
      var placemarks = feed.getElementsByTagName('Placemark');
      var i;
      for (i = 0; i < placemarks.length; i++) {
        var placemark = placemarks[i].childNodes;
        var index;
        searchResults = new JSearchResults();
        searchResults.category = keyword;
        for (var j = 0; j < placemark.length; j++) {
          if (placemark[j].nodeType == 1) {
            switch (placemark[j].nodeName) {
              case 'name':
                searchResults.name = placemark[j].childNodes[0].nodeValue;
                break;
              case 'Snippet':
                if (placemark[j].childNodes[0]) {
                  searchResults.address = placemark[j].childNodes[0].nodeValue;
                } else if (placemark[j].childNodes[1]) {
                  searchResults.address = placemark[j].childNodes[1].nodeValue;
                }
                searchResults.address = searchResults.address.replace(/<br\/>/,
                                                                     ' ');
                break;
              case 'Point':
                var coordinates =
                    placemark[j].childNodes[0].childNodes[0].nodeValue;
                searchResults.lat = coordinates.split(',')[1];
                searchResults.lng = coordinates.split(',')[0];
              case 'StyleMap':
                var stylemap = placemark[j].childNodes[0];
                var text = stylemap.getElementsByTagName('text')[0];
                var review = '';
                if (text != null) {
                  var strValue = text.childNodes[0].nodeValue;
                  var reviewSplit = '';
                  var reviewIndex = strValue.search(/<br\/><b/i);
                  searchResults.review = strValue.substr(reviewIndex + 5);
                  searchResults.review = stripHtml(searchResults.review);
                  reviewSplit = searchResults.review.split('$');
                  searchResults.review = reviewSplit[0];
                  if (strValue.length > 0) {
                    index = strValue.search(/<a href=/i);
                    if (index != -1) {
                      strValue = strValue.substr(index + 9);
                      searchResults.link =
                          strValue.substr(0, strValue.indexOf('"'));
                      index = strValue.search(/<tr/i);
                      var row = '';
                      if (index != -1) {
                        strValue = strValue.substr(index + 3);
                        index = strValue.search(/<\/tr>/);
                        row = strValue.substr(0, index);
                        index = row.search(/<a href=/i);
                        if (index != -1) {
                          row = row.substr(index);
                          if (row.indexOf('style="color:#008000"') != -1) {
                            searchResults.weburl = row.substr(0,
                                                   row.indexOf('</a>') + 4);
                            searchResults.weburl = searchResults.weburl.replace(
                                                   /<a href/i,
                                                   '<a target="_blank" href');
                          }
                        }
                      }
                      index = strValue.search(/<img src="http:\/\/base.googl/i);
                      if (index != -1) {
                        strValue = strValue.substr(index + 10);
                        var img = strValue.substr(0, strValue.indexOf('"'));
                        searchResults.imgurl = img;
                      }
                    }
                  }
                } else {
                  searchResults.rating = 0;
                }
                break;

            }
          }
        }
        results = i;
        icon = '';
        var iconUrl = 'http://www.google.com/mapfiles/marker' + icon + '.png';
        addMarker(i,
                  new GLatLng(searchResults.lat, searchResults.lng),
                  iconUrl,
                  searchResults.name);
        showTripItemsOnmap();
        itemHtml = ADD_TO_TRIP_TPL;
        itemHtml = itemHtml.replace(/%ICON%/g, icon)
            .replace(/%ITEM_NAME%/g, searchResults.name)
            .replace(/%CONTACT_INFO%/g, searchResults.address)
            .replace(/%WEB_URL%/g, searchResults.weburl)
            .replace(/%INDEX%/g, i);
        html.push(itemHtml);
        searchResults.data_source = 'google';
        arrSearchResults.push(searchResults);
      }
      gMap.setCenter(new GLatLng(objTrip.lat, objTrip.lng),
                     tabAccuracy[objTrip.accuracy]);
      gMap.panTo(new GLatLng(objTrip.lat, objTrip.lng));
      // setting the map view according to new bound.
      if (locPoint == null) {
        var newZoom = gMap.getBoundsZoomLevel(bounds);
        var newCenter = bounds.getCenter();
        gMap.setCenter(newCenter, newZoom);
        gMap.panTo(bounds.getCenter());
      }

      _gel('resultBox').innerHTML = html.join('');
      var maxItem = Math.min(MAX_ITEM, arrSearchResults.length);
      for (i = 0; i < maxItem; i++) {
        makeDraggable(_gel('resultItem' + i));
      }
      var end =
          maxItem < MAX_ITEM ? (start + maxItem - 1) : nPageNum * MAX_ITEM;
      _gel('resultText').innerHTML =
          prefs.getMsg('results') + start + ' - ' + end;
      if (nPageNum == 1) {
        html = ['<div align="center" style="padding-left:33px;">'];
      } else {
        html = ['<div align="center">'];
      }
      if (nPageNum > 1) {
        html.push('<span class="link" onclick="javascript:searchMapContent(',
            (nPageNum - 1), ', null, true);"><img src="' + FILE_SERVER +
            '/images/google_nav_prev.gif" ',
            'border="0" title="', prefs.getMsg('prev_results'), '"/></span>');
      } else {
        html.push('<img src="' + FILE_SERVER +
                  '/images/google_nav_first.gif" />');
      }
      html.push('<img src="' + FILE_SERVER + '/images/google_nav_page.gif" ',
          'border="0" title="oooo" />',
          '<img src="' + FILE_SERVER + '/images/google_nav_page.gif" ',
          'border="0" title="oooo"/>');
      if (results < MAX_ITEM - 1) {
        html.push('<img src="' + FILE_SERVER +
                  '/images/google_nav_last.gif" />');
      } else {
        html.push('<a href="javascript:searchMapContent(', (nPageNum + 1),
            ', null, true)"><img ',
            'src="' + FILE_SERVER + '/images/google_nav_next.gif" ',
            'border="0" title="', prefs.getMsg('next_results'), '" />',
            '</a>');
      }
      html.push('</div>');
      _gel('navBox').innerHTML = html.join('');
      _IG_AdjustIFrameHeight();
    } catch (err) {
      // error handling
    }
  });
}

/**
 * @fileoverview Library of all database update methods of Gulliver Gadget.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Function to create new item and save it to db.
 * @param {number} nSelectedItemIndex Index of item.
 * @param {boolean} bSchedule the flag for scheduling the item.
 * @param {number} nDaySelected The day to which item is being added.
 */
function addNewItem(nSelectedItemIndex, bSchedule, nDaySelected) {
  if (nSelectedItemIndex >= 0) {
    var objTrip = JGulliverData.getCurrentTrip();
    var objItem = {
      id: '', name: '', address: '', review: '',
      sdate: '', edate: '', duration: 1, category: '',
      lat: '', lng: '', link: '', day: 0, weburl: '',
      imgurl: '', Item_thumb_up: 0, Item_thumb_down: 0,
      bCustom: ''
    };
    objItem.name = arrSearchResults[nSelectedItemIndex].name;
    objItem.item_owner = gViewer;
    objItem.lat = arrSearchResults[nSelectedItemIndex].lat;
    objItem.lng = arrSearchResults[nSelectedItemIndex].lng;
    objItem.address = arrSearchResults[nSelectedItemIndex].address;
    if (arrSearchResults[nSelectedItemIndex].review == undefined) {
      objItem.review = '';
    } else {
      objItem.review = arrSearchResults[nSelectedItemIndex].review;
    }
    objItem.category = arrSearchResults[nSelectedItemIndex].category;
    objItem.rating = arrSearchResults[nSelectedItemIndex].rating;
    var itemDate = addDaysToDate(objTrip.sdate, nDaySelected - 1, '%m/%d/%Y');
    if (!isEmpty(objTrip.sdate) && bSchedule) {
      objItem.sdate = itemDate;
      objItem.edate = itemDate;
    }
    objItem.day = nDaySelected;
    objItem.link = arrSearchResults[nSelectedItemIndex].link || '';
    objItem.imgurl = arrSearchResults[nSelectedItemIndex].imgurl || '';
    objItem.weburl = arrSearchResults[nSelectedItemIndex].weburl || '';
    objItem.data_source =
        arrSearchResults[nSelectedItemIndex].data_source || '';
    objTrip.saveItem(objItem);
    showTripItemsOnmap();
  }
}

/**
 * Save edited Item info.
 * @param {number} index Index of item.
 */
function saveEditItem(index) {
  if (_gel('itemDesp').value.length > 200) {
    var message = _gel('wrngmsg');
    message.style.visibility = 'visible';
    message.innerHTML = prefs.getMsg('desc_error_message');
    return;
  }
  var objTrip = JGulliverData.getCurrentTrip();
  var itemName, itemDesp, itemDay, itemSDate, itemFDate;

  if (_gel('itemName').value != '')
    itemName = _gel('itemName').value;
  else {
    _gel('wrngmsg').innerHTML = prefs.getMsg('field_empty');
    _gel('wrngmsg').style.display = 'block';
    _gel('itemName').focus();
    return;
  }

  if (_gel('itemDesp').value != '')
    itemDesp = _gel('itemDesp').value;
  else {
    _gel('wrngmsg').innerHTML = prefs.getMsg('field_empty');
    _gel('wrngmsg').style.display = 'block';
    _gel('itemDesp').focus();
    return;
  }

  if (_gel('unscheduleCheck').checked) {
    itemSDate = '';
    itemFDate = '';
    itemDay = 0;
  } else {
    if (!isEmpty(objTrip.sdate)) {
      itemDay = 0;
      itemFDate = itemSDate =
          _gel('daysSelect')[_gel('daysSelect').selectedIndex].value;
    } else {
      itemDay = _gel('daysSelect')[_gel('daysSelect').selectedIndex].value;
      itemFDate = itemSDate = '';
    }
  }
  itemDesp = _esc(itemDesp);
  hideDialog();
  objTrip.updateItemDetails(index,
                            itemName,
                            itemDesp,
                            itemDay,
                            itemSDate,
                            itemFDate
                            );
}

/**
 * Function to save newley created item.
 */
function saveNewItem() {
  if (_gel('itemDescription').value.length > 200) {
    var message = _gel('wrngmsg');
    message.style.visibility = 'visible';
    message.innerHTML = prefs.getMsg('desc_error_message');
    return;
  }
  hideCalender();
  var itemname = _gel('itemName').value;
  var itemdescription = _gel('itemDescription').value;
  var date;
  var message = _gel('wrngmsg');
  if (_gel('startdate')) {
    date = _gel('startdate').value;
  }
  if (itemname == '' || itemdescription == '') {
    message.style.visibility = 'visible';
    message.innerHTML = prefs.getMsg('field_empty');
  } else if (_gel('dateradio').checked && date == prefs.getMsg('unspecified')) {
    message.style.visibility = 'visible';
    message.innerHTML = prefs.getMsg('date_empty');
  } else {
    addItemDate();
  }
}


/**
 * Executes when save date values for a trip.
 */
function saveTripDates() {
  var idWarningMsg = _gel('wrngmsg');
  var strDays = _gel('editDaysBox').value;
  if (strDays.strip() == '') {
    return;
  }
  var days = parseInt(strDays, 10);
  if (days <= 0 || days == Number.NaN) {
    if (idWarningMsg) {
      idWarningMsg.innerHTML = prefs.getMsg('invalid_duration1');
      idWarningMsg.style.visibility = 'visible';
    }
    return;
  }
  if (days > MAX_TRIP_DURATION) {
    if (idWarningMsg) {
      idWarningMsg.innerHTML = prefs.getMsg('duration_limit_exceeds');
      idWarningMsg.style.visibility = 'visible';
    }
    return;
  }
  var sdate = _gel('startDate').value;
  var edate = _gel('endDate').value;
  var objTrip = JGulliverData.getCurrentTrip();
  if (objTrip.sdate || objTrip.edate) {
    if (!sdate || !edate) {
      idWarningMsg.innerHTML = prefs.getMsg('no_empty_dates');
      idWarningMsg.style.visibility = 'visible';
      return;
    }
  }

  if (!isEmpty(sdate) && !isEmpty(edate)) {
    var curdate = new Date();
    curdate = getDateString(curdate);
    var dateDiff = getDateDiff(curdate, sdate);
    if (dateDiff >= 0) {
      idWarningMsg.style.visibility = 'hidden';
    } else {
      idWarningMsg.innerHTML = prefs.getMsg('date_expired');
      idWarningMsg.style.visibility = 'visible';
      return;
    }
    if ((sdate != objTrip.sdate) ||
        (edate != objTrip.edate) || (days != objTrip.duration))
      objTrip.updateDates(sdate, edate, days);
  } else if (!isEmpty(objTrip.sdate) && !isEmpty(objTrip.edate)) {
    edate = addDaysToDate(objTrip.sdate, days - 1, '%m/%d/%Y');
    objTrip.updateDates(objTrip.sdate, edate, days);
  } else if (days != objTrip.duration) {
    objTrip.updateDuration(days);
  }
  hideViewDateDialogBox();
}

/**
 * It adds item to current trip.
 * @param {string} id id of selected item of search result.
 */
function addItem(id) {
  // Close if any popup window is here opened.
  closeInfoWindow();
  strSelectedItemId = id;

  // id is having 10 characters + index of item.
  var index = parseInt(id.substr(10), 10);
  var title = arrSearchResults[index].name;
  title = (title.length > 21) ? title.substr(0, 21) + ' ...' : title;
  showAddItemDialog(title);
}

/**
 * Delete the item at specified index.
 * @param {number} index index of trip item.
 */
function deleteSelectedItem(index) {
  hideDialog();
  var objTrip = JGulliverData.getCurrentTrip();
  objTrip.deleteItem(index);
}

/**
 * This function will be used to change the trip location from canvas view.
 */
function changeTripLocation() {
  var idWarningMsg = _gel('wrngmsg');
  var strLocation = _gel('txtLocation').value;
  if (strLocation.strip() != '') {
    var validLocation = isNumeric(strLocation);
    if (validLocation) {
      idWarningMsg.innerHTML = prefs.getMsg('enter_valid_loc');
      idWarningMsg.style.visibility = 'visible';
    } else {
      if (strLocation != JGulliverData.getCurrentTrip().loc)
        showAddress(strLocation, 0);
      else
        hideDialog();
    }
  } else {
    idWarningMsg.innerHTML = prefs.getMsg('enter_loc');
    idWarningMsg.style.visibility = 'visible';
  }
}

/**
 * Close action menu if already open.
 * @param {object} event the click event.
 */
function closeActionMenu(event) {
  event = event || window.event;
  var id = event['target'] ? event['target']['id'] : event['srcElement']['id'];
  if (id == 'menuAction' || id == 'menuImg')
    return;

  var tableBox = _gel('table-box');
  if (tableBox && tableBox.style.display == 'block') {
    tableBox.style.display = 'none';
  }
}

/**
 * Registers keyup event.
 * @param {string} strId The element id.
 */
function addKeyListener(strId) {
  if (window.addEventListener) {
    _gel(strId).addEventListener('keyup', handleKeyEvent, false);
  } else {
    _gel(strId).attachEvent('onkeyup', handleKeyEvent);
  }
}

/**
 * Handles key events.
 * @param {object} event The keyup event.
 */
function handleKeyEvent(event) {
  if (!event) event = window.event;
  var id = event['target'] ? event['target']['id'] : event['srcElement']['id'];
  switch (event.keyCode) {
    case 13:
      if (id == 'search-box') {
        searchMapContent(1, null, false);
      }
      else if (id == 'searchTripText') {
        fillForSortedRecords(true);
      }
      else if (id == 'tripNameEdit') {
        updateTripName();
      }
      else if (id == 'create-location') {
        validateTrip();
      } else if (id == 'txtLocation') {
        changeTripLocation();
      }
      break;
    case 27:
      hideDialog();
      break;
  }
}

/**
 * Disable the days box in add trip days dialog.
 */
function disableDays() {
  var id = _gel('days_id');
  if (id) {
    id.disabled = true;
  }
  if (!isEmpty(_gel('startdate'))) {
    _gel('startdate').value = prefs.getMsg('unspecified');
  }
  hideCalender();
}

/**
 * Enable the days box in add trip days dialog.
 */
function enableDays() {
  var id = _gel('days_id');
  if (id) {
    id.disabled = false;
  }
}

/**
 * Executes while select scheduled check box in calendar.
 */
function selectAsScheduled() {
  // Below mentioned identifiers are defined in datepicker_calender.js file
  var date = _gel('selecteddate').innerHTML;
  date = date.replace(/&nbsp;/g, '').replace(/ /g, '');
  var strSelectedTd = 'date' + date;
  var tdElement = _gel(strSelectedTd);
  if (tdElement) {
    var onclickAttribs = tdElement.attributes.getNamedItem('onclick').value;
    onclickAttribs = onclickAttribs.replace(/updateDateField\(/, '');
    var index = onclickAttribs.indexOf(');');
    var clsName = '';
    if (index != -1) {
      clsName = onclickAttribs.substr(index + 18);
      clsName = clsName.substr(0, clsName.length - 2);
      onclickAttribs = onclickAttribs.substr(0, index);
    }
    var params = onclickAttribs.replace(/'/g, '').split(',');
    updateDateField(params[0], params[1], params[2], params[3], params[4]);
    tdElement.className = clsName;
  }
}

/**
 * Executes while select unscheduled check box in calendar.
 */
function selectAsUnscheduled() {
  // Below mentioned identifiers are defined in datepicker_calender.js file
  var highlightedTd = _gel(selectedDate);
  if (highlightedTd) {
    if (highlightedTd.className == 'dpDayHighlightTDSelected') {
      highlightedTd.className = 'dpDayHighlightTD';
    } else if (highlightedTd.className == 'dpselectedTD') {
      highlightedTd.className = 'dpTD';
    }
  }
}

/**
 * Executes when scrolls item down or up.
 */
function onScroll() {
  if (strSelectedItemId.indexOf('scheduledItem') == -1)
    closeInfoWindow();
}

/**
 * Function for star over the rating.
 * @param {number} val Value of the star selected.
 */
function fStarOver(val) {
  for (var i = 1; i <= MAX_RATING; i++) {
    if (i <= val)
      _gel('img' + i).src = STAR_ON_IMG;
    else
      _gel('img' + i).src = STAR_OFF_IMG;
  }
}

/**
 * Function for onmouseout of the rating.
 */
function fStarOut() {
  for (var i = 1; i <= MAX_RATING; i++) {
    if (i <= JGulliverData.getCurrentTrip().rating)
      _gel('img' + i).src = STAR_ON_IMG;
    else
      _gel('img' + i).src = STAR_OFF_IMG;
  }
}

/**
 * Takes action on click of dropdown value.
 * @param {number} optionid Index of option.
 */
function onTripAction(optionid) {
  switch (optionid) {
    case 'option1':
      showLocationDialog();
      break;
    case 'option2':
      createDeleteTripBox();
      break;
  }
  _gel('table-box').style.display = 'none';
}

/**
 * Function for update trip name.
 */
function updateTripName() {
  var objTrip = JGulliverData.getCurrentTrip();
  var strName = _gel('tripNameEdit').value.strip();
  if (strName == '') {
    return;
  }
  if (strName != objTrip.name) {
    var gulliverData = JGulliverData.getInstance();
    var counter = gulliverData.arrTripData.length;
    var count = 0;
    for (var i = 0; i < counter; i++) {
      if (strName.toLowerCase() == gulliverData.arrTripData[i].name.substr(0,
                     strName.length).toLowerCase()) {
        count++;
      }
    }
    if (count != 0) {
      strName = strName + count;
    }
    objTrip.updateName(strName);
  }
  hideDialog();
}

/**
 * Explores the trip at specified index.
 * @param {string} id The trip id.
 */
function exploreTrip(id) {
  var gulliverData = JGulliverData.getInstance();
  var nIndex = gulliverData.getTripIndex(id);
  if (nIndex != -1) {
    gulliverData.nSelectedTripIndex = nIndex;
    var objTrip = JGulliverData.getCurrentTrip();
    gCurrentTripId = objTrip.id;
    objTrip.arrItem = [];
    callbackCreateTrip();
  }
}

/**
 * Change the rating.
 * @param {number} rating Rating of the trip.
 */
function changeRating(rating) {
  var objTrip = JGulliverData.getCurrentTrip();
  if (objTrip.rating != rating) {
    var tempRating = objTrip.rating;
    objTrip.rating = rating;
    objTrip.updateRating(tempRating);
  }
}

/**
 * Executes when clicks on cancel while creating trip.
 */
function cancelCreateTrip() {
  hideDialog();
  var gulliverData = JGulliverData.getInstance();
  if (gulliverData.arrTripData.length == 0) {
    gulliverData.displayTrips();
  }
}

/**
 * @fileoverview Code to handle lonely planet data.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Search the points of interests according to lonely planet api.
 * @param {string} target Search parameter.
 */
function searchPOI(target) {
 _gel('loading-container').innerHTML = LOADING_TPL;
  itemsContainer = [];
  _gel('search-box').value = target;
  _gel('search-box').className = '';
  var trip = JGulliverData.getCurrentTrip();
  var mapLocation = trip.loc;
  var url = 'http://apigateway.lonelyplanet.com/api/places?name=' +
            _esc(mapLocation);
  var params = {};
  params[gadgets.io.RequestParameters.AUTHORIZATION] =
      gadgets.io.AuthorizationType.OAUTH;
  params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = 'lp-api-gateway';
  params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = 'never';
  params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 1;
  params[gadgets.io.RequestParameters.CONTENT_TYPE] =
      gadgets.io.ContentType.DOM;
  gadgets.io.makeRequest(url, callbackSearchPOI, params);
  timerLonelyCallback = window.setTimeout(showLPAuthorizationError, 15000);
}
/**
 * To show LP aughorization error.
 */
function showLPAuthorizationError() {
  var message = 'Authentication Error. ' +
                '<a href="javascript:window.location.reload();">Try Again</a>';
  _gel('loading-container').innerHTML = '';
  _gel('serverMsg').innerHTML = '';
  _gel('msgContainer').style.display = 'block';
  var html = ACTION_MSG_TPL;
  html = html.replace(/%MESSAGE%/, message);
  timerMsg.createTimerMessage(html, 20);
}

/**
 * Callback for searching the latitude and longitude.
 * @param {Object} data Response object.
 */
function callbackSearchPOI(data) {
  clearTimeout(timerLonelyCallback);
  var north, south, east, west;
  var trip = JGulliverData.getCurrentTrip();
  var mapLocation = trip.loc;
  if (data.text) {
    var track = false;
    var xmlDoc = domParser(data);
    if (xmlDoc) {
      var nodeData = '';
      var items = xmlDoc.getElementsByTagName('place');
      if (items && items.length) {
        for (var i = 0, j = items.length; i < j; i++) {
          var shortName = xmlDoc.getElementsByTagName('short-name')[i];
          if (shortName) {
            shortName = shortName.childNodes[0].nodeValue.toLowerCase();
            if (shortName == mapLocation.toLowerCase()) {
              // Used to check whether the results matches the map location
              // otherwise it will pick the first result.
              track = true;
              var nodeData = xmlDoc.getElementsByTagName('north-latitude')[i];
              if (nodeData && nodeData.childNodes[0]) {
                north = nodeData.childNodes[0].nodeValue;
              }
              nodeData = xmlDoc.getElementsByTagName('south-latitude')[i];
              if (nodeData && nodeData.childNodes[0]) {
                south = nodeData.childNodes[0].nodeValue;
              }
              nodeData = xmlDoc.getElementsByTagName('east-longitude')[i];
              if (nodeData && nodeData.childNodes[0]) {
                east = nodeData.childNodes[0].nodeValue;
              }
              nodeData = xmlDoc.getElementsByTagName('west-longitude')[i];
              if (nodeData && nodeData.childNodes[0]) {
                west = nodeData.childNodes[0].nodeValue;
              }
            }
            break;
          }
        }
        if (!track) {
          var nodeData = xmlDoc.getElementsByTagName('north-latitude')[0];
          if (nodeData && nodeData.childNodes[0]) {
            north = nodeData.childNodes[0].nodeValue;
          }
          nodeData = xmlDoc.getElementsByTagName('south-latitude')[0];
          if (nodeData && nodeData.childNodes[0]) {
            south = nodeData.childNodes[0].nodeValue;
          }
          nodeData = xmlDoc.getElementsByTagName('east-longitude')[0];
          if (nodeData && nodeData.childNodes[0]) {
            east = nodeData.childNodes[0].nodeValue;
          }
          nodeData = xmlDoc.getElementsByTagName('west-longitude')[0];
          if (nodeData && nodeData.childNodes[0]) {
            west = nodeData.childNodes[0].nodeValue;
          }
        }
      }
    }
    // Search for the POI id according to latitudes and longitudes.
    if (north && east && west && south) {
      doLatLangLookup(north, east, west, south);
    } else {
      showDataError(prefs.getMsg('no_data_found'));
    }
  } else {
    showDataError(prefs.getMsg('not_authenticate'));
  }
}

/**
 * To show data error message.
 * @param {string} message Message content.
 */
function showDataError(message) {
  _gel('loading-container').innerHTML = '';
  _gel('serverMsg').innerHTML = '';
  _gel('msgContainer').style.display = 'block';
  var html = ACTION_MSG_TPL;
  html = html.replace(/%MESSAGE%/, message);
  timerMsg.createTimerMessage(html, 5);
}

/**
 * Searches the POI id by sending the latitude and langitude values.
 * @param {string} north North coordinates.
 * @param {string} east East coordinates.
 * @param {string} west West coordinates.
 * @param {string} south South coordinates.
 */
function doLatLangLookup(north, east, west, south) {
  var poiType = _gel('search-box').value;
  var bounds = gMap.getBounds();
  var southWest = bounds.getSouthWest();
  var northEast = bounds.getNorthEast();
  var south1 = southWest.lat();
  var west1 = southWest.lng();
  var north1 = northEast.lat();
  var east1 = northEast.lng();
  var url = 'http://apigateway.lonelyplanet.com/api/bounding_boxes/' +
            north1 + ',' + south1 + ',' + east1 + ',' + west1 +
            '/pois?poi_type=' + poiType;
  var params = {};
  params[gadgets.io.RequestParameters.AUTHORIZATION] =
      gadgets.io.AuthorizationType.OAUTH;
  params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = 'lp-api-gateway';
  params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = 'never';
  params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 1;
  gadgets.io.makeRequest(url, searchPOIId, params);
}

/**
 * To search POI id according to data.
 * @param {Object} data Response object.
 */
function searchPOIId(data) {
  _gel('search-box').style.className = '';
  _gel('map-container').style.width = '100%';
  _gel('result-section').style.display = 'none';
  _gel('resultBox').style.display = 'none';
  _gel('navBox').style.display = 'none';
  var totalItems;
  var xmlDoc = domParser(data);
  var items = xmlDoc.getElementsByTagName('poi');
  var MAX_ITEMS = 7;
  var poiData = [];
  var obj = {};
  for (var i = 0, j = items.length; i < j; i++) {
    obj = {};
    var nodeData = xmlDoc.getElementsByTagName('id')[i];
    if (nodeData && nodeData.childNodes[0]) {
      obj.id = nodeData.childNodes[0].nodeValue;
    }
    nodeData = xmlDoc.getElementsByTagName('name')[i];
    if (nodeData && nodeData.childNodes[0]) {
      obj.name = nodeData.childNodes[0].nodeValue;
    }
    nodeData = xmlDoc.getElementsByTagName('digital-latitude')[i];
    if (nodeData && nodeData.childNodes[0]) {
      obj.lat = nodeData.childNodes[0].nodeValue;
    }

    nodeData = xmlDoc.getElementsByTagName('digital-longitude')[i];
    if (nodeData && nodeData.childNodes[0]) {
      obj.lng = nodeData.childNodes[0].nodeValue;
    }
    poiData.push(obj);
    arrSearchResults[i] = obj;
  }
  addMarkersPOI();
  _gel('loading-container').innerHTML = '';
}

/**
 * Add markers on the poi result items.
 */
function addMarkersPOI() {
  var objTrip = JGulliverData.getCurrentTrip();
  gMap.clearOverlays();
  if (_gel('resultBox')) {
    _gel('resultBox').innerHTML = '';
    itemsContainer = [];
  }
  //var bounds = new GLatLngBounds();
  if (arrSearchResults.length) {
    var counter = 0;
    var max_result = arrSearchResults.length;
     for (var i = 0, j = max_result; i < j; i++, counter++) {
      var start = new GLatLng(arrSearchResults[i].lat, arrSearchResults[i].lng);
      var iconUrl = 'http://www.google.com/mapfiles/marker.png';
      addCustomMarker(i, start, iconUrl, arrSearchResults[i].id);
    }
  }
}

/**
 * Search the points of interests according to lonely planet api.
 * @param {string} id Search parameter.
 */
function doPoiByIdLookup(id) {
  itemsContainer = [];
  var poiId = id;
  var url = 'http://apigateway.lonelyplanet.com/api/pois/' + poiId;
  var params = {};
  params[gadgets.io.RequestParameters.AUTHORIZATION] =
      gadgets.io.AuthorizationType.OAUTH;
  params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = 'lp-api-gateway';
  params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = 'never';
  params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 1;
  gadgets.io.makeRequest(url, displayPingResult, params);
}

/**
 * To display ping results.
 * @param {Object} data Response object.
 */
function displayPingResult(data) {
  var xmlDoc = domParser(data);
  var items = xmlDoc.getElementsByTagName('poi');
  var obj = {};
  for (var i = 0, j = items.length; i < j; i++) {
    obj = {};
    obj.item_owner = gViewer;
    var result = xmlDoc.getElementsByTagName('name')[i];
    if (result && result.childNodes[0]) {
      obj.name = result.childNodes[0].nodeValue;
    }
    result = xmlDoc.getElementsByTagName('address')[i];
    if (result && result.childNodes[0]) {
      var street = result.getElementsByTagName('street')[0] || '';
      street = street && street.firstChild && street.firstChild.nodeValue || '';
      var locality = result.getElementsByTagName('locality')[0] || '';
      locality = locality &&
                 locality.firstChild && locality.firstChild.nodeValue || '';
      totAddress = street + ' ' + locality;
      obj.address = totAddress;
    }
    //todo
    result = xmlDoc.getElementsByTagName('urls')[i];
    if (result && result.childNodes[0]) {
      var url = result.getElementsByTagName('url')[0] || '';
      obj.weburl = url && url.firstChild && url.firstChild.nodeValue || '';
      obj.weburl = '<a style="cursor:pointer;color:green;" ' +
          'target=_blank href=http://' + obj.weburl + '>' + obj.weburl + '</a>';
      obj.link = obj.weburl;
    }
    result = xmlDoc.getElementsByTagName('review')[i];
    if (result && result.childNodes[0]) {
      obj.review = result.childNodes[0].nodeValue;
    }
    result = xmlDoc.getElementsByTagName('digital-latitude')[i];
    if (result && result.childNodes[0]) {
      obj.lat = result.childNodes[0].nodeValue;
    }

    result = xmlDoc.getElementsByTagName('digital-longitude')[i];
    if (result && result.childNodes[0]) {
      obj.lng = result.childNodes[0].nodeValue;
    }
    obj.data_source = 'lonely';
    arrSearchResults[markerIndex] = obj;
  }
}

/**
 * @fileoverview Code related to opensocial trip data.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Sends viewer request.
 */
function getViewer() {
  var reqViewer = opensocial.newDataRequest();
  reqViewer.add(reqViewer.newFetchPersonRequest('VIEWER'), 'viewer');
  reqViewer.add(reqViewer.newFetchPeopleRequest(opensocial.newIdSpec({
                                    'userId': 'VIEWER',
                                    'groupId': 'FRIENDS'
                                  })), 'groupPeople');
  reqViewer.send(handleViewRequest);
}

/**
 * Call back for list of friends.
 * @param {Object} response Response object.
 */
function handleViewRequest(response) {
  if (!gOpenSocial.viewer) {
    gOpenSocial.viewer = response.get('viewer').getData();
    gViewer = gOpenSocial.viewer.getDisplayName();
  }
}

/**
 * Find the list of friends with whom the application is being shared.
 */
function loadFriends() {
  var req = opensocial.newDataRequest();
  if (wave && wave.isInWaveContainer()) {
    wave.setStateCallback(waveParticipants);
  } else if (_unesc(_args()['synd']) == 'ig') {
    req.add(req.newFetchPersonRequest('VIEWER'), 'viewer');
    req.add(req.newFetchPeopleRequest(opensocial.newIdSpec({
                                      'userId': 'VIEWER',
                                      'groupId': 'FRIENDS'
                                    })), 'groupPeople');
  } else {
    var id = opensocial.newIdSpec({'userId': 'OWNER', 'groupId': 'admins'});
    req.add(req.newFetchPeopleRequest(id), 'groupPeople');
    getViewer();
  }
  req.send(handleGroupRequest);
}

/**
 * Call back for list of friends.
 * @param {Object} response Response object.
 */
function handleGroupRequest(response) {
  var gulliverData = JGulliverData.getInstance();
  if (!response.hadError()) {
    if (!gOpenSocial.viewer) {
      gOpenSocial.viewer = response.get('viewer').getData();
      gViewer = gOpenSocial.viewer.getDisplayName();
    }
    var data = [];
    if (_unesc(_args()['synd']) == 'ig') {
      data.push(gViewer);
      if (!gOpenSocial.viewerFriends){
        gOpenSocial.viewerFriends = response.get('groupPeople').getData();
      }
      if (gOpenSocial.viewerFriends) {
        gOpenSocial.viewerFriends.each(function(person) {
          data.push(person.getDisplayName());
        });
      }
    } else {
      data = response.get('groupPeople').getData().asArray();
     }
    gulliverData.fetchAllTrips(data);
  }
}

/**
 * List of friends for wave container.
 */
function waveParticipants() {
  var friendsList = [];
  var participants = wave.getParticipants();
  var groupData = participants;
  var numPeople = groupData.length;
  gViewer = wave.getViewer().getDisplayName();
  for (var k = 0; k < numPeople; ++k) {
    friendsList.push('\'' + groupData[k].getDisplayName() + '\'');
  }
  friendsList = friendsList.join(',');
  var gulliverData = JGulliverData.getInstance();
  gulliverData.nSelectedTripIndex = -1;
  gulliverData.fetchAllTrips(friendsList);
}

/**
 * Activity message display.
 * @param {string} data Data for error message.
 */
function onActivityPosted(data) {
  var objTrip = JGulliverData.getCurrentTrip();
  var objItem = objTrip.arrItem[gPopUpIndex];
  _gel('msgContainer').style.display = 'block';
  var html = ACTION_MSG_TPL;
  if (data.hadError()) {
    var message = (data.getErrorCode() ==
        opensocial.ResponseItem.Error.LIMIT_EXCEEDED) ?
        prefs.getMsg('limit_exceed_error') :
        message = prefs.getMsg('activity_error');
    html = html.replace(/%MESSAGE%/, message);
  } else {
    html = html.replace(/%MESSAGE%/, prefs.getMsg('activity'));
    if (gPopUpIndex > -1) {
      if (_gel('item_thumb_up').checked) {
        objItem.Item_thumb_up = objItem.Item_thumb_up + 1;
      } else {
        objItem.Item_thumb_down = objItem.Item_thumb_down + 1;
      }
     _gel('unscheduleItemBox').innerHTML = '';
     createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);
     objTrip.showAllItems();
     strSelectedItemId = '';
    } else {
       _gel('thumb').style.display = '';
      if (_gel('thumb_up').checked) {
      objTrip.thumb_up = objTrip.thumb_up + 1;
      _gel('thum_up').innerHTML = objTrip.thumb_up;
      } else {
      objTrip.thumb_down = objTrip.thumb_down + 1;
      _gel('thum_down').innerHTML = objTrip.thumb_down;
      }
    }
  }
  timerMsg.createTimerMessage(html, 5);
  closeInfoWindow();
  hideViewDateDialogBox();
}

/**
 * Posting activity.
 * @param {number} index Index of trip item.
 */
function postActivity(index) {
  gPopUpIndex = index;
  hideViewDateDialogBox();
  var objTrip = JGulliverData.getCurrentTrip();
  var objItem = objTrip.arrItem[index];
  var data = {};
  var params = {};
  var thumb_up = objTrip.thumb_up;
  var thumb_down = objTrip.thumb_down;
  if (!objTrip.thumb_up) {
    objTrip.thumb_up = 0;
  }
  if (!objTrip.thumb_down) {
    objTrip.thumb_down = 0;
  }
  var thumbsUP;
  if (gPopUpIndex > -1) {
    thumb_up = objItem.Item_thumb_up;
    thumb_down = objItem.Item_thumb_down;
    if (_gel('item_thumb_up').checked) {
      thumb_up = objItem.Item_thumb_up + 1;
    } else {
      thumb_down = objItem.Item_thumb_down + 1;
    }
    thumbsUP = _gel('item_thumb_up').checked ?
               prefs.getMsg('thumbs_up') :
               prefs.getMsg('thumbs_down');
  } else {
     if (_gel('thumb_up').checked) {
      thumb_up = objTrip.thumb_up + 1;
    } else {
      thumb_down = objTrip.thumb_down + 1;
    }
   thumbsUP = _gel('thumb_up').checked ? prefs.getMsg('thumbs_up') :
                                         prefs.getMsg('thumbs_down');
  }
  var body = _gel('addVote').value;
  var title = thumbsUP + ' ' + prefs.getMsg('thumbs_title') + '<span><b>' +
              ' ' + objTrip.name + '</b></span>';
  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
  var postdata = gadgets.io.encodeValues({
      'user_id': objTrip.ownerId,
      'trip_id': objTrip.id,
      'thumb_up': thumb_up,
      'thumb_down': thumb_down
    });

  var thumb_url = '/saveThumb'
  if (index > -1) {
    objItem =
      postdata = gadgets.io.encodeValues({
        'item_id': objItem.id,
        'Item_thumb_up': thumb_up,
        'Item_thumb_down': thumb_down
      });
    thumb_url = '/saveItemThumb'
    title = thumbsUP + ' ' + prefs.getMsg('thumbs_item_titled') +
            '&nbsp;&nbsp;<span><b>' + objTrip.arrItem[index].name +
            '</b></span>&nbsp;&nbsp;' +
            prefs.getMsg('thumbs_item_trip_titled') +
            '&nbsp;<span><b>' + objTrip.name + '</b></span>';
  }
  params[gadgets.io.RequestParameters.POST_DATA] = postdata;
  var url = BASE_URL + thumb_url;
  gadgets.io.makeRequest(url, function(response) {
    var responseData = gadgets.json.parse(response.data);
    _gel('msgContainer').style.display = 'block';
    var html = ACTION_MSG_TPL;
    if (responseData.error == enDBTransaction.ERROR) {
      html = html.replace(/%MESSAGE%/, prefs.getMsg('activity_error'));
      timerMsg.createTimerMessage(html, 10);
      return false;
    } else {
      data[opensocial.Activity.Field.TITLE] = title;
      data[opensocial.Activity.Field.BODY] = body;
      data[opensocial.Activity.Field.BODY_ID] = body;
      var activity = opensocial.newActivity(data);
      opensocial.requestCreateActivity(
      activity,
      opensocial.CreateActivityPriority.HIGH,
      onActivityPosted);
    }
  }, params);
}

function activityPostingCheck() {
  var container = (isIGoogle == 'ig') ? 'iGoogle' : 'Wave'
  var message = 'Activity posting is not available on ' + container;
  _gel('loading-container').innerHTML = '';
  _gel('serverMsg').innerHTML = '';
  _gel('msgContainer').style.display = 'block';
  var html = ACTION_MSG_TPL;
  html = html.replace(/%MESSAGE%/, message);
  timerMsg.createTimerMessage(html, 10);
}

/**
 * Dialog for add your vote.
 */
function addYourVote() {
  if (wave && wave.isInWaveContainer()) {
    activityPostingCheck();
  } else {
    // Close if any popup window is there.
    closeInfoWindow();
    var addVoteInfo = '<div style="color:#000;width:380px;"><div ' +
        '><table cellpadding="0" cellspacing="0" ' +
        'style="font-size:14px;font-weight:bold;height:25px;" width="100%" ' +
        'class="dialog-title"><tr><td align="left">' +
        prefs.getMsg('your_vote') + '</td><td align="right">' +
        '<span class="link" onclick="javascript:hideViewDateDialogBox();">' +
        '<img border="0" style="width:15px;padding-left:1px;" ' +
        'src="' + FILE_SERVER + '/images/close_promo.gif"/>' +
        '</span></td></tr></table></div><div style="padding:8px 0 5px 5px;">' +
        prefs.getMsg('comments') + '</div><div style="padding:0 5px;">' +
        '<textarea cols="31" name="comment"' +
        ' rows="3" id="addVote"></textarea></div>' +
        '<div style="padding:0 5px;"><input type="radio"' +
        ' id="thumb_up" name="thumb_up" value="1" checked/>' +
        prefs.getMsg('thumbs_up') +
        '</div><div style="padding:0 5px;">' +
        '<input type="radio" name="thumb_up" value="0"/>' +
        prefs.getMsg('thumbs_down') +
        '</div><div style="padding:5px 5px;"><table><tr><td align="left">' +
        '<input type="button" value="' + prefs.getMsg('vote') +
        '" onclick="postActivity(-1)">' +
        '</td><td align="right"><input type="button" value="' +
        prefs.getMsg('cancel') +
        '" onclick="hideViewDateDialogBox()"></td></tr></table></div></div>';
    showDialog(addVoteInfo);
    _gel('addVote').focus();
  }
}

/**
* Shows the popup window on click of thumb image.
* @param {number} index Position of div.
*/
function addVotePopUP(index) {
  if (wave && wave.isInWaveContainer()) {
    activityPostingCheck();
  } else {
    closeInfoWindow();
    var itemInfo;
    var html = [];
    var addVoteInfo = '<div style="color:#000;width:380px;"><div>' +
        '<table cellpadding="0" cellspacing="0" ' +
        'style="font-size:14px;font-weight:bold;height:25px;" width="100%" ' +
        'class="dialog-title-send"><tr><td align="left">' +
        prefs.getMsg('your_vote') + '</td><td align="right">' +
        '<span class="link" onclick="javascript:hideViewDateDialogBox();">' +
        '<img border="0" style="width:15px;padding-left:1px;"' +
        'src="' + FILE_SERVER + '/images/close_promo.gif"/></span>' +
        '</td></tr></table></div><div style="padding:8px 0 5px 5px;">' +
        prefs.getMsg('comments') + '</div><div style="padding:0 5px;">' +
        '<textarea cols="31" name="comment" rows="3" id="addVote"></textarea>' +
        '</div><div style="padding:0 5px;"><input type="radio" ' +
        'id="item_thumb_up" name="thumb_up" value="1" checked />' +
        prefs.getMsg('thumbs_up') + '</div><div style="padding:0 5px;">' +
        '<input type="radio" name="thumb_up" value="0"/>' +
        prefs.getMsg('thumbs_down') +
        '</div><div style="padding:5px 5px;"><table><tr><td align="left">' +
        '<input type="button" value="' + prefs.getMsg('vote') +
        '" onclick="postActivity(' + index + ')">' +
        '</td><td align="right"><input type="button" value="' +
        prefs.getMsg('cancel') +
        '" onclick="hideViewDateDialogBox()"></td></tr></table></div></div>';

      html = ['<div style="border:1px solid #000;',
              'background-color:#fff;position:absolute;z-index:1000;',
              'padding-bottom:5px;width:267px;font-size:12px;">',
               addVoteInfo, '</div>'];
    showDialog(addVoteInfo);
    _gel('addVote').focus();
  }
}

/**
 * @fileoverview Code to handle calendar related functionality.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Function to Clear start date and end date.
 */
function clearDate() {
  hideCalender();
  _gel('endDate').value = '';
  _gel('startDate').value = '';
}

/**
 * Function to fill trip dates.
 */
function fillTripDates() {
  tripdates = [];
  var objTrip = JGulliverData.getCurrentTrip();
  for (var i = 0; i < objTrip.duration; i++) {
    tripdates.push(addDaysToDate(objTrip.sdate, i, '%m/%d/%Y'));
  }
}

/**
 * Function to fill calendar on dialog.
 */
function fillcalendar() {
  fillTripDates();
  var strStartDate = tripdates[0];
  var firstdate = strStartDate.split('/');
  var month = firstdate[0] - 1;
  var wholedate = firstdate[1] + '&nbsp;' +
      monthArrayLong[month] + '&nbsp;' + firstdate[2];
  _gel('selecteddate').innerHTML = wholedate;
  strStartDate = firstdate[0] + '/' + firstdate[1] + '/' + firstdate[2];
  displayDatePicker('ADate', '', 0, strStartDate);
}

/**
 * Function to add selected date to trip dates.
 */
function addItemDate() {
  var objTrip = JGulliverData.getCurrentTrip();
  var bSchedule = _gel('dateradio') ? _gel('dateradio').checked : false;
  var daySelected = 0;
  if (bSchedule) {
  if (_gel('selecteddate')) {
    var date2 = new Date(_gel('selecteddate').innerHTML);
    var date1 = new Date(objTrip.sdate);
    var oneDay = 24 * 60 * 60 * 1000;
    daySelected = Math.ceil((date2.getTime() - date1.getTime()) / oneDay) + 1;
  } else if (_gel('days_id')) {
    daySelected = _gel('days_id').selectedIndex + 1;
  } else if (_gel('startdate')) {
     var date2 = new Date(_gel('startdate').value);
     var date1 = new Date(objTrip.sdate);
     var oneDay = 24 * 60 * 60 * 1000;
     daySelected = Math.ceil((date2.getTime() - date1.getTime()) / oneDay) + 1;
  } else if (currentdate == undefined) {
      _gel('wrngmsg').style.visibility = 'visible';
      _gel('wrngmsg').innerHTML = prefs.getMsg('select_date');
      return;
    } else {
      var nDays = getDateDiff(objTrip.sdate, currentdate);
      var nDays1 = getDateDiff(currentdate, objTrip.edate);
      if (nDays < 0 || nDays1 < 0) {
        _gel('wrngmsg').style.visibility = 'visible';
        _gel('wrngmsg').innerHTML = prefs.getMsg('date_outof_range');
        return;
      }
   }
  }
  var nSelectedItemIndex = -1;
  if (strSelectedItemId.indexOf('resultItem') != -1) {
    nSelectedItemIndex = parseInt(strSelectedItemId.substr(10), 10);
    addNewItem(nSelectedItemIndex, bSchedule, daySelected);
  } else if (strSelectedItemId.indexOf('unscheduledItem') != -1) {
    if (bSchedule) {
      nSelectedItemIndex = parseInt(strSelectedItemId.substr(15), 10);
      if (nSelectedItemIndex >= 0) {
        if (!isEmpty(objTrip.sdate)){
          objTrip.updateItemDates(nSelectedItemIndex, currentdate);
        } else
          objTrip.updateItemDays(nSelectedItemIndex, daySelected);
        }
      }
  } else {
    // to be used for creating user defined items.
    var itemDescription = _gel('itemDescription').value;
    var itemName = _gel('itemName').value;
    var itemOwner = gViewer;
    var sdate = '';
    var edate = '';
    if (!isEmpty(objTrip.sdate)) {
      var date = _gel('startdate').value;
      sdate = date;
      edate = date;
    }
    var day = daySelected;
    getLatLangLocation(itemDescription, itemName, itemOwner, sdate, edate, day);
  }
  strSelectedItemId = '';
  hideDialogView();
}

/**
 * Executes when changes the value of duration in date dialog.
 * @param {object} obj Element id.
 */
function onUpdateDuration(obj) {
  var strDuration = obj.value;
  var idWarningMsg = _gel('wrngmsg');
  if (strDuration.strip() == '' || isNumeric(strDuration) == false) {
    if (idWarningMsg) {
      idWarningMsg.innerHTML = prefs.getMsg('invalid_duration1');
      idWarningMsg.style.visibility = 'visible';
    }
    return;
  }
  var nDuration = parseInt(strDuration, 10);
  var strStartDate = _gel('startDate').value;
  if (isEmpty(strStartDate)) {
    _gel('endDate').value = prefs.getMsg('unspecified');
  } else {
    _gel('endDate').value =
        addDaysToDate(strStartDate, (nDuration - 1), '%m/%d/%Y');
  }
  if (idWarningMsg) {
    if (nDuration > JGulliverData.getCurrentTrip().duration) {
      idWarningMsg.style.visibility = 'hidden';
      idWarningMsg.innerHTML = prefs.getMsg('invalid_duration');
    } else {
      idWarningMsg.style.visibility = 'visible';
    }
  }
}

/**
 * Enable unschedule radio button
 * Disable days radio button and list box
 */
function unscheduleRadioButton() {
  _gel('daysSelect').disabled = true;
  _gel('unscheduleCheck').checked = true;
  _gel('daysCheck').checked = false;
}

/**
 * Disable unschedule radio button
 * Enable days radio button and list box
 */
function daysRadioButton() {
  _gel('daysSelect').disabled = false;
  _gel('unscheduleCheck').checked = false;
  _gel('daysCheck').checked = true;
}

/**
 * @fileoverview Library of all UI methods of Gulliver Gadget.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * It returns the html string for popup of an item.
 * @param {number} index Index of item.
 * @param {boolean} flag Flag to determine which template to choose.
 * @param {boolean} isBlue Flag to determine, whether dat is from lonely planet.
 * @return {string} itemInfo the generated html as string.
 */
function getPopupHtml(index, flag, isBlue) {
  var objTrip = JGulliverData.getCurrentTrip();
  var dataSource = isBlue ? objTrip.arrItem[index] : arrSearchResults[index]
  var itemInfo = flag ? ITEM_INFO_DRAG_TPL : ITEM_INFO_TPL;
  itemInfo = itemInfo.replace(/%INDEX%/g, index);
  var icon = String.fromCharCode('A'.charCodeAt(0) + index);
  strSelectedItemId = 'resultPopup' + index;
  // Overview url
  var url = dataSource.link + '&dtab=0&oi=';
  itemInfo = itemInfo.replace(/%OVERVIEW_URL%/g, url);

  // Detail url
  url = dataSource.link + '&dtab=1&oi=md_structdata';
  itemInfo = itemInfo.replace(/%DETAIL_URL%/g, url);

  // Reviews url
  var review = '';
  review = dataSource.review || '';
  var pattern = '&#160;&#160;';
  // Check for empty review.
  if (review && pattern != review) {
    itemInfo = itemInfo.replace(/%REVIEWS%/g, review)
        .replace(/%REVIEWS_LABEL%/g, prefs.getMsg('review'))
        .replace(/%HEIGHT%/g, '92px');
  } else {
    itemInfo = itemInfo.replace(/%REVIEWS%/g, '')
        .replace(/%REVIEWS_LABEL%/g, '')
        .replace(/%HEIGHT%/g, '0');
  }

  itemInfo = itemInfo.replace(/%REVIEWS%/g, review);

  //close image
  itemInfo = itemInfo.replace(/%CLOSE_IMG%/g, '');
  var dragMe = isBlue ? '' : prefs.getMsg('dragme');
  itemInfo = itemInfo.replace(/%DRAG_MSG%/g, dragMe);
  var image = isBlue ? '' : ('<img border="0" ' +
      'src="' + FILE_SERVER + '/images/curve_arrow.png"/>');
   itemInfo = itemInfo.replace(/%DRAG_IMG%/g, image);

  // Photos and videos url
  url = dataSource.link + '&dtab=3&oi=md_photos';
  itemInfo = itemInfo.replace(/%PHOTOS_URL%/g, url);

  url = dataSource.imgurl || '';
  if (url) {
    url = '<img src="' + url + '" align="left" ' +
          'width="70" height="70" ' +
          'style="margin-right:10px;cursor:pointer;" />';
    itemInfo = itemInfo.replace(/%DISPLAY%/g, 'block');
  } else {
    url = '';
    itemInfo = itemInfo.replace(/%DISPLAY%/g, 'none');
  }
  itemInfo = itemInfo.replace(/%IMAGE%/g, url)
      .replace(/%TITLE%/g, _unesc(dataSource.name ||
                                      prefs.getMsg('no_data_found')));

  var address1 = '';
  dataSource.address = dataSource.address ||
      dataSource.location ||
      prefs.getMsg('no_address_received');
  var newLineIndex = dataSource.address.search(/<br\/>/);
  var zip = '';
  if (newLineIndex != -1) {
    zip = dataSource.address.substr(newLineIndex);
    address1 = dataSource.address.substr(0, newLineIndex);
  } else {
    address1 = dataSource.address;
  }

  if (address1 != null && address1 != undefined) {
    var address;
    if (address1.length > 50) {
      var sIndex = address1.indexOf(' ', 49);
      if (sIndex != -1) {
        address = address1.substr(0, sIndex) + '<br>';
        address += address1.substr(sIndex + 1);
      } else {
        address = address1;
      }
    } else {
      address = address1;
    }
    if (zip != '')
      address += zip;
    itemInfo = itemInfo.replace(/%CONTACT_INFO%/g, address);
  } else {
    if (zip != '')
      address += zip;
    itemInfo = itemInfo.replace(/%CONTACT_INFO%/g, '');
  }
  itemInfo = itemInfo.replace(/%MARKER%/g, icon);
  if (dataSource.weburl) {
    //_gel('web-link').style.cursor = 'pointer'
    itemInfo = itemInfo.replace(/%WEB_URL%/g, dataSource.weburl || '');
  } else {
    itemInfo = itemInfo.replace(/%WEB_URL%/g, '');
  }
  return itemInfo;
}

/**
 * Shows Add Items dialog box.
 * @param {string} itemName The name of item.
 */
function showAddItemDialog(itemName) {
  var objTrip = JGulliverData.getCurrentTrip();
  if (isEmpty(objTrip.sdate)) {
    var daysHtml = TRIP_DAYS_DIALOG_TPL;
    daysHtml = daysHtml.replace(/%ITEM_NAME%/, itemName);
    showDialog(daysHtml);
    _gel('cancelButton').focus();
    var html = ['<select style="width:25%;" id="days_id" disabled>'];
    for (var i = 1; i <= objTrip.duration; i++) {
      html.push('<option value="', i, '">' +
                prefs.getMsg('day') +
                '&nbsp;', i, '</option>');
    }
    html.push('</select>');
    _gel('daysoption').innerHTML = html.join('');
  } else {
    var calHtml = CALENDAR_TPL;
    calHtml = calHtml.replace(/%ITEM_NAME%/, itemName);
    showDialog(calHtml);
    _gel('cancelButton').focus();
    fillcalendar();
  }
}

/**
 * Opens mail sending dialog box.
 */
function openMailDialog() {
  // Close if any popup window is there.
  closeInfoWindow();
  var html = SEND_MAIL_DIALOG_TPL;
  showDialog(html);
  _gel('emailId').focus();
}

function showToolTip(point, name) {
  var divPoint = gMap.fromLatLngToContainerPixel(point);
  var mapElementPosition = getPosition(_gel('map-container'));
  var ele = _gel('toolTip');
  var eleStyle = ele.style;
  eleStyle.display = 'block';
  eleStyle.zIndex = 10000;
  eleStyle.left = divPoint.x + mapElementPosition.x + 'px';
  eleStyle.top = divPoint.y + mapElementPosition.y - 40 + 'px';
  ele.innerHTML = name;
}

/**
 * Creates the dialog box to delete the item.
 * @param {number} index index of trip item.
 * @param {boolean} bScheduled Flag to check if item is scheduled.
 */
function createDeleteItemBox(index, bScheduled) {
  // Close if any popup window is there.
  closeInfoWindow();

  var title = JGulliverData.getCurrentTrip().arrItem[index].name;
  if (title.length > 20)
    title = title.substr(0, 20) + '...';
  var html = DELETE_ITEM_DIALOG_TPL;
  html = html.replace(/%INDEX%/g, index)
             .replace(/%ITEM_NAME%/g, title)
             .replace(/%IS_SCHEDULED%/, bScheduled);
  showDialog(html);
  _gel('cancelButton').focus();
}

/**
 * Creates the dialog box to delete the trip.
 */
function createDeleteTripBox() {
  // Close if any popup window is there.
  closeInfoWindow();

  var title = JGulliverData.getCurrentTrip().name;
  if (title.length > 20)
    title = title.substr(0, 20) + '...';
  var html = DELETE_TRIP_DIALOG_TPL;
  html = html.replace(/%TRIP_NAME%/, title);
  showDialog(html);
  _gel('cancelButton').focus();
}

/**
 * Creates section for scheduled item.
 * @param {string} strStartDate start date of trip.
 * @param {string} strEndDate end date of trip.
 * @param {number} nDays duration of trip.
 */
function createScheduledItemBox(strStartDate, strEndDate, nDays) {
  var html = [];
  var i;
  if (isEmpty(strStartDate) && isEmpty(strEndDate)) {
    _gel('duration').innerHTML = '(' + nDays + '&nbsp;' +
                                 prefs.getMsg('days') + ')';
    for (i = 0; i < nDays; i++) {
      html.push('<div style="padding-bottom:5px;width:100%;height:55px;" ',
                'id="scheduledInfoBox', i, '"><div class="itemDay" id="day',
                i, '">' + prefs.getMsg('day') + ' ', (i + 1),
                '</div><div id="item', i, '"></div></div>');
    }
  } else {
    _gel('duration').innerHTML = formatDate(strStartDate, '%M%d') + ' - ' +
        formatDate(strEndDate, '%M%d%Y') + ' (' + nDays + ' ' +
                   prefs.getMsg('days') + ')';
    for (i = 0; i < nDays; i++) {
      html.push('<div style="padding-bottom:5px;width:100%;height:55px;" ',
                'id="scheduledInfoBox', i, '"><div class="itemDay" id="day',
                i, '">', addDaysToDate(strStartDate, i, '%MM%d%W'),
                '</div><div id="item', i, '"></div></div>');
    }
  }
  _gel('scheduleItemBox').innerHTML = html.join('');
  _IG_AdjustIFrameHeight();

  // To reset the drag item counter.
  dragItemCounter = 0;

  // Add target for drag an drop the items.
  dropTargets = [];
  addDropTarget(_gel('unscheduleItemBox'));
  for (i = 0; i < nDays; i++) {
    addDropTarget(_gel('scheduledInfoBox' + i));
  }
  addMarkersTarget(nDays);
}

/**
* Function to hide dialog.
*/
function hideViewDateDialogBox() {
  hideCalender();
  hideDialog();
  adjustiFrame();
}

/**
* Function to hide opened calender.
*/
function hideCalender() {
  if (_gel(datePickerDivID) != null) {
    var pickerDiv = _gel(datePickerDivID);
    pickerDiv.style.visibility = 'hidden';
    pickerDiv.style.display = 'none';
  }
}

/**
 * Function to hide dialog.
 */
function hideDialogView() {
  if (_gel(datePickerDivID1)) {
    var pickerDiv = _gel(datePickerDivID1);
    pickerDiv.style.visibility = 'hidden';
    pickerDiv.style.display = 'none';
  }
  adjustiFrame();
}

/**
 * Dialog for edit.
 */
function showEditDialog() {
  // Close if any popup window is there.
  closeInfoWindow();
  var editDlgInfo = EDIT_TRIP_NAME_DIALOG_TPL;
  editDlgInfo = editDlgInfo.replace(/%TRIP_NAME%/,
                                    JGulliverData.getCurrentTrip().name);
  showDialog(editDlgInfo);
  var element = _gel('tripNameEdit');
  element.focus();
  element.select();
  addKeyListener('tripNameEdit');
}

/**
 * Creates the dialog box to create the trip.
 */
function createTripBox() {
  // Close if any popup window is there.
  closeInfoWindow();
  var html = CREATE_TRIP_DIALOG_TPL;
  showDialog(html);
  _gel('create-location').focus();
}

/**
* Closes the popup window opened on click of trip name.
*/
function closeInfoWindow() {
  _IG_AdjustIFrameHeight(_gel('gadget-body').offsetHeight);
  if (strSelectedItemId == '')
    return;
  if (_gel(strSelectedItemId) != null &&
      (strSelectedItemId.indexOf('itemPopup') != -1 ||
       strSelectedItemId.indexOf('resultPopup') != -1)) {
    _gel(strSelectedItemId).innerHTML = '';
    _gel(strSelectedItemId).style.display = 'none';
  }
  strSelectedItemId = '';
}

/**
 * Creates the dialog box to delete the trip.
 */
function createDeleteTripBox() {
  // Close if any popup window is there.
  closeInfoWindow();

  var title = JGulliverData.getCurrentTrip().name;
  if (title.length > 20)
    title = title.substr(0, 20) + '...';
  var html = DELETE_TRIP_DIALOG_TPL;
  html = html.replace(/%TRIP_NAME%/, title);
  showDialog(html);
  _gel('cancelButton').focus();
}

/**
 * Dialog for edit dates.
 */
function showDateDialog() {
  // Close if any popup window is there.
  closeInfoWindow();

  var objTrip = JGulliverData.getCurrentTrip();
  var strStartDate = isEmpty(objTrip.sdate) ?
                     prefs.getMsg('unspecified') : objTrip.sdate;
  var strEndDate = isEmpty(objTrip.edate) ?
                   prefs.getMsg('unspecified') : objTrip.edate;
  var days = isEmpty(objTrip.duration) ? DEFAULT_DURATION : objTrip.duration;

  var html = DATE_DIALOG_TPL;
  html = html.replace(/%DURATION%/, days)
      .replace(/%START_DATE%/, strStartDate)
      .replace(/%END_DATE%/, strEndDate);
  showDialog(html);
  _gel('cancelButton').focus();
}

/**
 * Dialog for edit dates.
 */
function showLocationDialog() {
  // Close if any popup window is there.
  closeInfoWindow();

  var objTrip = JGulliverData.getCurrentTrip();
  var html = LOCATION_DIALOG_TPL;
  html = html.replace(/%LOCATION%/, objTrip.loc);
  showDialog(html);
  addKeyListener('txtLocation');
  var element = _gel('txtLocation');
  element.focus();
  element.select();
}

/**
 * Function to open Create New Item Dialog.
 */
function createCustomItemDialog() {
  // Close if any popup window is there.
  closeInfoWindow();

  var objTrip = JGulliverData.getCurrentTrip();
  // Prepare html to display dates or days, based on trip date.
  var html = [];
  if (isEmpty(objTrip.sdate)) {
    html = [prefs.getMsg('day') +
            ': <select style="width:25%;" id="days_id" disabled>'];
    for (var i = 1; i <= objTrip.duration; i++) {
      html.push('<option value="', i, '">' + prefs.getMsg('day') +
                '&nbsp;', i, '</option>');
    }
    html.push('</select>');
  } else {
    fillTripDates();
    html.push(prefs.getMsg('date') + '&nbsp;<input type="text" ',
    'id="startdate" name="startdateview" value="' +
    prefs.getMsg('unspecified') +
    '" style="width:80px;" readonly>&nbsp;<img name="calender2view"',
    'src="' + FILE_SERVER + '/images/calender.png" ',
    'onclick="_gel(\'dateradio\').checked=true; ',
    'displayDatePicker(\'startdateview\',\'calender2view\',2,\'',
    tripdates[0], '\');" width="19" height="19" align="top">');
  }
  html = html.join('');
  var dialogHtml = CUSTOM_ITEM_DIALOG_TPL;
  dialogHtml = dialogHtml.replace(/%DATE_HTML%/, html);
  showDialog(dialogHtml);
  _gel('itemName').focus();
}

/**
 * To display Edit Item Dialog.
 * @param  {number} index Index of item.
 * @param {boolean} bScheduled Flag to determine whether its a scheduled item.
 */
function editItemDialog(index, bScheduled) {
  // Close if any popup window is there.
  closeInfoWindow();

  var daysOption = [];
  var tempDate = '';

  strSelectedItemId = 'resultPopup' + index;
  var objTrip = JGulliverData.getCurrentTrip();

  if (!isEmpty(objTrip.sdate)) {
    for (var i = 0;i < objTrip.duration; i++) {
      tempDate = addDaysToDate(objTrip.sdate, i, '%m/%d/%Y');

      if (addDaysToDate(objTrip.arrItem[index].sdate, 0, '%m/%d/%Y') ==
          tempDate) {
         daysOption.push('<option value="', tempDate, '" selected>',
            tempDate, '</option>');
      } else {
        daysOption.push('<option value="', tempDate, '">',
                        tempDate, '</option>');
      }
    }
  } else {
    for (var i = 1; i <= objTrip.duration; i++) {
      if (objTrip.arrItem[index].day == i)
        daysOption.push('<option value="', i, '" selected>' +
                        prefs.getMsg('day') + ' ' , i,
                        '</option>');
      else
        daysOption.push('<option value="', i, '">' +
                        prefs.getMsg('day') + ' ' , i,
                        '</option>');
    }
  }

  var description;
  if (objTrip.arrItem[index].bCustom) {
    description = objTrip.arrItem[index].review;
  } else {
    description = objTrip.arrItem[index].address;
    description = description.replace('<br/>', '');
  }
  if (isEmpty(description))
    description = '';

  var html = EDIT_ITEM_DIALOG_TPL;
  html = html.replace(/%INDEX%/g, index)
      .replace(/%ITEM_NAME%/g, _hesc(_unesc(objTrip.arrItem[index].name)))
      .replace(/%DESCRIPTION%/, _unesc(description))
      .replace(/%DAYSOPTION%/, daysOption.join(''));
  if (!objTrip.arrItem[index].bCustom) {
    html = html.replace(/%READONLY%/, 'readonly="readonly"');
  } else {
    html = html.replace(/%READONLY%/, '');
  }
  showDialog(html);
  _gel('cancelButton').focus();
  if (!bScheduled) {
    unscheduleRadioButton();
  } else {
    daysRadioButton();
  }
}

/**
 * Function to display print items dialog.
 */
function showPrintDialog() {
  // close if any dialog is opened
  closeInfoWindow();
  var scheduledItems = 0;
  var unScheduledItems = 0;
  var objTrip = JGulliverData.getCurrentTrip();
  var arrTripItem = [];
  var currentItemSdate;
  var sdate, edate;
  var currentDate = new Date();
  var currentDay = currentDate.getDay();
  currentDay = dayArrayLong[currentDay];
  currentDate = formatDate(getDateString(currentDate), '%MM%d%Y');
  var tripDateString = '';
  if (!isEmpty(objTrip.sdate)) {
    tripDateString = formatDate(objTrip.sdate, '%MM%d') + ' - ' +
                     formatDate(objTrip.edate, '%MM%d%Y') +
                     ' / ' + objTrip.duration + ' days';

  } else {
    tripDateString = objTrip.duration + ' days';
  }
  var unscheduledHtml = ['</ul></div><ul><div style="padding-right:2px;">',
      '<br><div class="print_subTitle"><u>',
      prefs.getMsg('unscheduled_items'), '</u></div></ul>',
      '<div id="unscheduled-item-details" ',
      'style="font-family:arial,sans-serif;font-size:15px;color:#000;">'];

  // NEED TO VALIDATE AND FIX THIS HTML
  var wrappedName = objTrip.name;
  var wrappedName = wrappedName.split(' ');
  for (var k = 0; k < wrappedName.length; k++) {
    if (wrappedName[k].length > MAX_DESC_LENGTH)
        wrappedName[k] = wrapText(wrappedName[k]);
  }
  wrappedName = wrappedName.join(' ');
  var printHtml = [
      '<div id="print_Trip_Items_Dialog">',
      '<div class="printTitle" width="100%">',
      '<div align="right" style="color:#fff">',
      '<div align="left" class="dialog-title" ',
      'style="float:left;padding-left:3px">',
      prefs.getMsg('print_title'), '</div>',
      '<input type="checkbox" id="print_Map" ',
      'onclick="javascript:showStaticMap(', objTrip.lat, ',', objTrip.lng, ',',
      objTrip.accuracy, ');">&nbsp;', prefs.getMsg('include_large_map'),
      '<input type="button" style="width:70px;margin-left:16px;" ',
      'value="', prefs.getMsg('print_item'), '" onclick="printTripItems()" ',
      'id="printDetails"><img onclick="javascript:hideDialogView();',
      'hideDialog();" class="print_close_img" ',
      'src="' + FILE_SERVER + '/images/close_promo.gif"/></div>',
      '</div><div style="background: #f3f3f3;padding:10px;">',
      '<div id="print_Dialog"><table id="printDialogHeader" ',
      'style="padding-top:10px;',
      'font-size:15px;width:100%" cellspacing="0" cellpadding="2"><tr>',
      '<td width="5%"></td><td width="25%"><img src=',
      '"' + FILE_SERVER + '/images/googleltineraries.png"/>',
      '</td>',
      '<td width="40%" valign="center">',
      '<div style="font-weight:bold;font-size:15px;">', wrappedName, '</div>',
      '<div style="font-size:13px;">', tripDateString, '</div></td>',
      '<td style="color:#666;font-size:12px;" valign="top">',
      currentDay, '\, ', currentDate, '</td></tr>',
      '</table><div id="staticMap" style="margin-left:150px;margin-top:20px;">',
      '</div><div style="color:#000;font-size:12px;"><div id="itemDetails">',
      '<ul><div class="print_subTitle"><u>', prefs.getMsg('scheduled_items'),
      '</u></div></ul><div id="scheduled-item-details" ',
      'style= font-size:15px;">'];

      sortCol = (!isEmpty(objTrip.sdate)) ? enTripCol.DATE : enTripCol.DAY;
      bAscending = true;
      arrTripItem = objTrip.arrItem.sort(sortHandler);
  var itemSday, itemSdate, currentTripDay;
  for (var i = 0; i < arrTripItem.length; i++) {
    if (!isEmpty(objTrip.sdate)) { //main if
      if (!isEmpty(arrTripItem[i].sdate)) {
        scheduledItems = 1;
        if (currentItemSdate != arrTripItem[i].sdate) {
             printHtml.push('</ul>');
         }
        itemSdate = formatDate(arrTripItem[i].sdate, '%m/%d/%Y');
        itemSdate = new Date(itemSdate);
        itemSday = itemSdate.getDay();
        itemSdate = (getDateString(itemSdate)).split('/');
        var itemMonth = parseInt(itemSdate[0], 10) - 1;
        itemMonth = monthArrayLong[itemMonth];
        itemSdate[0] = itemMonth + ' ' +
        itemSdate[1] + ' (' + dayArrayLong[itemSday] + ')';
        if (arrTripItem[i].sdate != currentItemSdate) {
          printHtml.push('<ul><b>', itemSdate[0], '</b>');
          currentItemSdate = arrTripItem[i].sdate;
        }
      if (isEmpty(arrTripItem[i].address)) {
        var printAddOrDesc = _unesc(arrTripItem[i].review);
      } else {
        var printAddOrDesc = arrTripItem[i].address;
      }
      printHtml.push('<div style="padding-left:15px;">',
        '<div style="color:#000;font-size:15px;font-weight:bold;">',
        _unesc(arrTripItem[i].name), '</div>',
        '<div style="color:#000;font-size:12px;">', printAddOrDesc, '</div>',
        '</div>');
      if (arrTripItem[i].sdate == currentItemSdate) {
        printHtml.push('<br>');
      }
    } else {
      unScheduledItems = 1;
      unscheduledHtml.push('<ul><b>', _unesc(arrTripItem[i].name), '</b>',
          '<div style="color:#000;padding-left:15px;">');
      if (isEmpty(arrTripItem[i].address)) {
        unscheduledHtml.push(_unesc(arrTripItem[i].review));
      } else {
        unscheduledHtml.push(arrTripItem[i].address);
      }
      unscheduledHtml.push('</div></ul>');
    }
    } else { //main else

        if (arrTripItem[i].day > 0) {
          if (currentTripDay != arrTripItem[i].day) {
             printHtml.push('</ul>');
         }
          if (currentTripDay != arrTripItem[i].day) {
            printHtml.push('<ul><b>Day ', arrTripItem[i].day, '</b>');
            currentTripDay = arrTripItem[i].day;
          }
         scheduledItems = 1;
         printHtml.push('<div style="padding-left:15px;">',
           '<div style="color:#000;font-size:15px;font-weight:bold;">',
           _unesc(arrTripItem[i].name), '</div>',
           '<div style="color:#000;font-size:12px;">', arrTripItem[i].address,
           '</div></div>');
         if (arrTripItem[i].day == currentTripDay) {
           printHtml.push('<br>');
         }
      }
      else {
        unScheduledItems = 1;
        unscheduledHtml.push('<ul><b>', _unesc(arrTripItem[i].name), '</b>',
          '<div style="color:#000;padding-left:15px;">');
        if (isEmpty(arrTripItem[i].address)) {
          unscheduledHtml.push(_unesc(arrTripItem[i].review));
        } else {
          unscheduledHtml.push(arrTripItem[i].address);
        }
        unscheduledHtml.push('</div></ul>');
      }
    }
  }
  unscheduledHtml.push('</div></div><br><br>');
  printHtml.push(unscheduledHtml.join(''),
      '</div></div></div>');
  showDialog(printHtml.join(''));
  var noItemsHtml = '<div style="font-weight:bold;padding-top:40px;" ' +
                  'align="center">%MESSAGE%</div>';
  if (arrTripItem.length == 0) {
    noItemsHtml =
        noItemsHtml.replace(/%MESSAGE%/, prefs.getMsg('no_items_added'));
     _gel('itemDetails').innerHTML = noItemsHtml;
  } else if (scheduledItems == 0) {
    noItemsHtml =
        noItemsHtml.replace(/%MESSAGE%/, prefs.getMsg('no_scheduled_items'));
    _gel('scheduled-item-details').innerHTML = noItemsHtml;
  } else if (unScheduledItems == 0) {
    noItemsHtml =
        noItemsHtml.replace(/%MESSAGE%/, prefs.getMsg('no_unscheduled_items'));
    _gel('unscheduled-item-details').innerHTML = noItemsHtml;
  }
  _gel('printDetails').focus();
}

/**
* Shows the popup window on click of trip name.
* @param {number} index Position of div.
* @param {boolean} bSearchItem Flag to check if clicked on search item.
*/
function showPopup(index, bSearchItem) {
  closeInfoWindow();
  var itemInfo;
  var html = [];
  if (bSearchItem) {
    itemInfo = getPopupHtml(index);
    html = ['<div style="border:1px solid #000;',
        'background-color:#fff;position:absolute;z-index:1000;',
        'padding-bottom:5px;width:267px;">', itemInfo, '</div>'];

  } else {
    itemInfo = ITEM_INFO_TPL;
    itemInfo = itemInfo.replace(/%INDEX%/g, index);
    strSelectedItemId = 'itemPopup' + index;
    var objTrip = JGulliverData.getCurrentTrip();
    var objItem = objTrip.arrItem[index];
    itemInfo = itemInfo.replace(/%MARKER%/g, '')
        .replace(/%THUMB_UP%/, objItem.Item_thumb_up)
        .replace(/%THUMB_DOWN%/, objItem.Item_thumb_down)
        .replace(/%OWNER_NAME%/, objItem.item_owner);
    // Overview url
    var url, baseUrl;
    var bCustom = objTrip.arrItem[index].bCustom;
    if (bCustom == '' || bCustom == false) {
      baseUrl = objTrip.arrItem[index].link;
      if (objTrip.arrItem[index].data_source == 'google') {
        url = baseUrl + '&dtab=0&oi=';
        itemInfo = itemInfo.replace(/%OVERVIEW_URL%/g, url);

        // Detail url
        url = baseUrl + '&dtab=1&oi=md_structdata';
        itemInfo = itemInfo.replace(/%DETAIL_URL%/g, url);

        // Photos and videos url
        url = baseUrl + '&dtab=5&oi=md_photos&sa=X';
        itemInfo = itemInfo.replace(/%PHOTOS_URL%/g, url);

        // Reviews url
        url = baseUrl + '&dtab=2&oi=md_reviews&sa=X';
        itemInfo = itemInfo.replace(/%REVIEWS_URL%/g, url);

        itemInfo = itemInfo.replace(/%NOURL%/g, '');
      } else {
        itemInfo = itemInfo.replace(/%NOURL%/g, 'style="display:none"');
      }
      // For Image section.
      url = objTrip.arrItem[index].imgurl;
      if (!isEmpty(url)) {
        url = '<img src="' + objTrip.arrItem[index].imgurl +
              '" align="left" width="70" height="70" ' +
              'style="margin-right:10px;cursor:pointer;" />';
        itemInfo = itemInfo.replace(/%DISPLAY%/g, 'block');
      } else {
        url = '';
        itemInfo = itemInfo.replace(/%DISPLAY%/g, 'none');
      }
      itemInfo = itemInfo.replace(/%IMAGE%/g, url);
    }
    itemInfo = itemInfo.replace(/%DRAG_MSG%/g, '').replace(/%DRAG_IMG%/g, '');

    //close image
    url = '<img border="0" onmousedown="javascript:closeInfoWindow();"' +
          'src="' + FILE_SERVER + '/images/close_promo.gif"/>';
    itemInfo = itemInfo.replace(/%CLOSE_IMG%/g, url);

    var wrapTitle = objTrip.arrItem[index].name.split(' ');
    for (i = 0; i < wrapTitle.length; i++) {
      if (wrapTitle[i].length > MAX_STRING_LENGTH)
        wrapTitle[i] = wrapText(wrapTitle[i]);
    }
    var title = wrapTitle.join(' ');
    if (title.length > MAX_DESC_LENGTH) {
      title = title.substr(0, MAX_DESC_LENGTH) + '...';
    }

    itemInfo = itemInfo.replace(/%TITLE%/g, _unesc(title));

    if (objTrip.arrItem[index].address != null)
      itemInfo = itemInfo.replace(/%CONTACT_INFO%/g,
                                  objTrip.arrItem[index].address);
    else
      itemInfo = itemInfo.replace(/%CONTACT_INFO%/g, '');

    itemInfo = itemInfo.replace(/%INDEX%/g, index);
    if (objTrip.arrItem[index].weburl)
      itemInfo = itemInfo.replace(/%WEB_URL%/g, objTrip.arrItem[index].weburl);
    else
      itemInfo = itemInfo.replace(/%WEB_URL%/g, '');

    html = ['<div style="border:1px solid #000;',
        'background-color:#fff;position:absolute;z-index:1000;',
        'padding-bottom:5px;width:267px;">', itemInfo, '</div>'];
  }

  var popupWindow = _gel(strSelectedItemId);
  popupWindow.style.display = '';
  var popupx1y1 = getPosition(popupWindow);
  var popupx2y2 = {
    x: popupx1y1.x + popupWindow.offsetWidth,
    y: popupx1y1.y + popupWindow.offsetHeight
  };
  popupWindow.innerHTML = html.join('');
  if (bCustom) {
    var wrapDescription = _unesc(objTrip.arrItem[index].review);
    wrapDescription = wrapDescription.split(' ');

    for (var i = 0; i < wrapDescription.length; i++) {
      if (wrapDescription[i].length > MAX_DESC_LENGTH)
        wrapDescription[i] = wrapText(wrapDescription[i]);
    }
    wrapDescription = wrapDescription.join(' ');
    var linkElement = _gel('linkInfo');
    linkElement.style.textDecoration = 'none';
    linkElement.style.color = '#000';
    linkElement.innerHTML = '<div style="font-weight:bold;cursor:auto;">' +
        prefs.getMsg('item_desc') + ' : </div><div style="cursor:auto;" ' +
        'style="padding-left:10px;">' + wrapDescription;
    _gel('weblink').style.display = 'none';
  }

  if (!bSearchItem) {
    _gel('link-cell').style.display = 'none';
  }
  var height = Math.max(popupx2y2.y, _gel('gadget-body').offsetHeight);
  _IG_AdjustIFrameHeight(height);
}

/**
 * @fileoverview File contains canvas view related code.
 * @author gadgetfactory@google.com (gadgetfactory)
 */

/**
 * Executes whenever user moves mouse.
 */
document.onmousemove = mouseMove;

/**
 * Executes whenever mouseup event occurs.
 */
document.onmouseup = mouseUp;

/**
 * Executes whenever onclick event occurs .
 */
document.onclick = closeActionMenu;

/**
 * Get html string for a trip item.
 * @param {number} index index of item.
 * @param {string} title name of item.
 * @param {string} location Location of item.
 * @param {boolean} bScheduled flag to check whether item is scheduled.
 * @return {string} html string for an item.
 */
function getItemHtml(index, title, location, bScheduled) {
  var objTrip = JGulliverData.getCurrentTrip();
  var isWavelet = wave && wave.isInWaveContainer();
  var description;
  if (objTrip.arrItem[index].bCustom) {
    description = objTrip.arrItem[index].review;
  } else {
    description = objTrip.arrItem[index].review;
    description = description.replace(/<br\/>/g, ' ').replace(/<br>/g, ' ');
  }
  if (isEmpty(description)) {
    description = '';
  }

  var itemHtml;
  if (bScheduled) {
    itemHtml = isWavelet ? SCHEDULED_ITEM_TPL_NPL : SCHEDULED_ITEM_TPL;
  } else {
    itemHtml = isWavelet ? UNSCHEDULED_ITEM_TPL_NPL : UNSCHEDULED_ITEM_TPL;
  }
  itemHtml = itemHtml.replace(/%DRAG_ITEM_COUNTER%/g, dragItemCounter)
                     .replace(/%INDEX%/g, index);
  var wrappedTitle;
  if (title.length > MAX_DESC_LENGTH) {
    wrappedTitle = title.substr(0, MAX_DESC_LENGTH) + '...';
    itemHtml = itemHtml.replace(/%TITLE%/, _unesc(title));
  } else {
    wrappedTitle = title;
    itemHtml = itemHtml.replace(/%TITLE%/, '');
  }
  itemHtml = itemHtml.replace(/%NAME%/g, wrappedTitle);
  if (isEmpty(location))
    itemHtml = itemHtml.replace(/%CONTACT_INFO%/, '');
  else
    itemHtml = itemHtml.replace(/%CONTACT_INFO%/, location);
  dragItemCounter++;
  return itemHtml;
}

/**
 * Prepares html code of table on dropdown image click.
 */
function dropDown() {
  var tableBox = _gel('table-box');
  if (tableBox) {
    if (tableBox.style.display == 'block') {
      tableBox.style.display = 'none';
      return;
    }
  }
  var html = ['<div id="table-box" style="display:block;">',
              '<table class="select-option" cellspacing="3" cellpadding="0" ',
              'style="position:absolute;left:-19px;top:29px;',
              'border:1px solid #999;">'];
  var list = [];
  list[0] = prefs.getMsg('change_trip_loc');
  list[1] = prefs.getMsg('delete_trip');
  for (var i = 0; i <= 1; i++) {
    html.push('<tr><td id="option' + (i + 1) + '" align="left"',
        'style="vertical-align:top;" onclick="onTripAction(this.id);"' ,
        'onmouseover="this.style.backgroundColor=\'#D4E6FC\';"',
        'onmouseout="this.style.backgroundColor=\'#FFFFFF\';">',
        '<div style="width: 100%;"><nobr>' + list[i] + '</nobr></div></td>',
        '</tr>');
  }
  html.push('</tbody></table></div>');
  var element = _gel('table-data');
  element.style.display = '';
  element.innerHTML = html.join('');
}

/**
 * Function to print items.
 */
function printTripItems() {
  _gel('print_content').innerHTML = _gel('print_Dialog').innerHTML;
  hideDialogView();
  hideDialog();
  window.print();
}

/**
 * Displays the records in the Trip tab.
 * @param {number} pageNumber Page Number of trip.
 * @param {boolean} bShowAll flag to check if search is based on crieria or not.
 */
function displayTripRecords(pageNumber, bShowAll) {
  nCurrentPageNum = pageNumber;
  var html = [];
  var imgPath = 'http://maps.google.com//intl/en_us/mapfiles/transparent.png';

  var strStartTrip = ((nCurrentPageNum - 1) * MAX_SHOWN_TRIPS);
  var counter = 0;
  var i, j;
  for (i = strStartTrip; i < arrSortedTrips.length; i++) {
    var displayDt = arrSortedTrips[i].sdate;
    var finaldate = arrSortedTrips[i].edate;
    if (isEmpty(displayDt))
      displayDt = ''
    else
      displayDt = formatDate(displayDt, '%M%d%Y');
    if (isEmpty(finaldate))
      finaldate = '';
    else
      finaldate = formatDate(finaldate, '%M%d%Y');

    html.push('<div id="row', i, '" style="width:100%;"',
        '<table width="100%"><tr><td width="27%" onclick="exploreTrip(\'',
        arrSortedTrips[i].id, '\');" style="padding-left:4px;cursor:pointer" >',
        '<span class="subhead" >');
    var tripName = arrSortedTrips[i].name;
    var MAX_NAME_LENGTH = 25;
    if (tripName.length > MAX_NAME_LENGTH) {
      tripName = tripName.substr(0, MAX_NAME_LENGTH) + '...';
    }
    html.push(tripName,
        '</span></a></td><td width="24%" style="padding-left:6px;">',
        '<span class="subhead2">', displayDt, ' - ', finaldate, '</span></td>',
        '<td width="24%" style="padding-left:6px;"><span class="subhead2">',
        arrSortedTrips[i].loc, '</span></td>',
        '<td width="24%" style="padding-left:6px;"><span class="subhead2">',
        arrSortedTrips[i].ownerName, '</span></td>');
    html.push('</tr></table></div>');

    if (++counter == MAX_SHOWN_TRIPS)
      break;
  }

  _gel('displayRec').innerHTML = html.join('');

  if (counter > 0) {
    if (!bShowAll) {
      _gel('showAllTrips').style.display = '';
      _gel('showAllTrips').innerHTML = prefs.getMsg('show_all_trips');
    } else {
      _gel('showAllTrips').style.display = 'none';
      _gel('searchTripText').value = '';
    }
    var lastTrip = strStartTrip + counter;
    var strNumText = (strStartTrip + 1) + ' - ' + lastTrip + ' of ' +
                     arrSortedTrips.length + ' Trips';
    _gel('showingTripText').innerHTML = strNumText;

    var strPageText = ['<table width=100%><tr>'];
    if (nCurrentPageNum > 1) {
      strPageText.push('<td align="right" width="99%">',
                      '<a href="javascript:displayTripRecords(',
                      (nCurrentPageNum - 1), ',', bShowAll, ')">',
                      '<font size=2px;>' + prefs.getMsg('previous') +
                      '</font></a>&nbsp;</td>');
    }
    var lastRecord =
        ((nCurrentPageNum - 1) * MAX_SHOWN_TRIPS) + MAX_SHOWN_TRIPS;
    if (lastRecord < arrSortedTrips.length) {
      strPageText.push('<td align="right"><a href="javascript:',
          'displayTripRecords(', (nCurrentPageNum + 1), ',',
          bShowAll, ')"><font size=2px;>' + prefs.getMsg('next') +
          '</font></a></td>');
    }
    strPageText.push('</tr></table>');
    _gel('showPagination').innerHTML = strPageText.join('');

  } else {
    _gel('showAllTrips').style.display = '';
    _gel('showAllTrips').innerHTML = prefs.getMsg('show_all_trips');
  }

  _IG_AdjustIFrameHeight();
}


/**
 * Fills array of required length with sorted records.
 * @param {boolean} bVal Flag to check if search is based on crieria or not.
 */
function fillForSortedRecords(bVal) {
  arrSortedTrips = [];
  if (ownerTrips.length == 0) {
    _gel('displayRec').innerHTML = '<span style="font-size:13px;' +
        'padding-left:5px;">' + prefs.getMsg('no_trips') + '</span>';
    return;
  }

  var searchTxt = '';
  if (bVal) {
    searchTxt = _gel('searchTripText').value.strip().toLowerCase();
    if (searchTxt.strip() == '')
      return;
  }
  var j = 0;
  for (var i = 0; i < ownerTrips.length; i++) {
    if (bVal) {
      if (ownerTrips[i].name.toLowerCase().indexOf(searchTxt) == -1)
        continue;
    }
    arrSortedTrips[j++] = ownerTrips[i];
  }
  arrSortedTrips = arrSortedTrips.sort(sortHandler);
  displayTripRecords(1, !bVal);
}

/**
 * To display the required icon while sorting.
 * @param {string} element element id sent.
 * @param {number} val column number.
 */
function changeSign(element, val) {
  var imgdivsrc = _gel('img_' + val).innerHTML;
  if (val == 1) sortCol = enTripCol.NAME;
  if (val == 2) sortCol = enTripCol.DATE;
  if (val == 3) sortCol = enTripCol.LOCATION;
  if (val == 4) sortCol = enTripCol.OWNER;
  if (imgdivsrc.match('down') == null) {
    _gel('img_' + val).innerHTML = DOWN_ARROW_IMG;
    bAscending = false;
  } else if (imgdivsrc.match('up') == null) {
    _gel('img_' + val).innerHTML = UP_ARROW_IMG;
    bAscending = true;
  }

  for (var i = 1; i <= 4; i++) {
    if (i != val)
      _gel('img_' + i).innerHTML = '';
  }
  arrSortedTrips = arrSortedTrips.sort(sortHandler);
  displayTripRecords(nCurrentPageNum, true);
}

/**
 * Show drag tip on create a new trip.
 */
function showDragTip() {
  _gel('msgContainer').style.display = 'block';
  var html = ACTION_MSG_TPL;
  html = html.replace(/%MESSAGE%/, prefs.getMsg('drag_tip1'));
  timerMsg.createTimerMessage(html, 5);
}

/**
 * Callback function for create Trip tab.
 */
function callbackCreateTrip() {
  var objTrip = JGulliverData.getCurrentTrip();
  _gel('canvasContent').style.height = '';
  var replaceText = _gel('messageContainer').innerHTML;
  var queryURL = EXPORT_SERVER + '?trip_id=' + objTrip.id;
  var encodedURL = 'http://maps.google.com?q=' + encodeURIComponent(queryURL);
  _gel('exportLink').href = encodedURL;
  _gel('messageContainer').style.display = '';
  objTrip.arrItem = [];
  if (!objTrip) {
    var html = ['<table width="100%"><tr><td colspan="2">',
        '<font class="heading">' + prefs.getMsg('where_visit') +
        '</font></td></tr><tr><td width="70%">' +
        '<input type="text" id="location" class="txtBox">',
        '<font class="hint" style="color:#666;">' + prefs.getMsg('egLocation') +
        '</font></td><td width="30%" valign="top"><input type="button" ',
        'value="' + prefs.getMsg('create') +
        '" onClick=""/></td></tr></table>'];
    _gel('canvasContent').innerHTML = html.join('');
  } else {

    var tripNameTitle = objTrip.name;
    var i = 0;
    var html = ['<table cellpadding="0" cellspacing="0" border="0" ',
        'width="100%" style="background:#058a9d;padding-bottom:2px;">',
        '<tr><td valign="top" ',
        'style="padding:3px 7px 5px 0;" width="61%"><div style="',
        'padding-left:5px;color:#fff;" width="100%"><span id="tripName" '];
    if (tripNameTitle.length > 25) {
      html.push('title="', objTrip.name, '"');
      tripNameTitle = tripNameTitle.substr(0, 25) + '...';
    }
    html.push('>', tripNameTitle, '</span > - <span class="link" ',
        'id="editTrip" onclick="showEditDialog();">',
        '<nobr>' + prefs.getMsg('edit_trip') + '</nobr></span>',
        '</span></div>',
        '<div id="editdialog" style="padding-left:120px;"></div>',
        '</td><td align="right" style="font-size:12px;',
        'padding: 3px 7px 0 0;" valign="top"',
        ' rowspan="2" ><table border="0" cellpadding="0" ',
        'cellspacing="0" width="100%"><tr><td colspan="2">',
        '&nbsp;<span class="link" onclick=',
        '"javascript:callbackTrips();" style="padding-top:4px;">',
        '<nobr>' + prefs.getMsg('view_other') + '</nobr></span>&nbsp;&nbsp;',
        '&nbsp;</td><td><span class="link">',
        '<img src="' + FILE_SERVER + '/images/print_icon.gif" ',
        'style="vertical-align:bottom;cursor:pointer;" ',
        'onclick="showPrintDialog();"/>&nbsp;<a href="',
        'javascript:showPrintDialog();" style="color:#fff;">' +
        prefs.getMsg('print_item') + '</a></span>&nbsp;&nbsp;</td><td>',
        '<span class="link"><img src="',
        'http://www.google.com/mapfiles/email_icon.gif" style="',
        'vertical-align:bottom;cursor:pointer;" onclick="',
        'javascript:openMailDialog();"/>&nbsp;<a href="',
        'javascript:openMailDialog();" style="color:#fff;">' +
        prefs.getMsg('send') +
        '</a></span>&nbsp;&nbsp;</td><td style="padding-top:2px;">',
        '<span id="menuAction" class="trip-action" ',
        'onclick="javascript:dropDown();" style="padding-left:5px"><nobr>' +
        prefs.getMsg('trip_actions') +
        '&nbsp;&nbsp;&nbsp;<img id="menuImg" style="cursor:pointer;"' ,
        'src="http://www.google.com/base/s2/images/down_arrow.gif"></nobr>',
        '&nbsp;</span><div id="table-data" class="drop-down-table" ',
        'style="display:none;"></div></td></tr></table></td><tr>',
        '<td colspan="3" valign="center">',
        '<span style="font-size:12px;color:#fff;padding-left:5px;">',
        '<nobr>Trip owner: </nobr><span style="padding-left:4px;',
        ' font-weight:bold;">', objTrip.ownerName, '&nbsp;&nbsp;</span></span>',
        '<span id="thumb" style="position:relative;top:0">',
        '<span style="padding-left:5px;font-size:12px;color:#fff;">',
        '<nobr><b><span id="thum_up">', 'Votes: ', objTrip.thumb_up,
        '</span></b> thumbs up, ',
        '<b><span id="thum_down">', objTrip.thumb_down, '</span></b>',
        ' thumbs down</nobr></span></span><span id ="banInWave" ',
        'style="padding-left:8px;position:relative;top:0" ',
        'class="link" onclick="addYourVote()">',
        '<nobr>Vote Now</nobr></span></td></tr></tr></table>',
        '<table cellpadding="0" cellspacing="0" border="0" width="100%">',
        '<tr><td width="55%" style="height:100%;padding-left:5px;',
        'border:1px solid #058a9d;border-top:0; border-right:0;',
        'background:#f5eee6;" valign="top">',
        '<table width="100%" border="0" cellspacing="0" ',
        'cellpadding="0"><tr>',
        '<td valign="top" rowspan="2" id="map-container" ',
        'style="padding:5px 5px 0 0;"><div id="mapBox"></div>',
        '</td><td style="height:22px;background:#eef9f9;',
        'vertical-align:top;border:1px solid #058a9d;border-bottom:0;',
        'display:none;" id="result-section"><span id="resultText"></span>',
        '<br><div style="font-size:12px;font-size:',
        '12px;padding:0 0 4px 6px; display:none;" id="tip-container">',
        '<span style="color:#f00;">' + prefs.getMsg('tip') +
        '</span>&nbsp;' + prefs.getMsg('drag_tip') + '</div></td></tr><tr>',
        '<td id="result-container" valign="top" ',
        'style="background:#eef9f9;border:1px solid #058a9d;border-top:0;',
        'display:none;padding-bottom:3px;">',
        '<div id="resultBox">',
        '</div><div id="navBox" ',
        'style="display:none;padding:4px 0;"></div></td></tr>',
        '<tr><td height="5px;"></td></tr></table></td><td width="30%"',
        ' valign="top" style="background:#f5eee6;',
        'border:1px solid #058a9d;border-top:0;border-left:0">',
        '<div id="durationSection" style="background:#f5eee6;">',
        '<table border="0" width="100%"><tr>',
        '<td width="80%" style="padding-top:6px;">',
        '<div id="duration" style="float:left;font-size:13px;"></div>&nbsp;',
        '<img src="' + FILE_SERVER + '/images/calender.png" ',
        'onclick="javascript:showDateDialog();" style="cursor:pointer;"/>',
        '&nbsp;<span id="editDays" class="link" ',
        'style="vertical-align:top;color:#00c;" ',
        'onclick="javascript:showDateDialog();">' + prefs.getMsg('edit') +
        '</span></td></tr></table></div><span ',
        'style="font-size:13px;font-weight:bold;',
        'background:#f5eee6;float:left;padding:10px 0 0 5px;">' +
        prefs.getMsg('unscheduled_items') +
        '</span><span style="float:right;padding:5px;">',
        '<input type="button" value="' + prefs.getMsg('createitem') +
        '" style="font-size:11px;" onclick="',
        'javascript:createCustomItemDialog();"></span><br style="clear:both"/>',
        '<div style="padding:5px;background:#f5eee6">',
        '<div style="background:#fff;"><div id="unscheduleItemBox" ',
        'style="text-align:left;"></div></div></div>',
        '<div style="background:#f5eee6;padding:5px;">',
        '<div id="scheduleItemBox" style="',
        'height:333px;background:#fff;"></div>',
        '<div style="height:5px;background:#f5eee6;"></div>',
        '</td></tr></table>');

    _gel('canvasContent').innerHTML = html.join('');

    //To hide Vote now section on top in Wave Container.
    if (wave && wave.isInWaveContainer()) {
      _gel('banInWave').style.display = 'none';
      _gel('thumb').style.display = 'none';
    } else if (!objTrip.thumb_up && !objTrip.thumb_down) {
      _gel('thumb').style.display = 'none';
    }
    addKeyListener('search-box');
    createScheduledItemBox(objTrip.sdate, objTrip.edate, objTrip.duration);

    _gel('unscheduleItemBox').onscroll = onScroll;
    _gel('scheduleItemBox').onscroll = onScroll;

    // show location and marker on map.
    var start = new GLatLng(objTrip.lat, objTrip.lng);
    gMap = new GMap2(_gel('mapBox'));
    gMap.setCenter(start, tabAccuracy[objTrip.accuracy]);
    gMap.addControl(new GSmallMapControl());
    gMap.panTo(start);
    objTrip.fetchAllItems();
  }
  _IG_AdjustIFrameHeight();
}

/**
 * Fill item on interface.
 * @param {number} nIndex Position of item.
 */
function fillItem(nIndex) {
  var objTrip = JGulliverData.getCurrentTrip();
  var objItem = objTrip.arrItem[nIndex];
  var address = (objItem.address == null) ? '' : _unesc(objItem.address);

  var unscheduledItemHtml = [];
  var element;
  /** If trip date is found, we have to check for item dates
     for scheduling the item else check for days */
  if (isEmpty(objTrip.sdate) == false) {
    if (isEmpty(objItem.sdate) == false && isEmpty(objItem.edate) == false) {
      var divIndex = getDateDiff(objTrip.sdate, objItem.sdate);
      if (divIndex >= 0) {
        element = _gel('item' + divIndex);
        if (element.innerHTML.strip() == '')
          _gel('scheduledInfoBox' + divIndex).style.height = '';
        element.innerHTML += getItemHtml(nIndex, objItem.name, address, true);
      } else {
        unscheduledItemHtml.push(getItemHtml(nIndex,
                                             objItem.name, address, false));
      }
    } else {
       unscheduledItemHtml.push(getItemHtml(nIndex,
                                            objItem.name, address, false));
    }
  } else {
    var divIndex = objItem.day - 1;
    if (divIndex >= 0 && divIndex < objTrip.duration) {
      element = _gel('item' + divIndex);
      if (element.innerHTML.strip() == '')
        _gel('scheduledInfoBox' + divIndex).style.height = '';

      element.innerHTML +=
          getItemHtml(nIndex, _unesc(objItem.name), address, true);
    } else {
      unscheduledItemHtml.push(getItemHtml(nIndex, _unesc(objItem.name),
                                           address, false));
    }
  }
  _gel('unscheduleItemBox').innerHTML += unscheduledItemHtml.join('');
}

/**
 * Callback function for trips tab.
 * @param {boolean} setFlag Flag indicates whether UI is to be refreshed or not.
 */
function callbackTrips(setFlag) {
  refreshUIData = setFlag || false;
  var canvasDiv = _gel('canvasContent');
  canvasDiv.style.height = '610px';
  canvasDiv.innerHTML = LOADING_TPL;
  _gel('messageContainer').style.display = 'none';
  _gel('search-box').value = '';
  if (_gel('serverMsg')) {
    _gel('serverMsg').innerHTML = '';
    _gel('msgContainer').style.display = 'none';
  }
  loadFriends();
}

/**
 * Initialize all parameters and preferences.
 */
function init() {
  var isWavelet = wave && wave.isInWaveContainer();
  timerMsg = new _IG_MiniMessage(__MODULE_ID__, _gel('serverMsg'));
  geocoder = new GClientGeocoder();
  gViewer = gParams['currentViewer'];
  var id = gParams['tripId'];
  if (id) {
    var trip = new JTrip();
    trip.id = id;
    trip.name = gParams['tripName'];
    trip.ownerId = gParams['ownerId'];
    trip.ownerName = gParams['ownerName'];
    trip.loc = gParams['tripLocation'];
    trip.lat = gParams['lat'];
    trip.lng = gParams['lng'];
    trip.accuracy = gParams['accuracy'];
    trip.duration = gParams['duration'];
    if (!isEmpty(gParams['sdate']))
      trip.sdate = formatDate(gParams['sdate'], '%m/%d/%Y');
    if (!isEmpty(gParams['fdate']))
      trip.edate = formatDate(gParams['fdate'], '%m/%d/%Y');
    trip.rating = gParams['rating'];
    var gulliverData = JGulliverData.getInstance();
    gulliverData.arrTripData.push(trip);
    gulliverData.nSelectedTripIndex = 0;
  }
  if (isWavelet) {
    _gel('messageContainer').innerHTML = TAB_HEADER_TPL_NPL;
  } else {
    _gel('messageContainer').innerHTML = TAB_HEADER_TPL;
  }
  _gel('messageContainer').className = 'tablib_emptyTab_canvas';
  if (isEmpty(id)) {
    callbackTrips();
  } else {
    showDragTip();
    callbackCreateTrip();
  }
  _IG_AdjustIFrameHeight();
}

//Entry point.
_IG_RegisterOnloadHandler(init);
</script>
<div id="msgContainer" style="display:none;text-align:center;">
<div id="serverMsg"></div>
</div>
<div id="gadget-body">
  <div id="messageContainer"></div>
  <div id="loading-container" style="background:#f5eee6"></div>
  <div id="canvasContent"></div>
  <div id="content" />
  <div id="print_content"></div>
  <div id="toolTip" onmouseout="this.style.display='none'"></div>
  <div id="dragHelper" style="background:#eef9f9;width:26%;display:none;cursor:move;"></div>
  <div id="mask" style="width:20px;height:34px;position:absolute;cursor:move;z-index:10000;display:none;" onclick="showMarkerInfo();" onmouseout="_gel('toolTip').style.display='none'">
    <img style="border:0;margin:0;padding:0;width:20px;height:34px;cursor:move;" src="http://www.google.com/c.gif"/>
  </div>
</div>
]]>
</Content>
</Module>
